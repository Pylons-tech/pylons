package types

import (
	fmt "fmt"
	"testing"

	sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"
	"github.com/stretchr/testify/require"
)

func TestMsgGoogleInAppPurchaseGetCoinsValidateBasic(t *testing.T) {
	correctAddr := "cosmos1n67vdlaejpj3uzswr9qapeg76zlkusj5k875ma"
	invalidAddr := "pylo1xn72u3jxlpqx8tfgmjf0xg970q36xensjngsme"

	privateKey := GenerateRSAKey()

	// Message is generated by IAP app
	message := "{\"orderId\":\"GPA.3394-4112-7048-14805\",\"packageName\":\"tech.pylons.wallet\",\"productId\":\"free_pylons\",\"purchaseTime\":1653891466961,\"purchaseState\":0,\"purchaseToken\":\"eafhleeolclclafkfmmcidoj.AO-J1OxuhZCjvZC7qmYxXCQFDAsrQ2FAot8PHgd9Gt0Ag_-U9ZCzao6EdkDBhxWGfQFqwV9PZNx5sW-WMrv5KfYS1g4K-mhDAA\",\"acknowledged\":false}"
	digest := GenerateBase64Digest(message)
	encodedBase64Digest := toBase64([]byte(message))
	signature, err := SignPKCS1v15(privateKey, digest)
	if err != nil {
		t.Error(fmt.Printf("rsa.SignPKCS1v15 error: %v\n", err))
		t.Fail()
	}
	signaturebase64Encoded := toBase64(signature)
	for _, tc := range []struct {
		desc string
		req  *MsgGoogleInAppPurchaseGetCoins
		err  error
	}{
		{
			desc: "Valid",
			req: &MsgGoogleInAppPurchaseGetCoins{
				Creator:           correctAddr,
				ProductId:         "free_pylons",
				ReceiptDataBase64: encodedBase64Digest,
				PurchaseToken:     "eafhleeolclclafkfmmcidoj.AO-J1OxuhZCjvZC7qmYxXCQFDAsrQ2FAot8PHgd9Gt0Ag_-U9ZCzao6EdkDBhxWGfQFqwV9PZNx5sW-WMrv5KfYS1g4K-mhDAA",
				Signature:         signaturebase64Encoded,
			},
			err: nil,
		},
		{
			desc: "Invalid creator address 1",
			req: &MsgGoogleInAppPurchaseGetCoins{
				Creator: "",
			},
			err: sdkerrors.ErrInvalidAddress,
		},
		{
			desc: "Invalid creator address 2",
			req: &MsgGoogleInAppPurchaseGetCoins{
				Creator: invalidAddr,
			},
			err: sdkerrors.ErrInvalidAddress,
		},
		{
			desc: "Invalid creator address 3",
			req: &MsgGoogleInAppPurchaseGetCoins{
				Creator: "test",
			},
			err: sdkerrors.ErrInvalidAddress,
		},
		{
			desc: "Invalid PurchaseToken",
			req: &MsgGoogleInAppPurchaseGetCoins{
				Creator:           correctAddr,
				ProductId:         "free_pylons",
				ReceiptDataBase64: encodedBase64Digest,
				PurchaseToken:     "INVALID_PURCHASETOKEN",
				Signature:         signaturebase64Encoded,
			},
			err: fmt.Errorf("purchaseToken does not match with receipt data"),
		},
		{
			desc: "Invalid Product Id",
			req: &MsgGoogleInAppPurchaseGetCoins{
				Creator:           correctAddr,
				ProductId:         "INVALID_PRODUCTID",
				ReceiptDataBase64: encodedBase64Digest,
				PurchaseToken:     "eafhleeolclclafkfmmcidoj.AO-J1OxuhZCjvZC7qmYxXCQFDAsrQ2FAot8PHgd9Gt0Ag_-U9ZCzao6EdkDBhxWGfQFqwV9PZNx5sW-WMrv5KfYS1g4K-mhDAA",
				Signature:         signaturebase64Encoded,
			},
			err: fmt.Errorf("productId does not match with receipt data"),
		},
	} {
		tc := tc
		t.Run(tc.desc, func(t *testing.T) {
			err := tc.req.ValidateBasic()
			if err != nil {
				require.ErrorContains(t, err, fmt.Sprintf("%v", tc.err))
			} else {
				require.NoError(t, tc.err)
			}
		})
	}
}
