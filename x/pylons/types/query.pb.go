// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pylons/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryListTradesByCreatorRequest struct {
	Creator    string             `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListTradesByCreatorRequest) Reset()         { *m = QueryListTradesByCreatorRequest{} }
func (m *QueryListTradesByCreatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListTradesByCreatorRequest) ProtoMessage()    {}
func (*QueryListTradesByCreatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{0}
}
func (m *QueryListTradesByCreatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListTradesByCreatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListTradesByCreatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListTradesByCreatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListTradesByCreatorRequest.Merge(m, src)
}
func (m *QueryListTradesByCreatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListTradesByCreatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListTradesByCreatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListTradesByCreatorRequest proto.InternalMessageInfo

func (m *QueryListTradesByCreatorRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *QueryListTradesByCreatorRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListTradesByCreatorResponse struct {
	Trades []Trade `protobuf:"bytes,1,rep,name=Trades,proto3" json:"Trades"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListTradesByCreatorResponse) Reset()         { *m = QueryListTradesByCreatorResponse{} }
func (m *QueryListTradesByCreatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListTradesByCreatorResponse) ProtoMessage()    {}
func (*QueryListTradesByCreatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{1}
}
func (m *QueryListTradesByCreatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListTradesByCreatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListTradesByCreatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListTradesByCreatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListTradesByCreatorResponse.Merge(m, src)
}
func (m *QueryListTradesByCreatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListTradesByCreatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListTradesByCreatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListTradesByCreatorResponse proto.InternalMessageInfo

type QueryGetRecipeHistoryRequest struct {
	CookbookID string `protobuf:"bytes,1,opt,name=cookbookID,proto3" json:"cookbookID,omitempty"`
	RecipeID   string `protobuf:"bytes,2,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
}

func (m *QueryGetRecipeHistoryRequest) Reset()         { *m = QueryGetRecipeHistoryRequest{} }
func (m *QueryGetRecipeHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRecipeHistoryRequest) ProtoMessage()    {}
func (*QueryGetRecipeHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{2}
}
func (m *QueryGetRecipeHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRecipeHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRecipeHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRecipeHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRecipeHistoryRequest.Merge(m, src)
}
func (m *QueryGetRecipeHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRecipeHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRecipeHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRecipeHistoryRequest proto.InternalMessageInfo

func (m *QueryGetRecipeHistoryRequest) GetCookbookID() string {
	if m != nil {
		return m.CookbookID
	}
	return ""
}

func (m *QueryGetRecipeHistoryRequest) GetRecipeID() string {
	if m != nil {
		return m.RecipeID
	}
	return ""
}

type QueryGetRecipeHistoryResponse struct {
	History []*RecipeHistory `protobuf:"bytes,1,rep,name=History,proto3" json:"History,omitempty"`
}

func (m *QueryGetRecipeHistoryResponse) Reset()         { *m = QueryGetRecipeHistoryResponse{} }
func (m *QueryGetRecipeHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRecipeHistoryResponse) ProtoMessage()    {}
func (*QueryGetRecipeHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{3}
}
func (m *QueryGetRecipeHistoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRecipeHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRecipeHistoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRecipeHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRecipeHistoryResponse.Merge(m, src)
}
func (m *QueryGetRecipeHistoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRecipeHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRecipeHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRecipeHistoryResponse proto.InternalMessageInfo

func (m *QueryGetRecipeHistoryResponse) GetHistory() []*RecipeHistory {
	if m != nil {
		return m.History
	}
	return nil
}

type RecipeHistory struct {
	ItemID     string `protobuf:"bytes,1,opt,name=ItemID,proto3" json:"ItemID,omitempty"`
	CookbookID string `protobuf:"bytes,2,opt,name=CookbookID,proto3" json:"CookbookID,omitempty"`
	RecipeID   string `protobuf:"bytes,3,opt,name=RecipeID,proto3" json:"RecipeID,omitempty"`
	Sender     string `protobuf:"bytes,4,opt,name=Sender,proto3" json:"Sender,omitempty"`
	SenderName string `protobuf:"bytes,5,opt,name=SenderName,proto3" json:"SenderName,omitempty"`
	Reciever   string `protobuf:"bytes,6,opt,name=Reciever,proto3" json:"Reciever,omitempty"`
	Amount     string `protobuf:"bytes,7,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Time       int64  `protobuf:"varint,8,opt,name=Time,proto3" json:"Time,omitempty"`
}

func (m *RecipeHistory) Reset()         { *m = RecipeHistory{} }
func (m *RecipeHistory) String() string { return proto.CompactTextString(m) }
func (*RecipeHistory) ProtoMessage()    {}
func (*RecipeHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{4}
}
func (m *RecipeHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecipeHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecipeHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecipeHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecipeHistory.Merge(m, src)
}
func (m *RecipeHistory) XXX_Size() int {
	return m.Size()
}
func (m *RecipeHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_RecipeHistory.DiscardUnknown(m)
}

var xxx_messageInfo_RecipeHistory proto.InternalMessageInfo

func (m *RecipeHistory) GetItemID() string {
	if m != nil {
		return m.ItemID
	}
	return ""
}

func (m *RecipeHistory) GetCookbookID() string {
	if m != nil {
		return m.CookbookID
	}
	return ""
}

func (m *RecipeHistory) GetRecipeID() string {
	if m != nil {
		return m.RecipeID
	}
	return ""
}

func (m *RecipeHistory) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *RecipeHistory) GetSenderName() string {
	if m != nil {
		return m.SenderName
	}
	return ""
}

func (m *RecipeHistory) GetReciever() string {
	if m != nil {
		return m.Reciever
	}
	return ""
}

func (m *RecipeHistory) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *RecipeHistory) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

// this line is used by starport scaffolding # 3
type QueryGetRedeemInfoRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *QueryGetRedeemInfoRequest) Reset()         { *m = QueryGetRedeemInfoRequest{} }
func (m *QueryGetRedeemInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRedeemInfoRequest) ProtoMessage()    {}
func (*QueryGetRedeemInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{5}
}
func (m *QueryGetRedeemInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRedeemInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRedeemInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRedeemInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRedeemInfoRequest.Merge(m, src)
}
func (m *QueryGetRedeemInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRedeemInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRedeemInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRedeemInfoRequest proto.InternalMessageInfo

func (m *QueryGetRedeemInfoRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type QueryGetRedeemInfoResponse struct {
	RedeemInfo RedeemInfo `protobuf:"bytes,1,opt,name=RedeemInfo,proto3" json:"RedeemInfo"`
}

func (m *QueryGetRedeemInfoResponse) Reset()         { *m = QueryGetRedeemInfoResponse{} }
func (m *QueryGetRedeemInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRedeemInfoResponse) ProtoMessage()    {}
func (*QueryGetRedeemInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{6}
}
func (m *QueryGetRedeemInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRedeemInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRedeemInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRedeemInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRedeemInfoResponse.Merge(m, src)
}
func (m *QueryGetRedeemInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRedeemInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRedeemInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRedeemInfoResponse proto.InternalMessageInfo

func (m *QueryGetRedeemInfoResponse) GetRedeemInfo() RedeemInfo {
	if m != nil {
		return m.RedeemInfo
	}
	return RedeemInfo{}
}

type QueryAllRedeemInfoRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRedeemInfoRequest) Reset()         { *m = QueryAllRedeemInfoRequest{} }
func (m *QueryAllRedeemInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRedeemInfoRequest) ProtoMessage()    {}
func (*QueryAllRedeemInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{7}
}
func (m *QueryAllRedeemInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRedeemInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRedeemInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRedeemInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRedeemInfoRequest.Merge(m, src)
}
func (m *QueryAllRedeemInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRedeemInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRedeemInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRedeemInfoRequest proto.InternalMessageInfo

func (m *QueryAllRedeemInfoRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRedeemInfoResponse struct {
	RedeemInfo []RedeemInfo        `protobuf:"bytes,1,rep,name=RedeemInfo,proto3" json:"RedeemInfo"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRedeemInfoResponse) Reset()         { *m = QueryAllRedeemInfoResponse{} }
func (m *QueryAllRedeemInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRedeemInfoResponse) ProtoMessage()    {}
func (*QueryAllRedeemInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{8}
}
func (m *QueryAllRedeemInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRedeemInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRedeemInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRedeemInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRedeemInfoResponse.Merge(m, src)
}
func (m *QueryAllRedeemInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRedeemInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRedeemInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRedeemInfoResponse proto.InternalMessageInfo

func (m *QueryAllRedeemInfoResponse) GetRedeemInfo() []RedeemInfo {
	if m != nil {
		return m.RedeemInfo
	}
	return nil
}

func (m *QueryAllRedeemInfoResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPaymentInfoRequest struct {
	PurchaseID string `protobuf:"bytes,1,opt,name=purchaseID,proto3" json:"purchaseID,omitempty"`
}

func (m *QueryGetPaymentInfoRequest) Reset()         { *m = QueryGetPaymentInfoRequest{} }
func (m *QueryGetPaymentInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPaymentInfoRequest) ProtoMessage()    {}
func (*QueryGetPaymentInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{9}
}
func (m *QueryGetPaymentInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPaymentInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPaymentInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPaymentInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPaymentInfoRequest.Merge(m, src)
}
func (m *QueryGetPaymentInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPaymentInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPaymentInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPaymentInfoRequest proto.InternalMessageInfo

func (m *QueryGetPaymentInfoRequest) GetPurchaseID() string {
	if m != nil {
		return m.PurchaseID
	}
	return ""
}

type QueryGetPaymentInfoResponse struct {
	PaymentInfo PaymentInfo `protobuf:"bytes,1,opt,name=PaymentInfo,proto3" json:"PaymentInfo"`
}

func (m *QueryGetPaymentInfoResponse) Reset()         { *m = QueryGetPaymentInfoResponse{} }
func (m *QueryGetPaymentInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPaymentInfoResponse) ProtoMessage()    {}
func (*QueryGetPaymentInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{10}
}
func (m *QueryGetPaymentInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPaymentInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPaymentInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPaymentInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPaymentInfoResponse.Merge(m, src)
}
func (m *QueryGetPaymentInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPaymentInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPaymentInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPaymentInfoResponse proto.InternalMessageInfo

func (m *QueryGetPaymentInfoResponse) GetPaymentInfo() PaymentInfo {
	if m != nil {
		return m.PaymentInfo
	}
	return PaymentInfo{}
}

type QueryAllPaymentInfoRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPaymentInfoRequest) Reset()         { *m = QueryAllPaymentInfoRequest{} }
func (m *QueryAllPaymentInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPaymentInfoRequest) ProtoMessage()    {}
func (*QueryAllPaymentInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{11}
}
func (m *QueryAllPaymentInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPaymentInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPaymentInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPaymentInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPaymentInfoRequest.Merge(m, src)
}
func (m *QueryAllPaymentInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPaymentInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPaymentInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPaymentInfoRequest proto.InternalMessageInfo

func (m *QueryAllPaymentInfoRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPaymentInfoResponse struct {
	PaymentInfo []PaymentInfo       `protobuf:"bytes,1,rep,name=PaymentInfo,proto3" json:"PaymentInfo"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPaymentInfoResponse) Reset()         { *m = QueryAllPaymentInfoResponse{} }
func (m *QueryAllPaymentInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPaymentInfoResponse) ProtoMessage()    {}
func (*QueryAllPaymentInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{12}
}
func (m *QueryAllPaymentInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPaymentInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPaymentInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPaymentInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPaymentInfoResponse.Merge(m, src)
}
func (m *QueryAllPaymentInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPaymentInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPaymentInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPaymentInfoResponse proto.InternalMessageInfo

func (m *QueryAllPaymentInfoResponse) GetPaymentInfo() []PaymentInfo {
	if m != nil {
		return m.PaymentInfo
	}
	return nil
}

func (m *QueryAllPaymentInfoResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetUsernameByAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetUsernameByAddressRequest) Reset()         { *m = QueryGetUsernameByAddressRequest{} }
func (m *QueryGetUsernameByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetUsernameByAddressRequest) ProtoMessage()    {}
func (*QueryGetUsernameByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{13}
}
func (m *QueryGetUsernameByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUsernameByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUsernameByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUsernameByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUsernameByAddressRequest.Merge(m, src)
}
func (m *QueryGetUsernameByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUsernameByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUsernameByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUsernameByAddressRequest proto.InternalMessageInfo

func (m *QueryGetUsernameByAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetAddressByUsernameRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (m *QueryGetAddressByUsernameRequest) Reset()         { *m = QueryGetAddressByUsernameRequest{} }
func (m *QueryGetAddressByUsernameRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAddressByUsernameRequest) ProtoMessage()    {}
func (*QueryGetAddressByUsernameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{14}
}
func (m *QueryGetAddressByUsernameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAddressByUsernameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAddressByUsernameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAddressByUsernameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAddressByUsernameRequest.Merge(m, src)
}
func (m *QueryGetAddressByUsernameRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAddressByUsernameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAddressByUsernameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAddressByUsernameRequest proto.InternalMessageInfo

func (m *QueryGetAddressByUsernameRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type QueryGetUsernameByAddressResponse struct {
	Username Username `protobuf:"bytes,1,opt,name=username,proto3" json:"username"`
}

func (m *QueryGetUsernameByAddressResponse) Reset()         { *m = QueryGetUsernameByAddressResponse{} }
func (m *QueryGetUsernameByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetUsernameByAddressResponse) ProtoMessage()    {}
func (*QueryGetUsernameByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{15}
}
func (m *QueryGetUsernameByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUsernameByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUsernameByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUsernameByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUsernameByAddressResponse.Merge(m, src)
}
func (m *QueryGetUsernameByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUsernameByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUsernameByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUsernameByAddressResponse proto.InternalMessageInfo

func (m *QueryGetUsernameByAddressResponse) GetUsername() Username {
	if m != nil {
		return m.Username
	}
	return Username{}
}

type QueryGetAddressByUsernameResponse struct {
	Address AccountAddr `protobuf:"bytes,1,opt,name=address,proto3" json:"address"`
}

func (m *QueryGetAddressByUsernameResponse) Reset()         { *m = QueryGetAddressByUsernameResponse{} }
func (m *QueryGetAddressByUsernameResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAddressByUsernameResponse) ProtoMessage()    {}
func (*QueryGetAddressByUsernameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{16}
}
func (m *QueryGetAddressByUsernameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAddressByUsernameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAddressByUsernameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAddressByUsernameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAddressByUsernameResponse.Merge(m, src)
}
func (m *QueryGetAddressByUsernameResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAddressByUsernameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAddressByUsernameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAddressByUsernameResponse proto.InternalMessageInfo

func (m *QueryGetAddressByUsernameResponse) GetAddress() AccountAddr {
	if m != nil {
		return m.Address
	}
	return AccountAddr{}
}

type QueryGetTradeRequest struct {
	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *QueryGetTradeRequest) Reset()         { *m = QueryGetTradeRequest{} }
func (m *QueryGetTradeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTradeRequest) ProtoMessage()    {}
func (*QueryGetTradeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{17}
}
func (m *QueryGetTradeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTradeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTradeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTradeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTradeRequest.Merge(m, src)
}
func (m *QueryGetTradeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTradeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTradeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTradeRequest proto.InternalMessageInfo

func (m *QueryGetTradeRequest) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type QueryGetTradeResponse struct {
	Trade Trade `protobuf:"bytes,1,opt,name=Trade,proto3" json:"Trade"`
}

func (m *QueryGetTradeResponse) Reset()         { *m = QueryGetTradeResponse{} }
func (m *QueryGetTradeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTradeResponse) ProtoMessage()    {}
func (*QueryGetTradeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{18}
}
func (m *QueryGetTradeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTradeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTradeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTradeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTradeResponse.Merge(m, src)
}
func (m *QueryGetTradeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTradeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTradeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTradeResponse proto.InternalMessageInfo

func (m *QueryGetTradeResponse) GetTrade() Trade {
	if m != nil {
		return m.Trade
	}
	return Trade{}
}

type QueryListItemByOwnerRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListItemByOwnerRequest) Reset()         { *m = QueryListItemByOwnerRequest{} }
func (m *QueryListItemByOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListItemByOwnerRequest) ProtoMessage()    {}
func (*QueryListItemByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{19}
}
func (m *QueryListItemByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListItemByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListItemByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListItemByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListItemByOwnerRequest.Merge(m, src)
}
func (m *QueryListItemByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListItemByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListItemByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListItemByOwnerRequest proto.InternalMessageInfo

func (m *QueryListItemByOwnerRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryListItemByOwnerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListItemByOwnerResponse struct {
	Items []Item `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListItemByOwnerResponse) Reset()         { *m = QueryListItemByOwnerResponse{} }
func (m *QueryListItemByOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListItemByOwnerResponse) ProtoMessage()    {}
func (*QueryListItemByOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{20}
}
func (m *QueryListItemByOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListItemByOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListItemByOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListItemByOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListItemByOwnerResponse.Merge(m, src)
}
func (m *QueryListItemByOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListItemByOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListItemByOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListItemByOwnerResponse proto.InternalMessageInfo

type QueryGetGoogleInAppPurchaseOrderRequest struct {
	PurchaseToken string `protobuf:"bytes,1,opt,name=PurchaseToken,proto3" json:"PurchaseToken,omitempty"`
}

func (m *QueryGetGoogleInAppPurchaseOrderRequest) Reset() {
	*m = QueryGetGoogleInAppPurchaseOrderRequest{}
}
func (m *QueryGetGoogleInAppPurchaseOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetGoogleInAppPurchaseOrderRequest) ProtoMessage()    {}
func (*QueryGetGoogleInAppPurchaseOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{21}
}
func (m *QueryGetGoogleInAppPurchaseOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGoogleInAppPurchaseOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGoogleInAppPurchaseOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGoogleInAppPurchaseOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGoogleInAppPurchaseOrderRequest.Merge(m, src)
}
func (m *QueryGetGoogleInAppPurchaseOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGoogleInAppPurchaseOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGoogleInAppPurchaseOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGoogleInAppPurchaseOrderRequest proto.InternalMessageInfo

func (m *QueryGetGoogleInAppPurchaseOrderRequest) GetPurchaseToken() string {
	if m != nil {
		return m.PurchaseToken
	}
	return ""
}

type QueryGetGoogleInAppPurchaseOrderResponse struct {
	Order GoogleInAppPurchaseOrder `protobuf:"bytes,1,opt,name=Order,proto3" json:"Order"`
}

func (m *QueryGetGoogleInAppPurchaseOrderResponse) Reset() {
	*m = QueryGetGoogleInAppPurchaseOrderResponse{}
}
func (m *QueryGetGoogleInAppPurchaseOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetGoogleInAppPurchaseOrderResponse) ProtoMessage()    {}
func (*QueryGetGoogleInAppPurchaseOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{22}
}
func (m *QueryGetGoogleInAppPurchaseOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGoogleInAppPurchaseOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGoogleInAppPurchaseOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGoogleInAppPurchaseOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGoogleInAppPurchaseOrderResponse.Merge(m, src)
}
func (m *QueryGetGoogleInAppPurchaseOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGoogleInAppPurchaseOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGoogleInAppPurchaseOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGoogleInAppPurchaseOrderResponse proto.InternalMessageInfo

func (m *QueryGetGoogleInAppPurchaseOrderResponse) GetOrder() GoogleInAppPurchaseOrder {
	if m != nil {
		return m.Order
	}
	return GoogleInAppPurchaseOrder{}
}

type QueryListExecutionsByItemRequest struct {
	CookbookID string `protobuf:"bytes,1,opt,name=CookbookID,proto3" json:"CookbookID,omitempty"`
	ItemID     string `protobuf:"bytes,2,opt,name=ItemID,proto3" json:"ItemID,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListExecutionsByItemRequest) Reset()         { *m = QueryListExecutionsByItemRequest{} }
func (m *QueryListExecutionsByItemRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListExecutionsByItemRequest) ProtoMessage()    {}
func (*QueryListExecutionsByItemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{23}
}
func (m *QueryListExecutionsByItemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListExecutionsByItemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListExecutionsByItemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListExecutionsByItemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListExecutionsByItemRequest.Merge(m, src)
}
func (m *QueryListExecutionsByItemRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListExecutionsByItemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListExecutionsByItemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListExecutionsByItemRequest proto.InternalMessageInfo

type QueryListExecutionsByItemResponse struct {
	CompletedExecutions []Execution `protobuf:"bytes,1,rep,name=CompletedExecutions,proto3" json:"CompletedExecutions"`
	PendingExecutions   []Execution `protobuf:"bytes,2,rep,name=PendingExecutions,proto3" json:"PendingExecutions"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListExecutionsByItemResponse) Reset()         { *m = QueryListExecutionsByItemResponse{} }
func (m *QueryListExecutionsByItemResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListExecutionsByItemResponse) ProtoMessage()    {}
func (*QueryListExecutionsByItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{24}
}
func (m *QueryListExecutionsByItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListExecutionsByItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListExecutionsByItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListExecutionsByItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListExecutionsByItemResponse.Merge(m, src)
}
func (m *QueryListExecutionsByItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListExecutionsByItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListExecutionsByItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListExecutionsByItemResponse proto.InternalMessageInfo

func (m *QueryListExecutionsByItemResponse) GetCompletedExecutions() []Execution {
	if m != nil {
		return m.CompletedExecutions
	}
	return nil
}

func (m *QueryListExecutionsByItemResponse) GetPendingExecutions() []Execution {
	if m != nil {
		return m.PendingExecutions
	}
	return nil
}

func (m *QueryListExecutionsByItemResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListExecutionsByRecipeRequest struct {
	CookbookID string `protobuf:"bytes,1,opt,name=CookbookID,proto3" json:"CookbookID,omitempty"`
	RecipeID   string `protobuf:"bytes,2,opt,name=RecipeID,proto3" json:"RecipeID,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListExecutionsByRecipeRequest) Reset()         { *m = QueryListExecutionsByRecipeRequest{} }
func (m *QueryListExecutionsByRecipeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListExecutionsByRecipeRequest) ProtoMessage()    {}
func (*QueryListExecutionsByRecipeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{25}
}
func (m *QueryListExecutionsByRecipeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListExecutionsByRecipeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListExecutionsByRecipeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListExecutionsByRecipeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListExecutionsByRecipeRequest.Merge(m, src)
}
func (m *QueryListExecutionsByRecipeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListExecutionsByRecipeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListExecutionsByRecipeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListExecutionsByRecipeRequest proto.InternalMessageInfo

type QueryListExecutionsByRecipeResponse struct {
	CompletedExecutions []Execution `protobuf:"bytes,1,rep,name=CompletedExecutions,proto3" json:"CompletedExecutions"`
	PendingExecutions   []Execution `protobuf:"bytes,2,rep,name=PendingExecutions,proto3" json:"PendingExecutions"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListExecutionsByRecipeResponse) Reset()         { *m = QueryListExecutionsByRecipeResponse{} }
func (m *QueryListExecutionsByRecipeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListExecutionsByRecipeResponse) ProtoMessage()    {}
func (*QueryListExecutionsByRecipeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{26}
}
func (m *QueryListExecutionsByRecipeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListExecutionsByRecipeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListExecutionsByRecipeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListExecutionsByRecipeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListExecutionsByRecipeResponse.Merge(m, src)
}
func (m *QueryListExecutionsByRecipeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListExecutionsByRecipeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListExecutionsByRecipeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListExecutionsByRecipeResponse proto.InternalMessageInfo

func (m *QueryListExecutionsByRecipeResponse) GetCompletedExecutions() []Execution {
	if m != nil {
		return m.CompletedExecutions
	}
	return nil
}

func (m *QueryListExecutionsByRecipeResponse) GetPendingExecutions() []Execution {
	if m != nil {
		return m.PendingExecutions
	}
	return nil
}

func (m *QueryListExecutionsByRecipeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetExecutionRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *QueryGetExecutionRequest) Reset()         { *m = QueryGetExecutionRequest{} }
func (m *QueryGetExecutionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetExecutionRequest) ProtoMessage()    {}
func (*QueryGetExecutionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{27}
}
func (m *QueryGetExecutionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExecutionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExecutionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExecutionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExecutionRequest.Merge(m, src)
}
func (m *QueryGetExecutionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExecutionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExecutionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExecutionRequest proto.InternalMessageInfo

func (m *QueryGetExecutionRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type QueryGetExecutionResponse struct {
	Execution Execution `protobuf:"bytes,1,opt,name=Execution,proto3" json:"Execution"`
	Completed bool      `protobuf:"varint,2,opt,name=Completed,proto3" json:"Completed,omitempty"`
}

func (m *QueryGetExecutionResponse) Reset()         { *m = QueryGetExecutionResponse{} }
func (m *QueryGetExecutionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetExecutionResponse) ProtoMessage()    {}
func (*QueryGetExecutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{28}
}
func (m *QueryGetExecutionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExecutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExecutionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExecutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExecutionResponse.Merge(m, src)
}
func (m *QueryGetExecutionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExecutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExecutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExecutionResponse proto.InternalMessageInfo

func (m *QueryGetExecutionResponse) GetExecution() Execution {
	if m != nil {
		return m.Execution
	}
	return Execution{}
}

func (m *QueryGetExecutionResponse) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

type QueryListRecipesByCookbookRequest struct {
	CookbookID string `protobuf:"bytes,1,opt,name=CookbookID,proto3" json:"CookbookID,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListRecipesByCookbookRequest) Reset()         { *m = QueryListRecipesByCookbookRequest{} }
func (m *QueryListRecipesByCookbookRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListRecipesByCookbookRequest) ProtoMessage()    {}
func (*QueryListRecipesByCookbookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{29}
}
func (m *QueryListRecipesByCookbookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListRecipesByCookbookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListRecipesByCookbookRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListRecipesByCookbookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListRecipesByCookbookRequest.Merge(m, src)
}
func (m *QueryListRecipesByCookbookRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListRecipesByCookbookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListRecipesByCookbookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListRecipesByCookbookRequest proto.InternalMessageInfo

func (m *QueryListRecipesByCookbookRequest) GetCookbookID() string {
	if m != nil {
		return m.CookbookID
	}
	return ""
}

func (m *QueryListRecipesByCookbookRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListRecipesByCookbookResponse struct {
	Recipes []Recipe `protobuf:"bytes,1,rep,name=Recipes,proto3" json:"Recipes"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListRecipesByCookbookResponse) Reset()         { *m = QueryListRecipesByCookbookResponse{} }
func (m *QueryListRecipesByCookbookResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListRecipesByCookbookResponse) ProtoMessage()    {}
func (*QueryListRecipesByCookbookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{30}
}
func (m *QueryListRecipesByCookbookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListRecipesByCookbookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListRecipesByCookbookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListRecipesByCookbookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListRecipesByCookbookResponse.Merge(m, src)
}
func (m *QueryListRecipesByCookbookResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListRecipesByCookbookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListRecipesByCookbookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListRecipesByCookbookResponse proto.InternalMessageInfo

func (m *QueryListRecipesByCookbookResponse) GetRecipes() []Recipe {
	if m != nil {
		return m.Recipes
	}
	return nil
}

func (m *QueryListRecipesByCookbookResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetItemRequest struct {
	CookbookID string `protobuf:"bytes,1,opt,name=CookbookID,proto3" json:"CookbookID,omitempty"`
	ID         string `protobuf:"bytes,3,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *QueryGetItemRequest) Reset()         { *m = QueryGetItemRequest{} }
func (m *QueryGetItemRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetItemRequest) ProtoMessage()    {}
func (*QueryGetItemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{31}
}
func (m *QueryGetItemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetItemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetItemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetItemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetItemRequest.Merge(m, src)
}
func (m *QueryGetItemRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetItemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetItemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetItemRequest proto.InternalMessageInfo

func (m *QueryGetItemRequest) GetCookbookID() string {
	if m != nil {
		return m.CookbookID
	}
	return ""
}

func (m *QueryGetItemRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type QueryGetItemResponse struct {
	Item Item `protobuf:"bytes,1,opt,name=Item,proto3" json:"Item"`
}

func (m *QueryGetItemResponse) Reset()         { *m = QueryGetItemResponse{} }
func (m *QueryGetItemResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetItemResponse) ProtoMessage()    {}
func (*QueryGetItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{32}
}
func (m *QueryGetItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetItemResponse.Merge(m, src)
}
func (m *QueryGetItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetItemResponse proto.InternalMessageInfo

func (m *QueryGetItemResponse) GetItem() Item {
	if m != nil {
		return m.Item
	}
	return Item{}
}

type QueryGetRecipeRequest struct {
	CookbookID string `protobuf:"bytes,1,opt,name=CookbookID,proto3" json:"CookbookID,omitempty"`
	ID         string `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *QueryGetRecipeRequest) Reset()         { *m = QueryGetRecipeRequest{} }
func (m *QueryGetRecipeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRecipeRequest) ProtoMessage()    {}
func (*QueryGetRecipeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{33}
}
func (m *QueryGetRecipeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRecipeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRecipeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRecipeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRecipeRequest.Merge(m, src)
}
func (m *QueryGetRecipeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRecipeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRecipeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRecipeRequest proto.InternalMessageInfo

func (m *QueryGetRecipeRequest) GetCookbookID() string {
	if m != nil {
		return m.CookbookID
	}
	return ""
}

func (m *QueryGetRecipeRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type QueryGetRecipeResponse struct {
	Recipe Recipe `protobuf:"bytes,1,opt,name=Recipe,proto3" json:"Recipe"`
}

func (m *QueryGetRecipeResponse) Reset()         { *m = QueryGetRecipeResponse{} }
func (m *QueryGetRecipeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRecipeResponse) ProtoMessage()    {}
func (*QueryGetRecipeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{34}
}
func (m *QueryGetRecipeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRecipeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRecipeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRecipeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRecipeResponse.Merge(m, src)
}
func (m *QueryGetRecipeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRecipeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRecipeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRecipeResponse proto.InternalMessageInfo

func (m *QueryGetRecipeResponse) GetRecipe() Recipe {
	if m != nil {
		return m.Recipe
	}
	return Recipe{}
}

type QueryListCookbooksByCreatorRequest struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListCookbooksByCreatorRequest) Reset()         { *m = QueryListCookbooksByCreatorRequest{} }
func (m *QueryListCookbooksByCreatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListCookbooksByCreatorRequest) ProtoMessage()    {}
func (*QueryListCookbooksByCreatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{35}
}
func (m *QueryListCookbooksByCreatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListCookbooksByCreatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListCookbooksByCreatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListCookbooksByCreatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListCookbooksByCreatorRequest.Merge(m, src)
}
func (m *QueryListCookbooksByCreatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListCookbooksByCreatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListCookbooksByCreatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListCookbooksByCreatorRequest proto.InternalMessageInfo

func (m *QueryListCookbooksByCreatorRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *QueryListCookbooksByCreatorRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListCookbooksByCreatorResponse struct {
	Cookbooks []Cookbook `protobuf:"bytes,1,rep,name=Cookbooks,proto3" json:"Cookbooks"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListCookbooksByCreatorResponse) Reset()         { *m = QueryListCookbooksByCreatorResponse{} }
func (m *QueryListCookbooksByCreatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListCookbooksByCreatorResponse) ProtoMessage()    {}
func (*QueryListCookbooksByCreatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{36}
}
func (m *QueryListCookbooksByCreatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListCookbooksByCreatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListCookbooksByCreatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListCookbooksByCreatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListCookbooksByCreatorResponse.Merge(m, src)
}
func (m *QueryListCookbooksByCreatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListCookbooksByCreatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListCookbooksByCreatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListCookbooksByCreatorResponse proto.InternalMessageInfo

func (m *QueryListCookbooksByCreatorResponse) GetCookbooks() []Cookbook {
	if m != nil {
		return m.Cookbooks
	}
	return nil
}

func (m *QueryListCookbooksByCreatorResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCookbookRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *QueryGetCookbookRequest) Reset()         { *m = QueryGetCookbookRequest{} }
func (m *QueryGetCookbookRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCookbookRequest) ProtoMessage()    {}
func (*QueryGetCookbookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{37}
}
func (m *QueryGetCookbookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCookbookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCookbookRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCookbookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCookbookRequest.Merge(m, src)
}
func (m *QueryGetCookbookRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCookbookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCookbookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCookbookRequest proto.InternalMessageInfo

func (m *QueryGetCookbookRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type QueryGetCookbookResponse struct {
	Cookbook Cookbook `protobuf:"bytes,1,opt,name=Cookbook,proto3" json:"Cookbook"`
}

func (m *QueryGetCookbookResponse) Reset()         { *m = QueryGetCookbookResponse{} }
func (m *QueryGetCookbookResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCookbookResponse) ProtoMessage()    {}
func (*QueryGetCookbookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{38}
}
func (m *QueryGetCookbookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCookbookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCookbookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCookbookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCookbookResponse.Merge(m, src)
}
func (m *QueryGetCookbookResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCookbookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCookbookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCookbookResponse proto.InternalMessageInfo

func (m *QueryGetCookbookResponse) GetCookbook() Cookbook {
	if m != nil {
		return m.Cookbook
	}
	return Cookbook{}
}

func init() {
	proto.RegisterType((*QueryListTradesByCreatorRequest)(nil), "Pylonstech.pylons.pylons.QueryListTradesByCreatorRequest")
	proto.RegisterType((*QueryListTradesByCreatorResponse)(nil), "Pylonstech.pylons.pylons.QueryListTradesByCreatorResponse")
	proto.RegisterType((*QueryGetRecipeHistoryRequest)(nil), "Pylonstech.pylons.pylons.QueryGetRecipeHistoryRequest")
	proto.RegisterType((*QueryGetRecipeHistoryResponse)(nil), "Pylonstech.pylons.pylons.QueryGetRecipeHistoryResponse")
	proto.RegisterType((*RecipeHistory)(nil), "Pylonstech.pylons.pylons.RecipeHistory")
	proto.RegisterType((*QueryGetRedeemInfoRequest)(nil), "Pylonstech.pylons.pylons.QueryGetRedeemInfoRequest")
	proto.RegisterType((*QueryGetRedeemInfoResponse)(nil), "Pylonstech.pylons.pylons.QueryGetRedeemInfoResponse")
	proto.RegisterType((*QueryAllRedeemInfoRequest)(nil), "Pylonstech.pylons.pylons.QueryAllRedeemInfoRequest")
	proto.RegisterType((*QueryAllRedeemInfoResponse)(nil), "Pylonstech.pylons.pylons.QueryAllRedeemInfoResponse")
	proto.RegisterType((*QueryGetPaymentInfoRequest)(nil), "Pylonstech.pylons.pylons.QueryGetPaymentInfoRequest")
	proto.RegisterType((*QueryGetPaymentInfoResponse)(nil), "Pylonstech.pylons.pylons.QueryGetPaymentInfoResponse")
	proto.RegisterType((*QueryAllPaymentInfoRequest)(nil), "Pylonstech.pylons.pylons.QueryAllPaymentInfoRequest")
	proto.RegisterType((*QueryAllPaymentInfoResponse)(nil), "Pylonstech.pylons.pylons.QueryAllPaymentInfoResponse")
	proto.RegisterType((*QueryGetUsernameByAddressRequest)(nil), "Pylonstech.pylons.pylons.QueryGetUsernameByAddressRequest")
	proto.RegisterType((*QueryGetAddressByUsernameRequest)(nil), "Pylonstech.pylons.pylons.QueryGetAddressByUsernameRequest")
	proto.RegisterType((*QueryGetUsernameByAddressResponse)(nil), "Pylonstech.pylons.pylons.QueryGetUsernameByAddressResponse")
	proto.RegisterType((*QueryGetAddressByUsernameResponse)(nil), "Pylonstech.pylons.pylons.QueryGetAddressByUsernameResponse")
	proto.RegisterType((*QueryGetTradeRequest)(nil), "Pylonstech.pylons.pylons.QueryGetTradeRequest")
	proto.RegisterType((*QueryGetTradeResponse)(nil), "Pylonstech.pylons.pylons.QueryGetTradeResponse")
	proto.RegisterType((*QueryListItemByOwnerRequest)(nil), "Pylonstech.pylons.pylons.QueryListItemByOwnerRequest")
	proto.RegisterType((*QueryListItemByOwnerResponse)(nil), "Pylonstech.pylons.pylons.QueryListItemByOwnerResponse")
	proto.RegisterType((*QueryGetGoogleInAppPurchaseOrderRequest)(nil), "Pylonstech.pylons.pylons.QueryGetGoogleInAppPurchaseOrderRequest")
	proto.RegisterType((*QueryGetGoogleInAppPurchaseOrderResponse)(nil), "Pylonstech.pylons.pylons.QueryGetGoogleInAppPurchaseOrderResponse")
	proto.RegisterType((*QueryListExecutionsByItemRequest)(nil), "Pylonstech.pylons.pylons.QueryListExecutionsByItemRequest")
	proto.RegisterType((*QueryListExecutionsByItemResponse)(nil), "Pylonstech.pylons.pylons.QueryListExecutionsByItemResponse")
	proto.RegisterType((*QueryListExecutionsByRecipeRequest)(nil), "Pylonstech.pylons.pylons.QueryListExecutionsByRecipeRequest")
	proto.RegisterType((*QueryListExecutionsByRecipeResponse)(nil), "Pylonstech.pylons.pylons.QueryListExecutionsByRecipeResponse")
	proto.RegisterType((*QueryGetExecutionRequest)(nil), "Pylonstech.pylons.pylons.QueryGetExecutionRequest")
	proto.RegisterType((*QueryGetExecutionResponse)(nil), "Pylonstech.pylons.pylons.QueryGetExecutionResponse")
	proto.RegisterType((*QueryListRecipesByCookbookRequest)(nil), "Pylonstech.pylons.pylons.QueryListRecipesByCookbookRequest")
	proto.RegisterType((*QueryListRecipesByCookbookResponse)(nil), "Pylonstech.pylons.pylons.QueryListRecipesByCookbookResponse")
	proto.RegisterType((*QueryGetItemRequest)(nil), "Pylonstech.pylons.pylons.QueryGetItemRequest")
	proto.RegisterType((*QueryGetItemResponse)(nil), "Pylonstech.pylons.pylons.QueryGetItemResponse")
	proto.RegisterType((*QueryGetRecipeRequest)(nil), "Pylonstech.pylons.pylons.QueryGetRecipeRequest")
	proto.RegisterType((*QueryGetRecipeResponse)(nil), "Pylonstech.pylons.pylons.QueryGetRecipeResponse")
	proto.RegisterType((*QueryListCookbooksByCreatorRequest)(nil), "Pylonstech.pylons.pylons.QueryListCookbooksByCreatorRequest")
	proto.RegisterType((*QueryListCookbooksByCreatorResponse)(nil), "Pylonstech.pylons.pylons.QueryListCookbooksByCreatorResponse")
	proto.RegisterType((*QueryGetCookbookRequest)(nil), "Pylonstech.pylons.pylons.QueryGetCookbookRequest")
	proto.RegisterType((*QueryGetCookbookResponse)(nil), "Pylonstech.pylons.pylons.QueryGetCookbookResponse")
}

func init() { proto.RegisterFile("pylons/query.proto", fileDescriptor_dbe4a0dc0744f938) }

var fileDescriptor_dbe4a0dc0744f938 = []byte{
	// 1935 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0xcd, 0x6f, 0x23, 0x49,
	0x15, 0x4f, 0xd9, 0xf9, 0xac, 0x68, 0x3f, 0x52, 0xf9, 0x98, 0x9e, 0x9e, 0xc4, 0xf1, 0x76, 0x66,
	0x67, 0xb2, 0xbb, 0x8c, 0x9b, 0x38, 0xcc, 0xc2, 0x66, 0x67, 0x57, 0xd8, 0x49, 0x26, 0x04, 0xb1,
	0x3b, 0xc1, 0x04, 0x81, 0x96, 0x43, 0xe8, 0xd8, 0xb5, 0x8e, 0x19, 0xbb, 0xdb, 0xeb, 0xee, 0x2c,
	0x6b, 0x2c, 0x5f, 0x16, 0x84, 0x90, 0x10, 0xd2, 0x48, 0x03, 0xe2, 0xc8, 0x08, 0x71, 0xe4, 0x43,
	0x20, 0xbe, 0xef, 0xa0, 0x39, 0x8e, 0xe0, 0xc2, 0x09, 0xa1, 0x09, 0x07, 0xfe, 0x0c, 0xd4, 0x55,
	0xaf, 0xba, 0xab, 0xdb, 0xdd, 0xe9, 0xb6, 0xc7, 0xdc, 0x38, 0xb9, 0xeb, 0x55, 0xbd, 0x57, 0xbf,
	0xf7, 0x7b, 0xf5, 0xf1, 0xea, 0x19, 0x93, 0x76, 0xb7, 0x69, 0x99, 0xb6, 0xfe, 0xc1, 0x39, 0xed,
	0x74, 0x0b, 0xed, 0x8e, 0xe5, 0x58, 0x44, 0x39, 0x62, 0x32, 0x87, 0x56, 0xcf, 0x0a, 0xbc, 0x1b,
	0x7e, 0xd4, 0xd5, 0xba, 0x65, 0xd5, 0x9b, 0x54, 0x37, 0xda, 0x0d, 0xdd, 0x30, 0x4d, 0xcb, 0x31,
	0x9c, 0x06, 0xeb, 0x76, 0xf5, 0xd4, 0x57, 0xab, 0x96, 0xdd, 0xb2, 0x6c, 0xfd, 0xd4, 0xb0, 0x29,
	0x37, 0xa8, 0x7f, 0xb8, 0x75, 0x4a, 0x1d, 0x63, 0x4b, 0x6f, 0x1b, 0xf5, 0x86, 0xc9, 0x06, 0xc3,
	0xd8, 0xa5, 0xba, 0x55, 0xb7, 0xd8, 0xa7, 0xee, 0x7e, 0x81, 0x54, 0x01, 0x34, 0x1d, 0x5a, 0xa3,
	0xb4, 0x75, 0xd2, 0x30, 0xdf, 0x17, 0x3d, 0x57, 0xa1, 0xa7, 0x6d, 0x74, 0x5b, 0xd4, 0x74, 0xe4,
	0xae, 0x65, 0xe8, 0x32, 0xaa, 0x55, 0xeb, 0xdc, 0x74, 0x04, 0x1a, 0xe1, 0x99, 0xd3, 0x31, 0x6a,
	0x14, 0x64, 0x6b, 0x20, 0xe3, 0x6e, 0x9c, 0x34, 0x8c, 0xf6, 0x89, 0xd5, 0xa9, 0xd1, 0x0e, 0x74,
	0xaf, 0x40, 0x37, 0xfd, 0x88, 0x56, 0xcf, 0x25, 0xb0, 0x0b, 0x20, 0x6f, 0x38, 0xb4, 0x05, 0xa2,
	0x45, 0x0f, 0x69, 0xb5, 0xd1, 0xa6, 0x21, 0x24, 0x55, 0xcb, 0xba, 0x7f, 0x6a, 0x59, 0xf7, 0xb9,
	0x58, 0xfb, 0x36, 0xc2, 0xeb, 0x5f, 0x74, 0xe9, 0xf8, 0x42, 0xc3, 0x76, 0x8e, 0x5d, 0x38, 0x76,
	0xb9, 0xbb, 0xdb, 0xa1, 0x86, 0x63, 0x75, 0x2a, 0xf4, 0x83, 0x73, 0x6a, 0x3b, 0x44, 0xc1, 0x33,
	0x55, 0x2e, 0x51, 0x50, 0x1e, 0x6d, 0xce, 0x55, 0x44, 0x93, 0xdc, 0xc5, 0xd8, 0x67, 0x4f, 0xc9,
	0xe4, 0xd1, 0xe6, 0x7c, 0xf1, 0x46, 0x81, 0x53, 0x5d, 0x70, 0xa9, 0x2e, 0xf0, 0xd8, 0x01, 0xd5,
	0x85, 0x23, 0xa3, 0x4e, 0xc1, 0x6a, 0x45, 0xd2, 0xd4, 0x7e, 0x8b, 0x70, 0x3e, 0x1e, 0x85, 0xdd,
	0xb6, 0x4c, 0x9b, 0x92, 0xb7, 0xf0, 0x34, 0xef, 0x52, 0x50, 0x3e, 0xbb, 0x39, 0x5f, 0x5c, 0x2f,
	0xc4, 0xad, 0x85, 0x02, 0x1b, 0x57, 0x9e, 0x7c, 0xfc, 0xcf, 0xf5, 0x89, 0x0a, 0x28, 0x91, 0x83,
	0x08, 0xac, 0x37, 0x13, 0xb1, 0xf2, 0xb9, 0x65, 0xb0, 0x3b, 0xb3, 0xdf, 0x7b, 0xb4, 0x3e, 0xf1,
	0x9f, 0x47, 0xeb, 0x13, 0xda, 0x7b, 0x78, 0x95, 0xa1, 0x3e, 0xa0, 0x4e, 0x85, 0x71, 0xfd, 0xb9,
	0x86, 0xed, 0x58, 0x9d, 0xae, 0x20, 0x2e, 0x87, 0xb1, 0xa0, 0xfb, 0x70, 0x0f, 0xb8, 0x93, 0x24,
	0x44, 0xc5, 0xb3, 0x3c, 0x46, 0x87, 0x7b, 0x0c, 0xd0, 0x5c, 0xc5, 0x6b, 0x6b, 0xa7, 0x78, 0x2d,
	0xc6, 0x36, 0xd0, 0x51, 0xc2, 0x33, 0x20, 0x02, 0x3e, 0x6e, 0xc6, 0xf3, 0x11, 0xb4, 0x20, 0xf4,
	0xb4, 0x0b, 0x84, 0x9f, 0x0b, 0x74, 0x91, 0x15, 0x3c, 0x7d, 0xe8, 0xd0, 0x96, 0x87, 0x16, 0x5a,
	0xae, 0x27, 0xbb, 0xbe, 0x27, 0x1c, 0xab, 0x24, 0x71, 0x3d, 0xa9, 0x08, 0x4f, 0xb2, 0xdc, 0x13,
	0xd1, 0x76, 0x6d, 0x7e, 0x89, 0x9a, 0x35, 0xda, 0x51, 0x26, 0xb9, 0x4d, 0xde, 0x72, 0x6d, 0xf2,
	0xaf, 0x77, 0x8d, 0x16, 0x55, 0xa6, 0xb8, 0x4d, 0x5f, 0x22, 0x6c, 0xd2, 0x0f, 0x69, 0x47, 0x99,
	0xf6, 0x6d, 0xba, 0x6d, 0xd7, 0x66, 0xa9, 0xe5, 0xee, 0x28, 0x65, 0x86, 0xdb, 0xe4, 0x2d, 0x42,
	0xf0, 0xe4, 0x71, 0xa3, 0x45, 0x95, 0xd9, 0x3c, 0xda, 0xcc, 0x56, 0xd8, 0xb7, 0xf6, 0x1a, 0xbe,
	0xea, 0x33, 0xe9, 0xee, 0xdd, 0x43, 0xf3, 0x7d, 0x4b, 0x84, 0xe8, 0x79, 0x9c, 0xf1, 0x9c, 0xcd,
	0x1c, 0xee, 0x69, 0x67, 0x58, 0x8d, 0x1a, 0x0c, 0x9c, 0x7f, 0x1e, 0x63, 0x5f, 0xca, 0xb4, 0xe6,
	0x8b, 0xd7, 0x2f, 0xa3, 0x5d, 0x8c, 0x85, 0xb5, 0x28, 0x69, 0x6b, 0x55, 0x80, 0x55, 0x6a, 0x36,
	0x07, 0x61, 0x05, 0x37, 0x16, 0x1a, 0x79, 0x63, 0xfd, 0x1a, 0x81, 0x3f, 0xa1, 0x59, 0x62, 0xfc,
	0xc9, 0x8e, 0xee, 0xcf, 0xd8, 0xf6, 0x97, 0x76, 0xc7, 0x0f, 0xc1, 0x11, 0x3f, 0x51, 0x65, 0x66,
	0x72, 0x18, 0xb7, 0xcf, 0x3b, 0xd5, 0x33, 0xc3, 0xa6, 0xfe, 0x9e, 0xf2, 0x25, 0x5a, 0x13, 0x5f,
	0x8b, 0xd4, 0x06, 0x8f, 0xdf, 0xc1, 0xf3, 0x92, 0x18, 0x98, 0x7d, 0x39, 0xde, 0x65, 0x69, 0x30,
	0xf8, 0x2c, 0xeb, 0x6b, 0x35, 0x9f, 0xde, 0x08, 0xac, 0xe3, 0x8a, 0xe2, 0xef, 0x10, 0x38, 0x15,
	0x9e, 0x26, 0xce, 0xa9, 0xec, 0xb3, 0x38, 0x35, 0xce, 0x48, 0xe6, 0x45, 0x2c, 0xbe, 0x6c, 0xd3,
	0x8e, 0x69, 0xb4, 0x68, 0xb9, 0x5b, 0xaa, 0xd5, 0x3a, 0xd4, 0xb6, 0xa5, 0xcb, 0xc5, 0xe0, 0x12,
	0x71, 0xb9, 0x40, 0x53, 0x7b, 0xdb, 0xd7, 0x06, 0x9d, 0x72, 0x57, 0x98, 0x11, 0xda, 0x2a, 0x9e,
	0x3d, 0x07, 0x11, 0xa8, 0x7b, 0x6d, 0xad, 0x81, 0x5f, 0xba, 0x64, 0x76, 0xa0, 0x6e, 0x2f, 0x64,
	0x60, 0xbe, 0xa8, 0xc5, 0xf3, 0xe6, 0x99, 0xe1, 0xa4, 0xf9, 0x53, 0x7d, 0xc3, 0x9f, 0x2a, 0x02,
	0x2a, 0x4c, 0xb5, 0x1f, 0xf4, 0xf4, 0xd2, 0x08, 0x95, 0x78, 0xbe, 0xe0, 0x1a, 0x83, 0xc9, 0x3c,
	0x5a, 0x6e, 0xe0, 0x25, 0x31, 0x17, 0xbb, 0xd9, 0x06, 0x4f, 0xb2, 0x49, 0x76, 0x92, 0x1d, 0xe3,
	0xe5, 0xd0, 0x38, 0xc0, 0xf1, 0x26, 0x9e, 0x62, 0x02, 0x40, 0x91, 0xf2, 0x1a, 0xe5, 0x3a, 0x5a,
	0x0f, 0x56, 0xa2, 0x7b, 0x51, 0xbb, 0x77, 0x43, 0xb9, 0x7b, 0xef, 0x9b, 0x26, 0xf5, 0x52, 0x85,
	0x25, 0x3c, 0x65, 0xb9, 0x6d, 0x08, 0x06, 0x6f, 0x84, 0xf6, 0x41, 0x76, 0xe4, 0x7d, 0xf0, 0x0b,
	0x04, 0x17, 0xee, 0xc0, 0xec, 0xe0, 0xda, 0x0e, 0x9e, 0x72, 0xc5, 0x22, 0x43, 0xc8, 0xc5, 0xbb,
	0xc6, 0xb4, 0xc1, 0x33, 0xa6, 0xf2, 0xbf, 0xc8, 0x0f, 0xee, 0xe1, 0x9b, 0x22, 0x04, 0x07, 0x2c,
	0xab, 0x3b, 0x34, 0x4b, 0xed, 0xf6, 0x11, 0x1c, 0x56, 0xf7, 0xdc, 0xec, 0x4e, 0x10, 0x77, 0x1d,
	0x3f, 0x27, 0xe4, 0xc7, 0xd6, 0x7d, 0x6a, 0x02, 0x81, 0x41, 0xa1, 0xf6, 0x2d, 0xbc, 0x99, 0x6c,
	0x10, 0xb8, 0x78, 0x17, 0x4f, 0x31, 0x01, 0x84, 0xb9, 0x18, 0xcf, 0x45, 0x9c, 0x29, 0xc1, 0x0f,
	0x6b, 0x68, 0x3f, 0x97, 0x73, 0xb4, 0x7d, 0x91, 0x85, 0xda, 0xe5, 0xae, 0x4b, 0x9f, 0x74, 0x3a,
	0xef, 0x0e, 0x64, 0x3c, 0x52, 0x9e, 0xe0, 0xe7, 0x17, 0x99, 0x40, 0x7e, 0x31, 0xa6, 0x15, 0x22,
	0x71, 0xff, 0xd3, 0x0c, 0xec, 0xc9, 0x68, 0xb8, 0x40, 0xd2, 0xd7, 0xf0, 0xe2, 0xae, 0xd5, 0x6a,
	0x37, 0xa9, 0x43, 0x6b, 0xfe, 0x20, 0x58, 0x3e, 0x1b, 0xf1, 0x94, 0x79, 0x63, 0x81, 0xa3, 0x28,
	0x2b, 0xe4, 0x2b, 0x78, 0xe1, 0x88, 0x9a, 0xb5, 0x86, 0x59, 0x97, 0x4c, 0x67, 0x86, 0x35, 0x3d,
	0x68, 0x23, 0xb4, 0x54, 0xb3, 0xa3, 0x1f, 0xd0, 0xbf, 0x41, 0x58, 0x8b, 0x24, 0x89, 0x27, 0x6f,
	0x69, 0xa3, 0x2a, 0x67, 0x7f, 0x99, 0x50, 0xf6, 0x37, 0xfe, 0xc8, 0xfe, 0x2c, 0x83, 0x37, 0x2e,
	0x05, 0xfd, 0xff, 0xd8, 0xba, 0xb1, 0x7d, 0x15, 0x2b, 0xe2, 0xac, 0xf0, 0xcc, 0xc7, 0x65, 0xbd,
	0x1f, 0x23, 0x3f, 0x47, 0x96, 0x06, 0x03, 0x91, 0x07, 0x78, 0xce, 0x13, 0xc2, 0x69, 0x32, 0x84,
	0x8f, 0xbe, 0x2e, 0x59, 0xc5, 0x73, 0x1e, 0x97, 0x6c, 0xa1, 0xcc, 0x56, 0x7c, 0x81, 0xf6, 0x7d,
	0x24, 0xed, 0x58, 0x1e, 0x4b, 0xf7, 0x15, 0x08, 0xcb, 0x2c, 0xed, 0x5a, 0x1c, 0xd7, 0x93, 0xf4,
	0x57, 0xf2, 0xd6, 0x88, 0x40, 0x03, 0xdc, 0x7c, 0x16, 0xcf, 0x40, 0x27, 0x2c, 0xac, 0x7c, 0xd2,
	0x2b, 0x4c, 0xdc, 0xe7, 0xa0, 0x36, 0xbe, 0x6c, 0x6b, 0x1f, 0x2f, 0x8a, 0x18, 0x0e, 0x73, 0x24,
	0xf3, 0xb5, 0x90, 0xf5, 0xd6, 0xc2, 0x91, 0x9f, 0x5f, 0x04, 0x8e, 0xca, 0xcf, 0xe0, 0x49, 0xb7,
	0x0d, 0x0b, 0x20, 0xdd, 0xd5, 0xca, 0x34, 0xb4, 0x03, 0x3f, 0x13, 0x19, 0xee, 0x5c, 0xe1, 0xd0,
	0x32, 0x1e, 0xb4, 0xaf, 0xe2, 0x95, 0xb0, 0x21, 0x00, 0xf7, 0x36, 0x9e, 0xe6, 0x12, 0x80, 0x97,
	0x36, 0x0a, 0xa0, 0xa5, 0x7d, 0x57, 0x8e, 0xb6, 0x40, 0x30, 0x7a, 0x25, 0x64, 0xf4, 0x14, 0xe7,
	0xf7, 0x48, 0x3a, 0xdc, 0xa2, 0x80, 0x80, 0xc3, 0x77, 0xdd, 0xad, 0x04, 0xbd, 0xb0, 0xf2, 0x2e,
	0x49, 0x5c, 0xc5, 0x50, 0xb1, 0x25, 0x3d, 0xd5, 0xf1, 0x1d, 0x37, 0xaf, 0xe0, 0x2b, 0x22, 0x36,
	0xe1, 0x2d, 0x1b, 0x3e, 0x6d, 0xbe, 0xee, 0x9f, 0x4c, 0x03, 0xfb, 0x69, 0x0f, 0xcf, 0x0a, 0x59,
	0x72, 0x3e, 0x1e, 0x72, 0xcb, 0xd3, 0x2c, 0xfe, 0xe5, 0x2a, 0x9e, 0x62, 0x53, 0x90, 0x5f, 0x22,
	0xbc, 0x18, 0x51, 0x54, 0x22, 0x6f, 0xc4, 0x5b, 0x4d, 0x28, 0x87, 0xa9, 0x3b, 0xa3, 0xa8, 0x72,
	0xf7, 0xb4, 0xfc, 0xc7, 0x7f, 0xff, 0xf7, 0xc3, 0x8c, 0x4a, 0x14, 0x5d, 0xae, 0x00, 0xda, 0x7a,
	0x0f, 0xd6, 0x51, 0x9f, 0xfc, 0x0d, 0xe1, 0x17, 0xc3, 0x35, 0x1f, 0xf2, 0x7a, 0xc2, 0x94, 0x31,
	0x05, 0x28, 0xf5, 0xd3, 0x43, 0xeb, 0x01, 0xce, 0x77, 0x18, 0xce, 0x03, 0xb2, 0xaf, 0x73, 0x03,
	0xb7, 0x5c, 0x0b, 0x02, 0xb3, 0x28, 0x54, 0x52, 0xe7, 0x84, 0x97, 0xab, 0x4e, 0xce, 0xb8, 0xba,
	0xde, 0xf3, 0x8b, 0x5b, 0x7d, 0xbd, 0x27, 0x6a, 0x59, 0x7d, 0xf2, 0x43, 0x24, 0x17, 0x1a, 0xc8,
	0x76, 0x1a, 0x58, 0xa1, 0x92, 0x88, 0xfa, 0xa9, 0xe1, 0x94, 0xc0, 0x91, 0x6b, 0xcc, 0x91, 0x65,
	0xb2, 0xa8, 0x07, 0xca, 0xb7, 0x7a, 0xcf, 0x85, 0xf5, 0x90, 0xd5, 0xbf, 0x84, 0x4e, 0xa9, 0xd9,
	0x4c, 0x44, 0x16, 0x55, 0xac, 0x49, 0x44, 0x16, 0x59, 0x7b, 0xd1, 0xae, 0x30, 0x64, 0x0b, 0xe4,
	0x85, 0x20, 0x32, 0x9b, 0x3c, 0x42, 0x81, 0xe7, 0x3c, 0x49, 0xe1, 0xf8, 0x60, 0xed, 0x41, 0xbd,
	0x3d, 0xa4, 0x16, 0xa0, 0xba, 0xce, 0x50, 0xe5, 0xc8, 0xaa, 0x1e, 0x2c, 0x6a, 0xeb, 0x3d, 0xbf,
	0xc6, 0xd2, 0x27, 0x3f, 0x46, 0xf8, 0x79, 0x49, 0xdb, 0x65, 0x2e, 0x05, 0x09, 0x23, 0xa0, 0x8c,
	0x2e, 0x78, 0x68, 0x0a, 0x43, 0x49, 0xc8, 0x8b, 0x21, 0x94, 0x36, 0xf9, 0x03, 0xc2, 0x0b, 0x03,
	0xaf, 0x7d, 0xb2, 0x93, 0x4c, 0x46, 0x5c, 0x81, 0x42, 0x7d, 0x73, 0x24, 0x5d, 0x00, 0xfa, 0x0a,
	0x03, 0xba, 0x41, 0x5e, 0xd2, 0x83, 0x7f, 0x04, 0xe8, 0xf0, 0x9a, 0xd7, 0x7b, 0xf0, 0xd1, 0x27,
	0x7f, 0x42, 0x78, 0x61, 0xa0, 0x78, 0x90, 0x06, 0x79, 0x5c, 0x71, 0x24, 0x0d, 0xf2, 0xd8, 0x6a,
	0x85, 0xf6, 0x1a, 0x43, 0xfe, 0x32, 0xd9, 0x08, 0x23, 0x17, 0x45, 0x0f, 0xbd, 0x27, 0xbe, 0xfa,
	0xe4, 0x3b, 0x08, 0x6a, 0x0a, 0xa4, 0x90, 0x3c, 0xa7, 0x5c, 0xb5, 0x50, 0xf5, 0xd4, 0xe3, 0x01,
	0x97, 0xca, 0x70, 0x2d, 0x11, 0x12, 0x38, 0x41, 0xf9, 0x7e, 0xfe, 0x09, 0xc2, 0x2f, 0x84, 0x4a,
	0x03, 0xe4, 0x76, 0x8a, 0xd3, 0x7a, 0xb0, 0x90, 0xa1, 0xbe, 0x3e, 0xac, 0x1a, 0xc0, 0x5b, 0x63,
	0xf0, 0xae, 0x90, 0x65, 0x5d, 0xfa, 0x5f, 0xc6, 0xd6, 0x7b, 0xac, 0x10, 0xd2, 0x27, 0x7f, 0x45,
	0x58, 0x89, 0x7b, 0x6e, 0x93, 0x52, 0x32, 0x17, 0x09, 0x65, 0x04, 0xb5, 0xfc, 0x2c, 0x26, 0xc0,
	0x85, 0x0d, 0xe6, 0xc2, 0x1a, 0xb9, 0xe6, 0xb9, 0x60, 0xb4, 0xf5, 0x5e, 0xa0, 0x10, 0xc1, 0x1c,
	0x59, 0x8a, 0x7a, 0x59, 0x93, 0x34, 0xb7, 0x63, 0x4c, 0xf5, 0x20, 0x71, 0xc1, 0x5e, 0xf6, 0x94,
	0xd7, 0x6e, 0x33, 0xd8, 0x3a, 0xb9, 0xa5, 0x87, 0xff, 0x29, 0xe3, 0x41, 0xd0, 0x7b, 0xbb, 0xf2,
	0xe5, 0xc4, 0x0b, 0x0f, 0x7d, 0xf2, 0x04, 0xe1, 0x95, 0xe8, 0x87, 0x24, 0xb9, 0x33, 0x24, 0x9c,
	0x40, 0x72, 0xab, 0xbe, 0x35, 0xa2, 0x36, 0xb8, 0xf3, 0x06, 0x73, 0x67, 0x9b, 0x6c, 0x45, 0xb8,
	0xc3, 0x2f, 0xd6, 0x90, 0x43, 0x15, 0xf9, 0xb6, 0x95, 0x1e, 0x5d, 0xc5, 0xe4, 0x25, 0x11, 0x7e,
	0x1f, 0xaa, 0xdb, 0x43, 0xe9, 0x00, 0xe2, 0x1c, 0x43, 0xac, 0x90, 0x95, 0x01, 0xc4, 0x7c, 0x77,
	0xfe, 0x11, 0xe1, 0xe5, 0xc8, 0xc7, 0x14, 0x49, 0x13, 0xf7, 0xb8, 0x07, 0xa1, 0x7a, 0x67, 0x34,
	0xe5, 0xb8, 0xfb, 0x8e, 0x73, 0x6b, 0x07, 0xc8, 0x25, 0x3f, 0x40, 0xfc, 0xf1, 0x43, 0x6e, 0x25,
	0x13, 0x23, 0x2f, 0xe8, 0x42, 0xda, 0xe1, 0x80, 0xe6, 0x06, 0x43, 0x93, 0x27, 0x39, 0xf9, 0xf4,
	0x08, 0x2f, 0xdc, 0xbd, 0x3e, 0xf9, 0x11, 0x12, 0xef, 0x1d, 0xa2, 0xa7, 0x4d, 0xf1, 0x04, 0xa6,
	0x4f, 0xa6, 0x57, 0x00, 0x54, 0x9b, 0x0c, 0x95, 0x46, 0xf2, 0x41, 0x8e, 0x22, 0x70, 0xfd, 0x19,
	0x36, 0xd3, 0xe0, 0xc3, 0x25, 0xd5, 0x66, 0x8a, 0x7d, 0x78, 0xa5, 0xda, 0x4c, 0xf1, 0xaf, 0xa5,
	0xc1, 0x23, 0x4d, 0xe4, 0xa9, 0x72, 0xe6, 0xfd, 0x00, 0xf9, 0x6f, 0x0f, 0xb2, 0x95, 0xcc, 0x52,
	0x78, 0x21, 0x16, 0x87, 0x51, 0x89, 0xbb, 0x2e, 0x04, 0x30, 0xc6, 0x67, 0xf9, 0xee, 0xe3, 0xa7,
	0x39, 0xf4, 0xe4, 0x69, 0x0e, 0xfd, 0xeb, 0x69, 0x0e, 0x3d, 0xb8, 0xc8, 0x4d, 0x3c, 0xb9, 0xc8,
	0x4d, 0xfc, 0xe3, 0x22, 0x37, 0xf1, 0xde, 0x27, 0xea, 0x0d, 0xe7, 0xec, 0xfc, 0xb4, 0x50, 0xb5,
	0x5a, 0x51, 0x29, 0xfa, 0x47, 0xde, 0xed, 0xd8, 0x6d, 0x53, 0xfb, 0x74, 0x9a, 0xfd, 0xd9, 0xbf,
	0xfd, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x60, 0x6b, 0x27, 0x4f, 0x52, 0x21, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a list of listTradesByCreator items.
	ListTradesByCreator(ctx context.Context, in *QueryListTradesByCreatorRequest, opts ...grpc.CallOption) (*QueryListTradesByCreatorResponse, error)
	// Queries a list of GetRecipeHistory items.
	GetRecipeHistory(ctx context.Context, in *QueryGetRecipeHistoryRequest, opts ...grpc.CallOption) (*QueryGetRecipeHistoryResponse, error)
	// Queries a redeemInfo by index.
	RedeemInfo(ctx context.Context, in *QueryGetRedeemInfoRequest, opts ...grpc.CallOption) (*QueryGetRedeemInfoResponse, error)
	// Queries a list of redeemInfo items.
	RedeemInfoAll(ctx context.Context, in *QueryAllRedeemInfoRequest, opts ...grpc.CallOption) (*QueryAllRedeemInfoResponse, error)
	// Queries a paymentInfo by index.
	PaymentInfo(ctx context.Context, in *QueryGetPaymentInfoRequest, opts ...grpc.CallOption) (*QueryGetPaymentInfoResponse, error)
	// Queries a list of paymentInfo items.
	PaymentInfoAll(ctx context.Context, in *QueryAllPaymentInfoRequest, opts ...grpc.CallOption) (*QueryAllPaymentInfoResponse, error)
	// Queries a list of getAccountByAddress items.
	UsernameByAddress(ctx context.Context, in *QueryGetUsernameByAddressRequest, opts ...grpc.CallOption) (*QueryGetUsernameByAddressResponse, error)
	// Queries a username by account.
	AddressByUsername(ctx context.Context, in *QueryGetAddressByUsernameRequest, opts ...grpc.CallOption) (*QueryGetAddressByUsernameResponse, error)
	// Queries a trade by id.
	Trade(ctx context.Context, in *QueryGetTradeRequest, opts ...grpc.CallOption) (*QueryGetTradeResponse, error)
	// Queries a list of listItemByOwner items.
	ListItemByOwner(ctx context.Context, in *QueryListItemByOwnerRequest, opts ...grpc.CallOption) (*QueryListItemByOwnerResponse, error)
	// Queries a googleIAPOrder by PurchaseToken.
	GoogleInAppPurchaseOrder(ctx context.Context, in *QueryGetGoogleInAppPurchaseOrderRequest, opts ...grpc.CallOption) (*QueryGetGoogleInAppPurchaseOrderResponse, error)
	// Queries a list of listExecutionsByItem items.
	ListExecutionsByItem(ctx context.Context, in *QueryListExecutionsByItemRequest, opts ...grpc.CallOption) (*QueryListExecutionsByItemResponse, error)
	// Queries a list of listExecutionsByRecipe items.
	ListExecutionsByRecipe(ctx context.Context, in *QueryListExecutionsByRecipeRequest, opts ...grpc.CallOption) (*QueryListExecutionsByRecipeResponse, error)
	// Queries a execution by id.
	Execution(ctx context.Context, in *QueryGetExecutionRequest, opts ...grpc.CallOption) (*QueryGetExecutionResponse, error)
	// Queries a list of listRecipesByCookbook items.
	ListRecipesByCookbook(ctx context.Context, in *QueryListRecipesByCookbookRequest, opts ...grpc.CallOption) (*QueryListRecipesByCookbookResponse, error)
	// Queries a item by ID.
	Item(ctx context.Context, in *QueryGetItemRequest, opts ...grpc.CallOption) (*QueryGetItemResponse, error)
	// Retrieves a recipe by ID.
	Recipe(ctx context.Context, in *QueryGetRecipeRequest, opts ...grpc.CallOption) (*QueryGetRecipeResponse, error)
	// Retrieves the list of cookbooks owned by an address
	ListCookbooksByCreator(ctx context.Context, in *QueryListCookbooksByCreatorRequest, opts ...grpc.CallOption) (*QueryListCookbooksByCreatorResponse, error)
	// Retrieves a cookbook by ID.
	Cookbook(ctx context.Context, in *QueryGetCookbookRequest, opts ...grpc.CallOption) (*QueryGetCookbookResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ListTradesByCreator(ctx context.Context, in *QueryListTradesByCreatorRequest, opts ...grpc.CallOption) (*QueryListTradesByCreatorResponse, error) {
	out := new(QueryListTradesByCreatorResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/ListTradesByCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRecipeHistory(ctx context.Context, in *QueryGetRecipeHistoryRequest, opts ...grpc.CallOption) (*QueryGetRecipeHistoryResponse, error) {
	out := new(QueryGetRecipeHistoryResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/GetRecipeHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RedeemInfo(ctx context.Context, in *QueryGetRedeemInfoRequest, opts ...grpc.CallOption) (*QueryGetRedeemInfoResponse, error) {
	out := new(QueryGetRedeemInfoResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/RedeemInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RedeemInfoAll(ctx context.Context, in *QueryAllRedeemInfoRequest, opts ...grpc.CallOption) (*QueryAllRedeemInfoResponse, error) {
	out := new(QueryAllRedeemInfoResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/RedeemInfoAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PaymentInfo(ctx context.Context, in *QueryGetPaymentInfoRequest, opts ...grpc.CallOption) (*QueryGetPaymentInfoResponse, error) {
	out := new(QueryGetPaymentInfoResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/PaymentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PaymentInfoAll(ctx context.Context, in *QueryAllPaymentInfoRequest, opts ...grpc.CallOption) (*QueryAllPaymentInfoResponse, error) {
	out := new(QueryAllPaymentInfoResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/PaymentInfoAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UsernameByAddress(ctx context.Context, in *QueryGetUsernameByAddressRequest, opts ...grpc.CallOption) (*QueryGetUsernameByAddressResponse, error) {
	out := new(QueryGetUsernameByAddressResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/UsernameByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AddressByUsername(ctx context.Context, in *QueryGetAddressByUsernameRequest, opts ...grpc.CallOption) (*QueryGetAddressByUsernameResponse, error) {
	out := new(QueryGetAddressByUsernameResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/AddressByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Trade(ctx context.Context, in *QueryGetTradeRequest, opts ...grpc.CallOption) (*QueryGetTradeResponse, error) {
	out := new(QueryGetTradeResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/Trade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListItemByOwner(ctx context.Context, in *QueryListItemByOwnerRequest, opts ...grpc.CallOption) (*QueryListItemByOwnerResponse, error) {
	out := new(QueryListItemByOwnerResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/ListItemByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GoogleInAppPurchaseOrder(ctx context.Context, in *QueryGetGoogleInAppPurchaseOrderRequest, opts ...grpc.CallOption) (*QueryGetGoogleInAppPurchaseOrderResponse, error) {
	out := new(QueryGetGoogleInAppPurchaseOrderResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/GoogleInAppPurchaseOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListExecutionsByItem(ctx context.Context, in *QueryListExecutionsByItemRequest, opts ...grpc.CallOption) (*QueryListExecutionsByItemResponse, error) {
	out := new(QueryListExecutionsByItemResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/ListExecutionsByItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListExecutionsByRecipe(ctx context.Context, in *QueryListExecutionsByRecipeRequest, opts ...grpc.CallOption) (*QueryListExecutionsByRecipeResponse, error) {
	out := new(QueryListExecutionsByRecipeResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/ListExecutionsByRecipe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Execution(ctx context.Context, in *QueryGetExecutionRequest, opts ...grpc.CallOption) (*QueryGetExecutionResponse, error) {
	out := new(QueryGetExecutionResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/Execution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListRecipesByCookbook(ctx context.Context, in *QueryListRecipesByCookbookRequest, opts ...grpc.CallOption) (*QueryListRecipesByCookbookResponse, error) {
	out := new(QueryListRecipesByCookbookResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/ListRecipesByCookbook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Item(ctx context.Context, in *QueryGetItemRequest, opts ...grpc.CallOption) (*QueryGetItemResponse, error) {
	out := new(QueryGetItemResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/Item", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Recipe(ctx context.Context, in *QueryGetRecipeRequest, opts ...grpc.CallOption) (*QueryGetRecipeResponse, error) {
	out := new(QueryGetRecipeResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/Recipe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListCookbooksByCreator(ctx context.Context, in *QueryListCookbooksByCreatorRequest, opts ...grpc.CallOption) (*QueryListCookbooksByCreatorResponse, error) {
	out := new(QueryListCookbooksByCreatorResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/ListCookbooksByCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Cookbook(ctx context.Context, in *QueryGetCookbookRequest, opts ...grpc.CallOption) (*QueryGetCookbookResponse, error) {
	out := new(QueryGetCookbookResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/Cookbook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a list of listTradesByCreator items.
	ListTradesByCreator(context.Context, *QueryListTradesByCreatorRequest) (*QueryListTradesByCreatorResponse, error)
	// Queries a list of GetRecipeHistory items.
	GetRecipeHistory(context.Context, *QueryGetRecipeHistoryRequest) (*QueryGetRecipeHistoryResponse, error)
	// Queries a redeemInfo by index.
	RedeemInfo(context.Context, *QueryGetRedeemInfoRequest) (*QueryGetRedeemInfoResponse, error)
	// Queries a list of redeemInfo items.
	RedeemInfoAll(context.Context, *QueryAllRedeemInfoRequest) (*QueryAllRedeemInfoResponse, error)
	// Queries a paymentInfo by index.
	PaymentInfo(context.Context, *QueryGetPaymentInfoRequest) (*QueryGetPaymentInfoResponse, error)
	// Queries a list of paymentInfo items.
	PaymentInfoAll(context.Context, *QueryAllPaymentInfoRequest) (*QueryAllPaymentInfoResponse, error)
	// Queries a list of getAccountByAddress items.
	UsernameByAddress(context.Context, *QueryGetUsernameByAddressRequest) (*QueryGetUsernameByAddressResponse, error)
	// Queries a username by account.
	AddressByUsername(context.Context, *QueryGetAddressByUsernameRequest) (*QueryGetAddressByUsernameResponse, error)
	// Queries a trade by id.
	Trade(context.Context, *QueryGetTradeRequest) (*QueryGetTradeResponse, error)
	// Queries a list of listItemByOwner items.
	ListItemByOwner(context.Context, *QueryListItemByOwnerRequest) (*QueryListItemByOwnerResponse, error)
	// Queries a googleIAPOrder by PurchaseToken.
	GoogleInAppPurchaseOrder(context.Context, *QueryGetGoogleInAppPurchaseOrderRequest) (*QueryGetGoogleInAppPurchaseOrderResponse, error)
	// Queries a list of listExecutionsByItem items.
	ListExecutionsByItem(context.Context, *QueryListExecutionsByItemRequest) (*QueryListExecutionsByItemResponse, error)
	// Queries a list of listExecutionsByRecipe items.
	ListExecutionsByRecipe(context.Context, *QueryListExecutionsByRecipeRequest) (*QueryListExecutionsByRecipeResponse, error)
	// Queries a execution by id.
	Execution(context.Context, *QueryGetExecutionRequest) (*QueryGetExecutionResponse, error)
	// Queries a list of listRecipesByCookbook items.
	ListRecipesByCookbook(context.Context, *QueryListRecipesByCookbookRequest) (*QueryListRecipesByCookbookResponse, error)
	// Queries a item by ID.
	Item(context.Context, *QueryGetItemRequest) (*QueryGetItemResponse, error)
	// Retrieves a recipe by ID.
	Recipe(context.Context, *QueryGetRecipeRequest) (*QueryGetRecipeResponse, error)
	// Retrieves the list of cookbooks owned by an address
	ListCookbooksByCreator(context.Context, *QueryListCookbooksByCreatorRequest) (*QueryListCookbooksByCreatorResponse, error)
	// Retrieves a cookbook by ID.
	Cookbook(context.Context, *QueryGetCookbookRequest) (*QueryGetCookbookResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ListTradesByCreator(ctx context.Context, req *QueryListTradesByCreatorRequest) (*QueryListTradesByCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTradesByCreator not implemented")
}
func (*UnimplementedQueryServer) GetRecipeHistory(ctx context.Context, req *QueryGetRecipeHistoryRequest) (*QueryGetRecipeHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipeHistory not implemented")
}
func (*UnimplementedQueryServer) RedeemInfo(ctx context.Context, req *QueryGetRedeemInfoRequest) (*QueryGetRedeemInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemInfo not implemented")
}
func (*UnimplementedQueryServer) RedeemInfoAll(ctx context.Context, req *QueryAllRedeemInfoRequest) (*QueryAllRedeemInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemInfoAll not implemented")
}
func (*UnimplementedQueryServer) PaymentInfo(ctx context.Context, req *QueryGetPaymentInfoRequest) (*QueryGetPaymentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentInfo not implemented")
}
func (*UnimplementedQueryServer) PaymentInfoAll(ctx context.Context, req *QueryAllPaymentInfoRequest) (*QueryAllPaymentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentInfoAll not implemented")
}
func (*UnimplementedQueryServer) UsernameByAddress(ctx context.Context, req *QueryGetUsernameByAddressRequest) (*QueryGetUsernameByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsernameByAddress not implemented")
}
func (*UnimplementedQueryServer) AddressByUsername(ctx context.Context, req *QueryGetAddressByUsernameRequest) (*QueryGetAddressByUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressByUsername not implemented")
}
func (*UnimplementedQueryServer) Trade(ctx context.Context, req *QueryGetTradeRequest) (*QueryGetTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trade not implemented")
}
func (*UnimplementedQueryServer) ListItemByOwner(ctx context.Context, req *QueryListItemByOwnerRequest) (*QueryListItemByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItemByOwner not implemented")
}
func (*UnimplementedQueryServer) GoogleInAppPurchaseOrder(ctx context.Context, req *QueryGetGoogleInAppPurchaseOrderRequest) (*QueryGetGoogleInAppPurchaseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoogleInAppPurchaseOrder not implemented")
}
func (*UnimplementedQueryServer) ListExecutionsByItem(ctx context.Context, req *QueryListExecutionsByItemRequest) (*QueryListExecutionsByItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExecutionsByItem not implemented")
}
func (*UnimplementedQueryServer) ListExecutionsByRecipe(ctx context.Context, req *QueryListExecutionsByRecipeRequest) (*QueryListExecutionsByRecipeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExecutionsByRecipe not implemented")
}
func (*UnimplementedQueryServer) Execution(ctx context.Context, req *QueryGetExecutionRequest) (*QueryGetExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execution not implemented")
}
func (*UnimplementedQueryServer) ListRecipesByCookbook(ctx context.Context, req *QueryListRecipesByCookbookRequest) (*QueryListRecipesByCookbookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecipesByCookbook not implemented")
}
func (*UnimplementedQueryServer) Item(ctx context.Context, req *QueryGetItemRequest) (*QueryGetItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Item not implemented")
}
func (*UnimplementedQueryServer) Recipe(ctx context.Context, req *QueryGetRecipeRequest) (*QueryGetRecipeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recipe not implemented")
}
func (*UnimplementedQueryServer) ListCookbooksByCreator(ctx context.Context, req *QueryListCookbooksByCreatorRequest) (*QueryListCookbooksByCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCookbooksByCreator not implemented")
}
func (*UnimplementedQueryServer) Cookbook(ctx context.Context, req *QueryGetCookbookRequest) (*QueryGetCookbookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cookbook not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ListTradesByCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListTradesByCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListTradesByCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/ListTradesByCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListTradesByCreator(ctx, req.(*QueryListTradesByCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRecipeHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRecipeHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRecipeHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/GetRecipeHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRecipeHistory(ctx, req.(*QueryGetRecipeHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RedeemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRedeemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RedeemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/RedeemInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RedeemInfo(ctx, req.(*QueryGetRedeemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RedeemInfoAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRedeemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RedeemInfoAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/RedeemInfoAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RedeemInfoAll(ctx, req.(*QueryAllRedeemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PaymentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPaymentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PaymentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/PaymentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PaymentInfo(ctx, req.(*QueryGetPaymentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PaymentInfoAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPaymentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PaymentInfoAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/PaymentInfoAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PaymentInfoAll(ctx, req.(*QueryAllPaymentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UsernameByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUsernameByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UsernameByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/UsernameByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UsernameByAddress(ctx, req.(*QueryGetUsernameByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AddressByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAddressByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AddressByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/AddressByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AddressByUsername(ctx, req.(*QueryGetAddressByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Trade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Trade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/Trade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Trade(ctx, req.(*QueryGetTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListItemByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListItemByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListItemByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/ListItemByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListItemByOwner(ctx, req.(*QueryListItemByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GoogleInAppPurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGoogleInAppPurchaseOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GoogleInAppPurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/GoogleInAppPurchaseOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GoogleInAppPurchaseOrder(ctx, req.(*QueryGetGoogleInAppPurchaseOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListExecutionsByItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListExecutionsByItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListExecutionsByItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/ListExecutionsByItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListExecutionsByItem(ctx, req.(*QueryListExecutionsByItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListExecutionsByRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListExecutionsByRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListExecutionsByRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/ListExecutionsByRecipe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListExecutionsByRecipe(ctx, req.(*QueryListExecutionsByRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Execution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Execution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/Execution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Execution(ctx, req.(*QueryGetExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListRecipesByCookbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListRecipesByCookbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListRecipesByCookbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/ListRecipesByCookbook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListRecipesByCookbook(ctx, req.(*QueryListRecipesByCookbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Item_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Item(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/Item",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Item(ctx, req.(*QueryGetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Recipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Recipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/Recipe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Recipe(ctx, req.(*QueryGetRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListCookbooksByCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListCookbooksByCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListCookbooksByCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/ListCookbooksByCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListCookbooksByCreator(ctx, req.(*QueryListCookbooksByCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Cookbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCookbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Cookbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/Cookbook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Cookbook(ctx, req.(*QueryGetCookbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Pylonstech.pylons.pylons.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTradesByCreator",
			Handler:    _Query_ListTradesByCreator_Handler,
		},
		{
			MethodName: "GetRecipeHistory",
			Handler:    _Query_GetRecipeHistory_Handler,
		},
		{
			MethodName: "RedeemInfo",
			Handler:    _Query_RedeemInfo_Handler,
		},
		{
			MethodName: "RedeemInfoAll",
			Handler:    _Query_RedeemInfoAll_Handler,
		},
		{
			MethodName: "PaymentInfo",
			Handler:    _Query_PaymentInfo_Handler,
		},
		{
			MethodName: "PaymentInfoAll",
			Handler:    _Query_PaymentInfoAll_Handler,
		},
		{
			MethodName: "UsernameByAddress",
			Handler:    _Query_UsernameByAddress_Handler,
		},
		{
			MethodName: "AddressByUsername",
			Handler:    _Query_AddressByUsername_Handler,
		},
		{
			MethodName: "Trade",
			Handler:    _Query_Trade_Handler,
		},
		{
			MethodName: "ListItemByOwner",
			Handler:    _Query_ListItemByOwner_Handler,
		},
		{
			MethodName: "GoogleInAppPurchaseOrder",
			Handler:    _Query_GoogleInAppPurchaseOrder_Handler,
		},
		{
			MethodName: "ListExecutionsByItem",
			Handler:    _Query_ListExecutionsByItem_Handler,
		},
		{
			MethodName: "ListExecutionsByRecipe",
			Handler:    _Query_ListExecutionsByRecipe_Handler,
		},
		{
			MethodName: "Execution",
			Handler:    _Query_Execution_Handler,
		},
		{
			MethodName: "ListRecipesByCookbook",
			Handler:    _Query_ListRecipesByCookbook_Handler,
		},
		{
			MethodName: "Item",
			Handler:    _Query_Item_Handler,
		},
		{
			MethodName: "Recipe",
			Handler:    _Query_Recipe_Handler,
		},
		{
			MethodName: "ListCookbooksByCreator",
			Handler:    _Query_ListCookbooksByCreator_Handler,
		},
		{
			MethodName: "Cookbook",
			Handler:    _Query_Cookbook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pylons/query.proto",
}

func (m *QueryListTradesByCreatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListTradesByCreatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListTradesByCreatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListTradesByCreatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListTradesByCreatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListTradesByCreatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Trades) > 0 {
		for iNdEx := len(m.Trades) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Trades[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRecipeHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRecipeHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRecipeHistoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecipeID) > 0 {
		i -= len(m.RecipeID)
		copy(dAtA[i:], m.RecipeID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RecipeID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CookbookID) > 0 {
		i -= len(m.CookbookID)
		copy(dAtA[i:], m.CookbookID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CookbookID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRecipeHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRecipeHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRecipeHistoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.History) > 0 {
		for iNdEx := len(m.History) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.History[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RecipeHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecipeHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecipeHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Reciever) > 0 {
		i -= len(m.Reciever)
		copy(dAtA[i:], m.Reciever)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reciever)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SenderName) > 0 {
		i -= len(m.SenderName)
		copy(dAtA[i:], m.SenderName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SenderName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RecipeID) > 0 {
		i -= len(m.RecipeID)
		copy(dAtA[i:], m.RecipeID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RecipeID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CookbookID) > 0 {
		i -= len(m.CookbookID)
		copy(dAtA[i:], m.CookbookID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CookbookID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ItemID) > 0 {
		i -= len(m.ItemID)
		copy(dAtA[i:], m.ItemID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ItemID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRedeemInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRedeemInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRedeemInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRedeemInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRedeemInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRedeemInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RedeemInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRedeemInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRedeemInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRedeemInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRedeemInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRedeemInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRedeemInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RedeemInfo) > 0 {
		for iNdEx := len(m.RedeemInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RedeemInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPaymentInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPaymentInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPaymentInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PurchaseID) > 0 {
		i -= len(m.PurchaseID)
		copy(dAtA[i:], m.PurchaseID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PurchaseID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPaymentInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPaymentInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPaymentInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PaymentInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPaymentInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPaymentInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPaymentInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPaymentInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPaymentInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPaymentInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PaymentInfo) > 0 {
		for iNdEx := len(m.PaymentInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PaymentInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUsernameByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUsernameByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUsernameByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAddressByUsernameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAddressByUsernameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAddressByUsernameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUsernameByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUsernameByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUsernameByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Username.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAddressByUsernameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAddressByUsernameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAddressByUsernameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetTradeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTradeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTradeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTradeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTradeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTradeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Trade.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryListItemByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListItemByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListItemByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListItemByOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListItemByOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListItemByOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGoogleInAppPurchaseOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGoogleInAppPurchaseOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGoogleInAppPurchaseOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PurchaseToken) > 0 {
		i -= len(m.PurchaseToken)
		copy(dAtA[i:], m.PurchaseToken)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PurchaseToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGoogleInAppPurchaseOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGoogleInAppPurchaseOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGoogleInAppPurchaseOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryListExecutionsByItemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListExecutionsByItemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListExecutionsByItemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ItemID) > 0 {
		i -= len(m.ItemID)
		copy(dAtA[i:], m.ItemID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ItemID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CookbookID) > 0 {
		i -= len(m.CookbookID)
		copy(dAtA[i:], m.CookbookID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CookbookID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListExecutionsByItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListExecutionsByItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListExecutionsByItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PendingExecutions) > 0 {
		for iNdEx := len(m.PendingExecutions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingExecutions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CompletedExecutions) > 0 {
		for iNdEx := len(m.CompletedExecutions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CompletedExecutions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryListExecutionsByRecipeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListExecutionsByRecipeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListExecutionsByRecipeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RecipeID) > 0 {
		i -= len(m.RecipeID)
		copy(dAtA[i:], m.RecipeID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RecipeID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CookbookID) > 0 {
		i -= len(m.CookbookID)
		copy(dAtA[i:], m.CookbookID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CookbookID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListExecutionsByRecipeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListExecutionsByRecipeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListExecutionsByRecipeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PendingExecutions) > 0 {
		for iNdEx := len(m.PendingExecutions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingExecutions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CompletedExecutions) > 0 {
		for iNdEx := len(m.CompletedExecutions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CompletedExecutions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExecutionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExecutionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExecutionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExecutionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExecutionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExecutionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Completed {
		i--
		if m.Completed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Execution.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryListRecipesByCookbookRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListRecipesByCookbookRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListRecipesByCookbookRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CookbookID) > 0 {
		i -= len(m.CookbookID)
		copy(dAtA[i:], m.CookbookID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CookbookID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListRecipesByCookbookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListRecipesByCookbookResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListRecipesByCookbookResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Recipes) > 0 {
		for iNdEx := len(m.Recipes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Recipes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetItemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetItemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetItemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CookbookID) > 0 {
		i -= len(m.CookbookID)
		copy(dAtA[i:], m.CookbookID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CookbookID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetRecipeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRecipeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRecipeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CookbookID) > 0 {
		i -= len(m.CookbookID)
		copy(dAtA[i:], m.CookbookID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CookbookID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRecipeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRecipeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRecipeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Recipe.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryListCookbooksByCreatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListCookbooksByCreatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListCookbooksByCreatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListCookbooksByCreatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListCookbooksByCreatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListCookbooksByCreatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cookbooks) > 0 {
		for iNdEx := len(m.Cookbooks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cookbooks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCookbookRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCookbookRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCookbookRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCookbookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCookbookResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCookbookResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Cookbook.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryListTradesByCreatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListTradesByCreatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Trades) > 0 {
		for _, e := range m.Trades {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRecipeHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CookbookID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.RecipeID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRecipeHistoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.History) > 0 {
		for _, e := range m.History {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *RecipeHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ItemID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CookbookID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.RecipeID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SenderName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Reciever)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovQuery(uint64(m.Time))
	}
	return n
}

func (m *QueryGetRedeemInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRedeemInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RedeemInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRedeemInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRedeemInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RedeemInfo) > 0 {
		for _, e := range m.RedeemInfo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPaymentInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PurchaseID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPaymentInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PaymentInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPaymentInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPaymentInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PaymentInfo) > 0 {
		for _, e := range m.PaymentInfo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUsernameByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAddressByUsernameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUsernameByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Username.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAddressByUsernameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Address.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetTradeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovQuery(uint64(m.ID))
	}
	return n
}

func (m *QueryGetTradeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Trade.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryListItemByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListItemByOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGoogleInAppPurchaseOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PurchaseToken)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGoogleInAppPurchaseOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Order.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryListExecutionsByItemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CookbookID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ItemID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListExecutionsByItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CompletedExecutions) > 0 {
		for _, e := range m.CompletedExecutions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.PendingExecutions) > 0 {
		for _, e := range m.PendingExecutions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListExecutionsByRecipeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CookbookID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.RecipeID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListExecutionsByRecipeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CompletedExecutions) > 0 {
		for _, e := range m.CompletedExecutions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.PendingExecutions) > 0 {
		for _, e := range m.PendingExecutions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetExecutionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetExecutionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Execution.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.Completed {
		n += 2
	}
	return n
}

func (m *QueryListRecipesByCookbookRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CookbookID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListRecipesByCookbookResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Recipes) > 0 {
		for _, e := range m.Recipes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetItemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CookbookID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Item.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetRecipeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CookbookID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRecipeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Recipe.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryListCookbooksByCreatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListCookbooksByCreatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cookbooks) > 0 {
		for _, e := range m.Cookbooks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCookbookRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCookbookResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Cookbook.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryListTradesByCreatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListTradesByCreatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListTradesByCreatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListTradesByCreatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListTradesByCreatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListTradesByCreatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trades", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trades = append(m.Trades, Trade{})
			if err := m.Trades[len(m.Trades)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRecipeHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRecipeHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRecipeHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookbookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CookbookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRecipeHistoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRecipeHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRecipeHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.History = append(m.History, &RecipeHistory{})
			if err := m.History[len(m.History)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecipeHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecipeHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecipeHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookbookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CookbookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reciever", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reciever = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRedeemInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRedeemInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRedeemInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRedeemInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRedeemInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRedeemInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedeemInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RedeemInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRedeemInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRedeemInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRedeemInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRedeemInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRedeemInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRedeemInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedeemInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedeemInfo = append(m.RedeemInfo, RedeemInfo{})
			if err := m.RedeemInfo[len(m.RedeemInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPaymentInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPaymentInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPaymentInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PurchaseID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPaymentInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPaymentInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPaymentInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PaymentInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPaymentInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPaymentInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPaymentInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPaymentInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPaymentInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPaymentInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentInfo = append(m.PaymentInfo, PaymentInfo{})
			if err := m.PaymentInfo[len(m.PaymentInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUsernameByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUsernameByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUsernameByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAddressByUsernameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAddressByUsernameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAddressByUsernameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUsernameByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUsernameByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUsernameByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Username.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAddressByUsernameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAddressByUsernameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAddressByUsernameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTradeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTradeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTradeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTradeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTradeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTradeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trade", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Trade.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListItemByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListItemByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListItemByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListItemByOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListItemByOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListItemByOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGoogleInAppPurchaseOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGoogleInAppPurchaseOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGoogleInAppPurchaseOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PurchaseToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGoogleInAppPurchaseOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGoogleInAppPurchaseOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGoogleInAppPurchaseOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListExecutionsByItemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListExecutionsByItemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListExecutionsByItemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookbookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CookbookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListExecutionsByItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListExecutionsByItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListExecutionsByItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedExecutions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletedExecutions = append(m.CompletedExecutions, Execution{})
			if err := m.CompletedExecutions[len(m.CompletedExecutions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingExecutions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingExecutions = append(m.PendingExecutions, Execution{})
			if err := m.PendingExecutions[len(m.PendingExecutions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListExecutionsByRecipeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListExecutionsByRecipeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListExecutionsByRecipeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookbookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CookbookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListExecutionsByRecipeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListExecutionsByRecipeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListExecutionsByRecipeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedExecutions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletedExecutions = append(m.CompletedExecutions, Execution{})
			if err := m.CompletedExecutions[len(m.CompletedExecutions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingExecutions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingExecutions = append(m.PendingExecutions, Execution{})
			if err := m.PendingExecutions[len(m.PendingExecutions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExecutionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExecutionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExecutionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExecutionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExecutionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExecutionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Execution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Execution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Completed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListRecipesByCookbookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListRecipesByCookbookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListRecipesByCookbookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookbookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CookbookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListRecipesByCookbookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListRecipesByCookbookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListRecipesByCookbookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipes = append(m.Recipes, Recipe{})
			if err := m.Recipes[len(m.Recipes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetItemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetItemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetItemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookbookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CookbookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRecipeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRecipeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRecipeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookbookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CookbookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRecipeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRecipeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRecipeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Recipe.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListCookbooksByCreatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListCookbooksByCreatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListCookbooksByCreatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListCookbooksByCreatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListCookbooksByCreatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListCookbooksByCreatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookbooks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cookbooks = append(m.Cookbooks, Cookbook{})
			if err := m.Cookbooks[len(m.Cookbooks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCookbookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCookbookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCookbookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCookbookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCookbookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCookbookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookbook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cookbook.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
