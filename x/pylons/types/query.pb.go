// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pylons/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # 3
type QueryGetAccountRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (m *QueryGetAccountRequest) Reset()         { *m = QueryGetAccountRequest{} }
func (m *QueryGetAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAccountRequest) ProtoMessage()    {}
func (*QueryGetAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{0}
}
func (m *QueryGetAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAccountRequest.Merge(m, src)
}
func (m *QueryGetAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAccountRequest proto.InternalMessageInfo

func (m *QueryGetAccountRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type QueryGetAccountResponse struct {
	PylonsAccount PylonsAccount `protobuf:"bytes,1,opt,name=pylonsAccount,proto3" json:"pylonsAccount"`
}

func (m *QueryGetAccountResponse) Reset()         { *m = QueryGetAccountResponse{} }
func (m *QueryGetAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAccountResponse) ProtoMessage()    {}
func (*QueryGetAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{1}
}
func (m *QueryGetAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAccountResponse.Merge(m, src)
}
func (m *QueryGetAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAccountResponse proto.InternalMessageInfo

func (m *QueryGetAccountResponse) GetPylonsAccount() PylonsAccount {
	if m != nil {
		return m.PylonsAccount
	}
	return PylonsAccount{}
}

type QueryGetTradeRequest struct {
	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *QueryGetTradeRequest) Reset()         { *m = QueryGetTradeRequest{} }
func (m *QueryGetTradeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTradeRequest) ProtoMessage()    {}
func (*QueryGetTradeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{2}
}
func (m *QueryGetTradeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTradeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTradeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTradeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTradeRequest.Merge(m, src)
}
func (m *QueryGetTradeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTradeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTradeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTradeRequest proto.InternalMessageInfo

func (m *QueryGetTradeRequest) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type QueryGetTradeResponse struct {
	Trade *Trade `protobuf:"bytes,1,opt,name=Trade,proto3" json:"Trade,omitempty"`
}

func (m *QueryGetTradeResponse) Reset()         { *m = QueryGetTradeResponse{} }
func (m *QueryGetTradeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTradeResponse) ProtoMessage()    {}
func (*QueryGetTradeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{3}
}
func (m *QueryGetTradeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTradeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTradeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTradeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTradeResponse.Merge(m, src)
}
func (m *QueryGetTradeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTradeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTradeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTradeResponse proto.InternalMessageInfo

func (m *QueryGetTradeResponse) GetTrade() *Trade {
	if m != nil {
		return m.Trade
	}
	return nil
}

type QueryListItemByOwnerRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListItemByOwnerRequest) Reset()         { *m = QueryListItemByOwnerRequest{} }
func (m *QueryListItemByOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListItemByOwnerRequest) ProtoMessage()    {}
func (*QueryListItemByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{4}
}
func (m *QueryListItemByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListItemByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListItemByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListItemByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListItemByOwnerRequest.Merge(m, src)
}
func (m *QueryListItemByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListItemByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListItemByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListItemByOwnerRequest proto.InternalMessageInfo

func (m *QueryListItemByOwnerRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryListItemByOwnerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListItemByOwnerResponse struct {
	Items []Item `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListItemByOwnerResponse) Reset()         { *m = QueryListItemByOwnerResponse{} }
func (m *QueryListItemByOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListItemByOwnerResponse) ProtoMessage()    {}
func (*QueryListItemByOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{5}
}
func (m *QueryListItemByOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListItemByOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListItemByOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListItemByOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListItemByOwnerResponse.Merge(m, src)
}
func (m *QueryListItemByOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListItemByOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListItemByOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListItemByOwnerResponse proto.InternalMessageInfo

type QueryGetGoogleInAppPurchaseOrderRequest struct {
	PurchaseToken string `protobuf:"bytes,1,opt,name=PurchaseToken,proto3" json:"PurchaseToken,omitempty"`
}

func (m *QueryGetGoogleInAppPurchaseOrderRequest) Reset() {
	*m = QueryGetGoogleInAppPurchaseOrderRequest{}
}
func (m *QueryGetGoogleInAppPurchaseOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetGoogleInAppPurchaseOrderRequest) ProtoMessage()    {}
func (*QueryGetGoogleInAppPurchaseOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{6}
}
func (m *QueryGetGoogleInAppPurchaseOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGoogleInAppPurchaseOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGoogleInAppPurchaseOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGoogleInAppPurchaseOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGoogleInAppPurchaseOrderRequest.Merge(m, src)
}
func (m *QueryGetGoogleInAppPurchaseOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGoogleInAppPurchaseOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGoogleInAppPurchaseOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGoogleInAppPurchaseOrderRequest proto.InternalMessageInfo

func (m *QueryGetGoogleInAppPurchaseOrderRequest) GetPurchaseToken() string {
	if m != nil {
		return m.PurchaseToken
	}
	return ""
}

type QueryGetGoogleInAppPurchaseOrderResponse struct {
	Order GoogleInAppPurchaseOrder `protobuf:"bytes,1,opt,name=Order,proto3" json:"Order"`
}

func (m *QueryGetGoogleInAppPurchaseOrderResponse) Reset() {
	*m = QueryGetGoogleInAppPurchaseOrderResponse{}
}
func (m *QueryGetGoogleInAppPurchaseOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetGoogleInAppPurchaseOrderResponse) ProtoMessage()    {}
func (*QueryGetGoogleInAppPurchaseOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{7}
}
func (m *QueryGetGoogleInAppPurchaseOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGoogleInAppPurchaseOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGoogleInAppPurchaseOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGoogleInAppPurchaseOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGoogleInAppPurchaseOrderResponse.Merge(m, src)
}
func (m *QueryGetGoogleInAppPurchaseOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGoogleInAppPurchaseOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGoogleInAppPurchaseOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGoogleInAppPurchaseOrderResponse proto.InternalMessageInfo

func (m *QueryGetGoogleInAppPurchaseOrderResponse) GetOrder() GoogleInAppPurchaseOrder {
	if m != nil {
		return m.Order
	}
	return GoogleInAppPurchaseOrder{}
}

type QueryListExecutionsByItemRequest struct {
	CookbookID string `protobuf:"bytes,1,opt,name=CookbookID,proto3" json:"CookbookID,omitempty"`
	ItemID     string `protobuf:"bytes,2,opt,name=ItemID,proto3" json:"ItemID,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListExecutionsByItemRequest) Reset()         { *m = QueryListExecutionsByItemRequest{} }
func (m *QueryListExecutionsByItemRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListExecutionsByItemRequest) ProtoMessage()    {}
func (*QueryListExecutionsByItemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{8}
}
func (m *QueryListExecutionsByItemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListExecutionsByItemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListExecutionsByItemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListExecutionsByItemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListExecutionsByItemRequest.Merge(m, src)
}
func (m *QueryListExecutionsByItemRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListExecutionsByItemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListExecutionsByItemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListExecutionsByItemRequest proto.InternalMessageInfo

type QueryListExecutionsByItemResponse struct {
	CompletedExecutions []Execution `protobuf:"bytes,1,rep,name=CompletedExecutions,proto3" json:"CompletedExecutions"`
	PendingExecutions   []Execution `protobuf:"bytes,2,rep,name=PendingExecutions,proto3" json:"PendingExecutions"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListExecutionsByItemResponse) Reset()         { *m = QueryListExecutionsByItemResponse{} }
func (m *QueryListExecutionsByItemResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListExecutionsByItemResponse) ProtoMessage()    {}
func (*QueryListExecutionsByItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{9}
}
func (m *QueryListExecutionsByItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListExecutionsByItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListExecutionsByItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListExecutionsByItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListExecutionsByItemResponse.Merge(m, src)
}
func (m *QueryListExecutionsByItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListExecutionsByItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListExecutionsByItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListExecutionsByItemResponse proto.InternalMessageInfo

func (m *QueryListExecutionsByItemResponse) GetCompletedExecutions() []Execution {
	if m != nil {
		return m.CompletedExecutions
	}
	return nil
}

func (m *QueryListExecutionsByItemResponse) GetPendingExecutions() []Execution {
	if m != nil {
		return m.PendingExecutions
	}
	return nil
}

func (m *QueryListExecutionsByItemResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListExecutionsByRecipeRequest struct {
	CookbookID string `protobuf:"bytes,1,opt,name=CookbookID,proto3" json:"CookbookID,omitempty"`
	RecipeID   string `protobuf:"bytes,2,opt,name=RecipeID,proto3" json:"RecipeID,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListExecutionsByRecipeRequest) Reset()         { *m = QueryListExecutionsByRecipeRequest{} }
func (m *QueryListExecutionsByRecipeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListExecutionsByRecipeRequest) ProtoMessage()    {}
func (*QueryListExecutionsByRecipeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{10}
}
func (m *QueryListExecutionsByRecipeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListExecutionsByRecipeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListExecutionsByRecipeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListExecutionsByRecipeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListExecutionsByRecipeRequest.Merge(m, src)
}
func (m *QueryListExecutionsByRecipeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListExecutionsByRecipeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListExecutionsByRecipeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListExecutionsByRecipeRequest proto.InternalMessageInfo

type QueryListExecutionsByRecipeResponse struct {
	CompletedExecutions []Execution `protobuf:"bytes,1,rep,name=CompletedExecutions,proto3" json:"CompletedExecutions"`
	PendingExecutions   []Execution `protobuf:"bytes,2,rep,name=PendingExecutions,proto3" json:"PendingExecutions"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListExecutionsByRecipeResponse) Reset()         { *m = QueryListExecutionsByRecipeResponse{} }
func (m *QueryListExecutionsByRecipeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListExecutionsByRecipeResponse) ProtoMessage()    {}
func (*QueryListExecutionsByRecipeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{11}
}
func (m *QueryListExecutionsByRecipeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListExecutionsByRecipeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListExecutionsByRecipeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListExecutionsByRecipeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListExecutionsByRecipeResponse.Merge(m, src)
}
func (m *QueryListExecutionsByRecipeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListExecutionsByRecipeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListExecutionsByRecipeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListExecutionsByRecipeResponse proto.InternalMessageInfo

func (m *QueryListExecutionsByRecipeResponse) GetCompletedExecutions() []Execution {
	if m != nil {
		return m.CompletedExecutions
	}
	return nil
}

func (m *QueryListExecutionsByRecipeResponse) GetPendingExecutions() []Execution {
	if m != nil {
		return m.PendingExecutions
	}
	return nil
}

func (m *QueryListExecutionsByRecipeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetExecutionRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *QueryGetExecutionRequest) Reset()         { *m = QueryGetExecutionRequest{} }
func (m *QueryGetExecutionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetExecutionRequest) ProtoMessage()    {}
func (*QueryGetExecutionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{12}
}
func (m *QueryGetExecutionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExecutionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExecutionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExecutionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExecutionRequest.Merge(m, src)
}
func (m *QueryGetExecutionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExecutionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExecutionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExecutionRequest proto.InternalMessageInfo

func (m *QueryGetExecutionRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type QueryGetExecutionResponse struct {
	Execution Execution `protobuf:"bytes,1,opt,name=Execution,proto3" json:"Execution"`
	Completed bool      `protobuf:"varint,2,opt,name=Completed,proto3" json:"Completed,omitempty"`
}

func (m *QueryGetExecutionResponse) Reset()         { *m = QueryGetExecutionResponse{} }
func (m *QueryGetExecutionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetExecutionResponse) ProtoMessage()    {}
func (*QueryGetExecutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{13}
}
func (m *QueryGetExecutionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExecutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExecutionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExecutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExecutionResponse.Merge(m, src)
}
func (m *QueryGetExecutionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExecutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExecutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExecutionResponse proto.InternalMessageInfo

func (m *QueryGetExecutionResponse) GetExecution() Execution {
	if m != nil {
		return m.Execution
	}
	return Execution{}
}

func (m *QueryGetExecutionResponse) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

type QueryListRecipesByCookbookRequest struct {
	CookbookID string `protobuf:"bytes,1,opt,name=CookbookID,proto3" json:"CookbookID,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListRecipesByCookbookRequest) Reset()         { *m = QueryListRecipesByCookbookRequest{} }
func (m *QueryListRecipesByCookbookRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListRecipesByCookbookRequest) ProtoMessage()    {}
func (*QueryListRecipesByCookbookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{14}
}
func (m *QueryListRecipesByCookbookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListRecipesByCookbookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListRecipesByCookbookRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListRecipesByCookbookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListRecipesByCookbookRequest.Merge(m, src)
}
func (m *QueryListRecipesByCookbookRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListRecipesByCookbookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListRecipesByCookbookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListRecipesByCookbookRequest proto.InternalMessageInfo

func (m *QueryListRecipesByCookbookRequest) GetCookbookID() string {
	if m != nil {
		return m.CookbookID
	}
	return ""
}

func (m *QueryListRecipesByCookbookRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListRecipesByCookbookResponse struct {
	Recipes []Recipe `protobuf:"bytes,1,rep,name=Recipes,proto3" json:"Recipes"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListRecipesByCookbookResponse) Reset()         { *m = QueryListRecipesByCookbookResponse{} }
func (m *QueryListRecipesByCookbookResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListRecipesByCookbookResponse) ProtoMessage()    {}
func (*QueryListRecipesByCookbookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{15}
}
func (m *QueryListRecipesByCookbookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListRecipesByCookbookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListRecipesByCookbookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListRecipesByCookbookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListRecipesByCookbookResponse.Merge(m, src)
}
func (m *QueryListRecipesByCookbookResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListRecipesByCookbookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListRecipesByCookbookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListRecipesByCookbookResponse proto.InternalMessageInfo

func (m *QueryListRecipesByCookbookResponse) GetRecipes() []Recipe {
	if m != nil {
		return m.Recipes
	}
	return nil
}

func (m *QueryListRecipesByCookbookResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetItemRequest struct {
	CookbookID string `protobuf:"bytes,1,opt,name=CookbookID,proto3" json:"CookbookID,omitempty"`
	ID         string `protobuf:"bytes,3,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *QueryGetItemRequest) Reset()         { *m = QueryGetItemRequest{} }
func (m *QueryGetItemRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetItemRequest) ProtoMessage()    {}
func (*QueryGetItemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{16}
}
func (m *QueryGetItemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetItemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetItemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetItemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetItemRequest.Merge(m, src)
}
func (m *QueryGetItemRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetItemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetItemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetItemRequest proto.InternalMessageInfo

func (m *QueryGetItemRequest) GetCookbookID() string {
	if m != nil {
		return m.CookbookID
	}
	return ""
}

func (m *QueryGetItemRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type QueryGetItemResponse struct {
	Item Item `protobuf:"bytes,1,opt,name=Item,proto3" json:"Item"`
}

func (m *QueryGetItemResponse) Reset()         { *m = QueryGetItemResponse{} }
func (m *QueryGetItemResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetItemResponse) ProtoMessage()    {}
func (*QueryGetItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{17}
}
func (m *QueryGetItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetItemResponse.Merge(m, src)
}
func (m *QueryGetItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetItemResponse proto.InternalMessageInfo

func (m *QueryGetItemResponse) GetItem() Item {
	if m != nil {
		return m.Item
	}
	return Item{}
}

type QueryGetRecipeRequest struct {
	CookbookID string `protobuf:"bytes,1,opt,name=CookbookID,proto3" json:"CookbookID,omitempty"`
	ID         string `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *QueryGetRecipeRequest) Reset()         { *m = QueryGetRecipeRequest{} }
func (m *QueryGetRecipeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRecipeRequest) ProtoMessage()    {}
func (*QueryGetRecipeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{18}
}
func (m *QueryGetRecipeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRecipeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRecipeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRecipeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRecipeRequest.Merge(m, src)
}
func (m *QueryGetRecipeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRecipeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRecipeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRecipeRequest proto.InternalMessageInfo

func (m *QueryGetRecipeRequest) GetCookbookID() string {
	if m != nil {
		return m.CookbookID
	}
	return ""
}

func (m *QueryGetRecipeRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type QueryGetRecipeResponse struct {
	Recipe Recipe `protobuf:"bytes,1,opt,name=Recipe,proto3" json:"Recipe"`
}

func (m *QueryGetRecipeResponse) Reset()         { *m = QueryGetRecipeResponse{} }
func (m *QueryGetRecipeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRecipeResponse) ProtoMessage()    {}
func (*QueryGetRecipeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{19}
}
func (m *QueryGetRecipeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRecipeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRecipeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRecipeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRecipeResponse.Merge(m, src)
}
func (m *QueryGetRecipeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRecipeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRecipeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRecipeResponse proto.InternalMessageInfo

func (m *QueryGetRecipeResponse) GetRecipe() Recipe {
	if m != nil {
		return m.Recipe
	}
	return Recipe{}
}

type QueryListCookbooksByCreatorRequest struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListCookbooksByCreatorRequest) Reset()         { *m = QueryListCookbooksByCreatorRequest{} }
func (m *QueryListCookbooksByCreatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListCookbooksByCreatorRequest) ProtoMessage()    {}
func (*QueryListCookbooksByCreatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{20}
}
func (m *QueryListCookbooksByCreatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListCookbooksByCreatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListCookbooksByCreatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListCookbooksByCreatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListCookbooksByCreatorRequest.Merge(m, src)
}
func (m *QueryListCookbooksByCreatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListCookbooksByCreatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListCookbooksByCreatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListCookbooksByCreatorRequest proto.InternalMessageInfo

func (m *QueryListCookbooksByCreatorRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *QueryListCookbooksByCreatorRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListCookbooksByCreatorResponse struct {
	Cookbooks []Cookbook `protobuf:"bytes,1,rep,name=Cookbooks,proto3" json:"Cookbooks"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListCookbooksByCreatorResponse) Reset()         { *m = QueryListCookbooksByCreatorResponse{} }
func (m *QueryListCookbooksByCreatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListCookbooksByCreatorResponse) ProtoMessage()    {}
func (*QueryListCookbooksByCreatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{21}
}
func (m *QueryListCookbooksByCreatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListCookbooksByCreatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListCookbooksByCreatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListCookbooksByCreatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListCookbooksByCreatorResponse.Merge(m, src)
}
func (m *QueryListCookbooksByCreatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListCookbooksByCreatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListCookbooksByCreatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListCookbooksByCreatorResponse proto.InternalMessageInfo

func (m *QueryListCookbooksByCreatorResponse) GetCookbooks() []Cookbook {
	if m != nil {
		return m.Cookbooks
	}
	return nil
}

func (m *QueryListCookbooksByCreatorResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCookbookRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *QueryGetCookbookRequest) Reset()         { *m = QueryGetCookbookRequest{} }
func (m *QueryGetCookbookRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCookbookRequest) ProtoMessage()    {}
func (*QueryGetCookbookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{22}
}
func (m *QueryGetCookbookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCookbookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCookbookRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCookbookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCookbookRequest.Merge(m, src)
}
func (m *QueryGetCookbookRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCookbookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCookbookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCookbookRequest proto.InternalMessageInfo

func (m *QueryGetCookbookRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type QueryGetCookbookResponse struct {
	Cookbook Cookbook `protobuf:"bytes,1,opt,name=Cookbook,proto3" json:"Cookbook"`
}

func (m *QueryGetCookbookResponse) Reset()         { *m = QueryGetCookbookResponse{} }
func (m *QueryGetCookbookResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCookbookResponse) ProtoMessage()    {}
func (*QueryGetCookbookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{23}
}
func (m *QueryGetCookbookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCookbookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCookbookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCookbookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCookbookResponse.Merge(m, src)
}
func (m *QueryGetCookbookResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCookbookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCookbookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCookbookResponse proto.InternalMessageInfo

func (m *QueryGetCookbookResponse) GetCookbook() Cookbook {
	if m != nil {
		return m.Cookbook
	}
	return Cookbook{}
}

func init() {
	proto.RegisterType((*QueryGetAccountRequest)(nil), "Pylonstech.pylons.pylons.QueryGetAccountRequest")
	proto.RegisterType((*QueryGetAccountResponse)(nil), "Pylonstech.pylons.pylons.QueryGetAccountResponse")
	proto.RegisterType((*QueryGetTradeRequest)(nil), "Pylonstech.pylons.pylons.QueryGetTradeRequest")
	proto.RegisterType((*QueryGetTradeResponse)(nil), "Pylonstech.pylons.pylons.QueryGetTradeResponse")
	proto.RegisterType((*QueryListItemByOwnerRequest)(nil), "Pylonstech.pylons.pylons.QueryListItemByOwnerRequest")
	proto.RegisterType((*QueryListItemByOwnerResponse)(nil), "Pylonstech.pylons.pylons.QueryListItemByOwnerResponse")
	proto.RegisterType((*QueryGetGoogleInAppPurchaseOrderRequest)(nil), "Pylonstech.pylons.pylons.QueryGetGoogleInAppPurchaseOrderRequest")
	proto.RegisterType((*QueryGetGoogleInAppPurchaseOrderResponse)(nil), "Pylonstech.pylons.pylons.QueryGetGoogleInAppPurchaseOrderResponse")
	proto.RegisterType((*QueryListExecutionsByItemRequest)(nil), "Pylonstech.pylons.pylons.QueryListExecutionsByItemRequest")
	proto.RegisterType((*QueryListExecutionsByItemResponse)(nil), "Pylonstech.pylons.pylons.QueryListExecutionsByItemResponse")
	proto.RegisterType((*QueryListExecutionsByRecipeRequest)(nil), "Pylonstech.pylons.pylons.QueryListExecutionsByRecipeRequest")
	proto.RegisterType((*QueryListExecutionsByRecipeResponse)(nil), "Pylonstech.pylons.pylons.QueryListExecutionsByRecipeResponse")
	proto.RegisterType((*QueryGetExecutionRequest)(nil), "Pylonstech.pylons.pylons.QueryGetExecutionRequest")
	proto.RegisterType((*QueryGetExecutionResponse)(nil), "Pylonstech.pylons.pylons.QueryGetExecutionResponse")
	proto.RegisterType((*QueryListRecipesByCookbookRequest)(nil), "Pylonstech.pylons.pylons.QueryListRecipesByCookbookRequest")
	proto.RegisterType((*QueryListRecipesByCookbookResponse)(nil), "Pylonstech.pylons.pylons.QueryListRecipesByCookbookResponse")
	proto.RegisterType((*QueryGetItemRequest)(nil), "Pylonstech.pylons.pylons.QueryGetItemRequest")
	proto.RegisterType((*QueryGetItemResponse)(nil), "Pylonstech.pylons.pylons.QueryGetItemResponse")
	proto.RegisterType((*QueryGetRecipeRequest)(nil), "Pylonstech.pylons.pylons.QueryGetRecipeRequest")
	proto.RegisterType((*QueryGetRecipeResponse)(nil), "Pylonstech.pylons.pylons.QueryGetRecipeResponse")
	proto.RegisterType((*QueryListCookbooksByCreatorRequest)(nil), "Pylonstech.pylons.pylons.QueryListCookbooksByCreatorRequest")
	proto.RegisterType((*QueryListCookbooksByCreatorResponse)(nil), "Pylonstech.pylons.pylons.QueryListCookbooksByCreatorResponse")
	proto.RegisterType((*QueryGetCookbookRequest)(nil), "Pylonstech.pylons.pylons.QueryGetCookbookRequest")
	proto.RegisterType((*QueryGetCookbookResponse)(nil), "Pylonstech.pylons.pylons.QueryGetCookbookResponse")
}

func init() { proto.RegisterFile("pylons/query.proto", fileDescriptor_dbe4a0dc0744f938) }

var fileDescriptor_dbe4a0dc0744f938 = []byte{
	// 1345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0x3a, 0x4d, 0x6b, 0xbf, 0xaa, 0x54, 0x9d, 0xfc, 0xa9, 0xd9, 0x24, 0x8e, 0xd9, 0x54,
	0x69, 0xa8, 0x88, 0xb7, 0x71, 0x08, 0x82, 0x50, 0x10, 0x71, 0xdd, 0x44, 0x96, 0x50, 0x13, 0x4c,
	0x11, 0x08, 0x0e, 0x61, 0xe3, 0x8c, 0x1c, 0x2b, 0xf1, 0xce, 0xd6, 0xbb, 0x86, 0x1a, 0xcb, 0x97,
	0x0a, 0x21, 0x24, 0x84, 0x54, 0xa9, 0x70, 0xa6, 0x42, 0x1c, 0x41, 0x48, 0x1c, 0x10, 0xe2, 0x03,
	0xa0, 0x1e, 0x23, 0x71, 0xe1, 0x84, 0x50, 0xc2, 0x81, 0x2f, 0xc0, 0x1d, 0xed, 0xcc, 0x9b, 0xf5,
	0xda, 0xde, 0xad, 0xd7, 0x21, 0xdc, 0x38, 0xd9, 0xf3, 0x66, 0xde, 0x9b, 0xdf, 0xfb, 0x33, 0x6f,
	0x7e, 0xb3, 0x40, 0xac, 0xe6, 0x01, 0x33, 0x6d, 0xfd, 0x6e, 0x83, 0xd6, 0x9b, 0x59, 0xab, 0xce,
	0x1c, 0x46, 0x52, 0x5b, 0x5c, 0xe6, 0xd0, 0xf2, 0x5e, 0x56, 0x4c, 0xe3, 0x8f, 0x3a, 0x5d, 0x61,
	0xac, 0x72, 0x40, 0x75, 0xc3, 0xaa, 0xea, 0x86, 0x69, 0x32, 0xc7, 0x70, 0xaa, 0x7c, 0xda, 0xd5,
	0x53, 0xaf, 0x95, 0x99, 0x5d, 0x63, 0xb6, 0xbe, 0x63, 0xd8, 0x54, 0x18, 0xd4, 0x3f, 0x58, 0xda,
	0xa1, 0x8e, 0xb1, 0xa4, 0x5b, 0x46, 0xa5, 0x6a, 0xf2, 0xc5, 0xb8, 0x76, 0xbc, 0xc2, 0x2a, 0x8c,
	0xff, 0xd5, 0xdd, 0x7f, 0x28, 0x9d, 0x42, 0x34, 0xe2, 0x67, 0xdb, 0x28, 0x97, 0x59, 0xc3, 0x74,
	0x70, 0x52, 0x42, 0x75, 0xea, 0xc6, 0x2e, 0x45, 0xd9, 0x0c, 0xca, 0x04, 0xae, 0xed, 0xaa, 0x61,
	0x6d, 0xb3, 0xfa, 0x2e, 0xad, 0xe3, 0xf4, 0x24, 0x4e, 0xd3, 0x7b, 0xb4, 0xdc, 0xf0, 0xed, 0x7e,
	0x09, 0xe5, 0x55, 0x87, 0xd6, 0x50, 0x34, 0x86, 0xa2, 0x3a, 0x2d, 0x57, 0x2d, 0x69, 0x7e, 0x02,
	0x85, 0x65, 0xc6, 0xf6, 0x77, 0x18, 0xdb, 0x17, 0x62, 0xed, 0x79, 0x98, 0x7c, 0xc3, 0x75, 0x6f,
	0x83, 0x3a, 0x6b, 0x02, 0x62, 0x89, 0xde, 0x6d, 0x50, 0xdb, 0x21, 0x2a, 0x24, 0x1a, 0x36, 0xad,
	0x9b, 0x46, 0x8d, 0xa6, 0x94, 0x8c, 0xb2, 0x90, 0x2c, 0x79, 0x63, 0xcd, 0x84, 0xcb, 0x7d, 0x5a,
	0xb6, 0xc5, 0x4c, 0x9b, 0x92, 0x37, 0xe1, 0x82, 0xd8, 0x09, 0x27, 0xb8, 0xee, 0xf9, 0xdc, 0xd5,
	0x6c, 0x58, 0x26, 0x70, 0x02, 0x97, 0xe7, 0xcf, 0x3c, 0xfe, 0x7d, 0x36, 0x56, 0xea, 0xb6, 0xa1,
	0xcd, 0xc3, 0xb8, 0xdc, 0xef, 0x8e, 0x1b, 0x32, 0x89, 0xf1, 0x29, 0x88, 0x17, 0x0b, 0x7c, 0x87,
	0x33, 0xa5, 0x78, 0xb1, 0xa0, 0xdd, 0x86, 0x89, 0x9e, 0x75, 0x88, 0x6a, 0x05, 0x46, 0xb9, 0x00,
	0xd1, 0xcc, 0x86, 0xa3, 0x11, 0x7a, 0x62, 0xb5, 0xd6, 0x82, 0x29, 0x6e, 0xef, 0xf5, 0xaa, 0xed,
	0x14, 0x1d, 0x5a, 0xcb, 0x37, 0x37, 0x3f, 0x34, 0x69, 0x5d, 0x6e, 0x3f, 0x0e, 0xa3, 0xcc, 0x1d,
	0x63, 0x7c, 0xc4, 0x80, 0xac, 0x03, 0x74, 0x6a, 0x24, 0x35, 0xc2, 0x37, 0x9c, 0xcf, 0x8a, 0x82,
	0xca, 0xba, 0x05, 0x95, 0x15, 0x15, 0x8a, 0x05, 0x95, 0xdd, 0x32, 0x2a, 0xd2, 0xa1, 0x92, 0x4f,
	0x53, 0xfb, 0x4e, 0x81, 0xe9, 0xe0, 0xdd, 0xd1, 0xa9, 0x55, 0x18, 0x75, 0xc5, 0x76, 0x4a, 0xc9,
	0x8c, 0x2c, 0x9c, 0xcf, 0xa5, 0xc3, 0x9d, 0xe2, 0xda, 0x22, 0xb2, 0x42, 0x85, 0x6c, 0x74, 0x81,
	0x8c, 0x63, 0x8e, 0x06, 0x81, 0x14, 0x1b, 0xfb, 0x51, 0xae, 0x26, 0x3e, 0x7d, 0x34, 0x1b, 0xfb,
	0xeb, 0xd1, 0x6c, 0x4c, 0xdb, 0x84, 0xab, 0x32, 0xf8, 0x1b, 0xbc, 0x86, 0x8b, 0xe6, 0x9a, 0x65,
	0x6d, 0x35, 0xea, 0xe5, 0x3d, 0xc3, 0xa6, 0x9b, 0x6e, 0x2d, 0xcb, 0xc0, 0x5d, 0x81, 0x0b, 0x52,
	0x7e, 0x87, 0xed, 0x53, 0x13, 0x03, 0xd8, 0x2d, 0xd4, 0x3e, 0x82, 0x85, 0xc1, 0x06, 0x31, 0x16,
	0xb7, 0x61, 0x94, 0x0b, 0x30, 0xc1, 0xb9, 0xf0, 0x58, 0x84, 0x99, 0x92, 0xf1, 0xe1, 0x03, 0xed,
	0x5b, 0x05, 0x32, 0x5e, 0xf0, 0x6f, 0xc9, 0x33, 0x67, 0xe7, 0x9b, 0x6e, 0xf8, 0xa4, 0x1b, 0x69,
	0x80, 0x9b, 0x78, 0x9c, 0xb0, 0x0c, 0x93, 0x25, 0x9f, 0x84, 0x4c, 0xc2, 0x59, 0x77, 0x79, 0xb1,
	0xc0, 0x03, 0x9c, 0x2c, 0xe1, 0xe8, 0xb4, 0x2a, 0xc4, 0x17, 0xfb, 0xaf, 0xe3, 0xf0, 0xcc, 0x13,
	0xe0, 0x62, 0x90, 0xde, 0x83, 0xb1, 0x9b, 0xac, 0x66, 0x1d, 0x50, 0x87, 0xee, 0x76, 0x16, 0x61,
	0xf9, 0xcc, 0x85, 0x87, 0xcc, 0x5b, 0x8b, 0x31, 0x0a, 0xb2, 0x42, 0xde, 0x86, 0x4b, 0x5b, 0xd4,
	0xdc, 0xad, 0x9a, 0x15, 0x9f, 0xe9, 0xf8, 0xb0, 0xa6, 0xfb, 0x6d, 0xf4, 0x94, 0xea, 0xc8, 0x89,
	0x4b, 0x55, 0xfb, 0x41, 0x01, 0x2d, 0x30, 0x48, 0x25, 0xde, 0x28, 0xa3, 0x66, 0x55, 0x85, 0x84,
	0x50, 0xf0, 0xf2, 0xea, 0x8d, 0xff, 0x83, 0xcc, 0x7e, 0x13, 0x87, 0xb9, 0x27, 0x82, 0xfe, 0x3f,
	0xb7, 0x6e, 0x6e, 0xaf, 0x41, 0x4a, 0xf6, 0x0a, 0xcf, 0x7c, 0xff, 0x2d, 0x91, 0xe4, 0xb7, 0xc4,
	0x7d, 0x05, 0x9e, 0x0e, 0x58, 0x8c, 0x81, 0xdc, 0x80, 0xa4, 0x27, 0xc4, 0x6e, 0x32, 0x84, 0x8f,
	0x1d, 0x5d, 0x32, 0x0d, 0x49, 0x2f, 0x96, 0xbc, 0x50, 0x12, 0xa5, 0x8e, 0x40, 0xfb, 0x4c, 0xf1,
	0x9d, 0x58, 0x91, 0x4b, 0x3b, 0xdf, 0x94, 0x65, 0x16, 0xb5, 0x16, 0xd7, 0x03, 0xda, 0xf8, 0x49,
	0xee, 0x9a, 0xef, 0xfd, 0x47, 0x23, 0x00, 0x0d, 0xc6, 0xe6, 0x35, 0x38, 0x87, 0x93, 0x58, 0x58,
	0x99, 0xf0, 0xc8, 0x88, 0x85, 0x18, 0x16, 0xa9, 0x76, 0x6a, 0xf7, 0x8e, 0x76, 0x0b, 0xc6, 0x64,
	0x0e, 0x87, 0x69, 0xc9, 0xa2, 0x16, 0x46, 0xbc, 0x5a, 0xd8, 0xea, 0x30, 0x8b, 0xae, 0x56, 0xf9,
	0x22, 0x9c, 0x71, 0xc7, 0x58, 0x00, 0xd1, 0xae, 0x56, 0xae, 0xa1, 0x6d, 0x74, 0x38, 0xc8, 0x70,
	0x7d, 0x45, 0x40, 0x8b, 0x7b, 0xd0, 0xde, 0xe9, 0x50, 0xb3, 0x9e, 0xb3, 0xfe, 0x2a, 0x9c, 0x15,
	0x12, 0x84, 0x17, 0x35, 0x0b, 0xa8, 0xa5, 0x7d, 0xe2, 0xcf, 0xb6, 0x44, 0xe0, 0xe6, 0xbb, 0x4e,
	0x0d, 0x87, 0x79, 0xb7, 0x74, 0x0a, 0xce, 0x95, 0x85, 0x04, 0xd1, 0xca, 0xe1, 0xa9, 0x51, 0x9c,
	0x1f, 0x15, 0x5f, 0x73, 0x0b, 0x02, 0x82, 0x0e, 0xaf, 0xbb, 0x47, 0x09, 0x67, 0xb1, 0xf2, 0xb4,
	0x70, 0x9f, 0xe5, 0x52, 0x79, 0x24, 0x3d, 0xd5, 0xd3, 0x6b, 0x37, 0xcf, 0x76, 0x08, 0x70, 0xef,
	0x91, 0xed, 0xed, 0x36, 0xef, 0x77, 0x3a, 0x53, 0xdf, 0x79, 0x2a, 0x40, 0x42, 0xca, 0x30, 0x95,
	0xd1, 0xdd, 0xf2, 0x34, 0x73, 0x7f, 0x5f, 0x84, 0x51, 0xbe, 0x05, 0x79, 0xa8, 0x40, 0xe2, 0x2d,
	0x24, 0xe9, 0xe4, 0x7a, 0xb8, 0xa9, 0x60, 0xca, 0xaf, 0x2e, 0x0d, 0xa1, 0x21, 0x3c, 0xd0, 0xb4,
	0xfb, 0xbf, 0xfe, 0xf9, 0x30, 0x3e, 0x4d, 0x54, 0x7c, 0xe8, 0xe8, 0xf8, 0xd0, 0xd1, 0x5b, 0xf2,
	0xb1, 0xd0, 0x26, 0x1f, 0x2b, 0xc8, 0xbe, 0x49, 0x76, 0xf0, 0x06, 0x7e, 0x7e, 0xaf, 0xea, 0x91,
	0xd7, 0x23, 0x1c, 0x95, 0xc3, 0x19, 0x27, 0x44, 0xf7, 0xbf, 0xb0, 0xf4, 0x56, 0xb1, 0xd0, 0x26,
	0x5f, 0x29, 0x70, 0xb1, 0x87, 0x4a, 0x93, 0x95, 0x01, 0x1b, 0x04, 0x13, 0x7f, 0xf5, 0x85, 0x61,
	0xd5, 0x10, 0xde, 0x0c, 0x87, 0x77, 0x99, 0x4c, 0xe8, 0xbe, 0x57, 0x9b, 0xad, 0xb7, 0xf8, 0xc3,
	0xa1, 0x4d, 0x7e, 0x51, 0x20, 0x15, 0x46, 0x4f, 0xc9, 0xda, 0xe0, 0x58, 0x0c, 0xa0, 0xdd, 0x6a,
	0xfe, 0xdf, 0x98, 0x40, 0x17, 0xe6, 0xb8, 0x0b, 0x33, 0x64, 0xca, 0x73, 0xc1, 0xb0, 0xf4, 0x56,
	0x17, 0x71, 0xe7, 0x8e, 0x8c, 0x07, 0x31, 0x51, 0xb2, 0x1a, 0x21, 0x70, 0x21, 0x6c, 0x5b, 0x7d,
	0xf9, 0x44, 0xba, 0x08, 0x7b, 0x85, 0xc3, 0xd6, 0xc9, 0xa2, 0xde, 0xfb, 0x8e, 0x16, 0x49, 0xd0,
	0x5b, 0x9d, 0x4e, 0xdc, 0xd6, 0x5b, 0x82, 0xa8, 0xb7, 0xc9, 0xa1, 0x02, 0x93, 0xc1, 0xc4, 0x8b,
	0xdc, 0x18, 0x12, 0x4e, 0xd7, 0x65, 0xa0, 0xbe, 0x72, 0x42, 0x6d, 0x74, 0xe7, 0x25, 0xee, 0xce,
	0x32, 0x59, 0x0a, 0x70, 0x47, 0x3c, 0xfb, 0x7b, 0x1c, 0x92, 0x0c, 0xb5, 0x4d, 0xbe, 0x50, 0x7c,
	0x04, 0x87, 0xe4, 0x06, 0x97, 0x44, 0x2f, 0x9f, 0x52, 0x97, 0x87, 0xd2, 0x41, 0xc4, 0x69, 0x8e,
	0x38, 0x45, 0x26, 0xfb, 0x10, 0x8b, 0xd3, 0xf9, 0x93, 0x02, 0x13, 0x81, 0xe4, 0x83, 0x44, 0xc9,
	0x7b, 0x18, 0x81, 0x52, 0x6f, 0x9c, 0x4c, 0x19, 0x41, 0x5f, 0xe1, 0xa0, 0xd3, 0x64, 0x5a, 0xef,
	0xfa, 0xa4, 0x62, 0x77, 0x05, 0x97, 0x7c, 0xae, 0x08, 0xb2, 0x40, 0x16, 0x07, 0x07, 0xc6, 0x5f,
	0xd0, 0xd9, 0xa8, 0xcb, 0x11, 0xcd, 0x3c, 0x47, 0x93, 0x21, 0x69, 0x7f, 0xf7, 0xe8, 0x2d, 0xdc,
	0x42, 0x9b, 0x7c, 0xa9, 0x48, 0x7e, 0x40, 0x22, 0x34, 0xd0, 0xee, 0xba, 0xbc, 0x1e, 0x5d, 0x01,
	0x51, 0x2d, 0x70, 0x54, 0x1a, 0xc9, 0x74, 0xc7, 0x28, 0x00, 0xd7, 0xcf, 0x78, 0x98, 0xfa, 0x2f,
	0xfa, 0x48, 0x87, 0x29, 0x94, 0xa8, 0x44, 0x3a, 0x4c, 0xe1, 0xec, 0xa2, 0xbf, 0xa5, 0xc9, 0x6f,
	0x64, 0xb6, 0xde, 0x42, 0xc6, 0xd3, 0x26, 0x0f, 0x94, 0xce, 0x5d, 0x4d, 0x22, 0x5c, 0x94, 0xbd,
	0x85, 0x98, 0x1b, 0x46, 0x25, 0xec, 0xba, 0x90, 0xc0, 0x78, 0x3c, 0xf3, 0xeb, 0x8f, 0x8f, 0xd2,
	0xca, 0xe1, 0x51, 0x5a, 0xf9, 0xe3, 0x28, 0xad, 0x3c, 0x38, 0x4e, 0xc7, 0x0e, 0x8f, 0xd3, 0xb1,
	0xdf, 0x8e, 0xd3, 0xb1, 0x77, 0x9f, 0xab, 0x54, 0x9d, 0xbd, 0xc6, 0x4e, 0xb6, 0xcc, 0x6a, 0xba,
	0xd8, 0x76, 0xd1, 0xdd, 0x57, 0x9a, 0xb9, 0xe7, 0xdd, 0x8e, 0x4d, 0x8b, 0xda, 0x3b, 0x67, 0xf9,
	0xa7, 0xc0, 0xe5, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x39, 0x0a, 0x14, 0xd7, 0x41, 0x15, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a username by account.
	Username(ctx context.Context, in *QueryGetAccountRequest, opts ...grpc.CallOption) (*QueryGetAccountResponse, error)
	// Queries a trade by id.
	Trade(ctx context.Context, in *QueryGetTradeRequest, opts ...grpc.CallOption) (*QueryGetTradeResponse, error)
	// Queries a list of listItemByOwner items.
	ListItemByOwner(ctx context.Context, in *QueryListItemByOwnerRequest, opts ...grpc.CallOption) (*QueryListItemByOwnerResponse, error)
	// Queries a googleIAPOrder by PurchaseToken.
	GoogleInAppPurchaseOrder(ctx context.Context, in *QueryGetGoogleInAppPurchaseOrderRequest, opts ...grpc.CallOption) (*QueryGetGoogleInAppPurchaseOrderResponse, error)
	// Queries a list of listExecutionsByItem items.
	ListExecutionsByItem(ctx context.Context, in *QueryListExecutionsByItemRequest, opts ...grpc.CallOption) (*QueryListExecutionsByItemResponse, error)
	// Queries a list of listExecutionsByRecipe items.
	ListExecutionsByRecipe(ctx context.Context, in *QueryListExecutionsByRecipeRequest, opts ...grpc.CallOption) (*QueryListExecutionsByRecipeResponse, error)
	// Queries a execution by id.
	Execution(ctx context.Context, in *QueryGetExecutionRequest, opts ...grpc.CallOption) (*QueryGetExecutionResponse, error)
	// Queries a list of listRecipesByCookbook items.
	ListRecipesByCookbook(ctx context.Context, in *QueryListRecipesByCookbookRequest, opts ...grpc.CallOption) (*QueryListRecipesByCookbookResponse, error)
	// Queries a item by ID.
	Item(ctx context.Context, in *QueryGetItemRequest, opts ...grpc.CallOption) (*QueryGetItemResponse, error)
	// Retrieves a recipe by ID.
	Recipe(ctx context.Context, in *QueryGetRecipeRequest, opts ...grpc.CallOption) (*QueryGetRecipeResponse, error)
	// Retrieves the list of cookbooks owned by an address
	ListCookbooksByCreator(ctx context.Context, in *QueryListCookbooksByCreatorRequest, opts ...grpc.CallOption) (*QueryListCookbooksByCreatorResponse, error)
	// Retrieves a cookbook by ID.
	Cookbook(ctx context.Context, in *QueryGetCookbookRequest, opts ...grpc.CallOption) (*QueryGetCookbookResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Username(ctx context.Context, in *QueryGetAccountRequest, opts ...grpc.CallOption) (*QueryGetAccountResponse, error) {
	out := new(QueryGetAccountResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/Username", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Trade(ctx context.Context, in *QueryGetTradeRequest, opts ...grpc.CallOption) (*QueryGetTradeResponse, error) {
	out := new(QueryGetTradeResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/Trade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListItemByOwner(ctx context.Context, in *QueryListItemByOwnerRequest, opts ...grpc.CallOption) (*QueryListItemByOwnerResponse, error) {
	out := new(QueryListItemByOwnerResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/ListItemByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GoogleInAppPurchaseOrder(ctx context.Context, in *QueryGetGoogleInAppPurchaseOrderRequest, opts ...grpc.CallOption) (*QueryGetGoogleInAppPurchaseOrderResponse, error) {
	out := new(QueryGetGoogleInAppPurchaseOrderResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/GoogleInAppPurchaseOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListExecutionsByItem(ctx context.Context, in *QueryListExecutionsByItemRequest, opts ...grpc.CallOption) (*QueryListExecutionsByItemResponse, error) {
	out := new(QueryListExecutionsByItemResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/ListExecutionsByItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListExecutionsByRecipe(ctx context.Context, in *QueryListExecutionsByRecipeRequest, opts ...grpc.CallOption) (*QueryListExecutionsByRecipeResponse, error) {
	out := new(QueryListExecutionsByRecipeResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/ListExecutionsByRecipe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Execution(ctx context.Context, in *QueryGetExecutionRequest, opts ...grpc.CallOption) (*QueryGetExecutionResponse, error) {
	out := new(QueryGetExecutionResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/Execution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListRecipesByCookbook(ctx context.Context, in *QueryListRecipesByCookbookRequest, opts ...grpc.CallOption) (*QueryListRecipesByCookbookResponse, error) {
	out := new(QueryListRecipesByCookbookResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/ListRecipesByCookbook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Item(ctx context.Context, in *QueryGetItemRequest, opts ...grpc.CallOption) (*QueryGetItemResponse, error) {
	out := new(QueryGetItemResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/Item", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Recipe(ctx context.Context, in *QueryGetRecipeRequest, opts ...grpc.CallOption) (*QueryGetRecipeResponse, error) {
	out := new(QueryGetRecipeResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/Recipe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListCookbooksByCreator(ctx context.Context, in *QueryListCookbooksByCreatorRequest, opts ...grpc.CallOption) (*QueryListCookbooksByCreatorResponse, error) {
	out := new(QueryListCookbooksByCreatorResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/ListCookbooksByCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Cookbook(ctx context.Context, in *QueryGetCookbookRequest, opts ...grpc.CallOption) (*QueryGetCookbookResponse, error) {
	out := new(QueryGetCookbookResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/Cookbook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a username by account.
	Username(context.Context, *QueryGetAccountRequest) (*QueryGetAccountResponse, error)
	// Queries a trade by id.
	Trade(context.Context, *QueryGetTradeRequest) (*QueryGetTradeResponse, error)
	// Queries a list of listItemByOwner items.
	ListItemByOwner(context.Context, *QueryListItemByOwnerRequest) (*QueryListItemByOwnerResponse, error)
	// Queries a googleIAPOrder by PurchaseToken.
	GoogleInAppPurchaseOrder(context.Context, *QueryGetGoogleInAppPurchaseOrderRequest) (*QueryGetGoogleInAppPurchaseOrderResponse, error)
	// Queries a list of listExecutionsByItem items.
	ListExecutionsByItem(context.Context, *QueryListExecutionsByItemRequest) (*QueryListExecutionsByItemResponse, error)
	// Queries a list of listExecutionsByRecipe items.
	ListExecutionsByRecipe(context.Context, *QueryListExecutionsByRecipeRequest) (*QueryListExecutionsByRecipeResponse, error)
	// Queries a execution by id.
	Execution(context.Context, *QueryGetExecutionRequest) (*QueryGetExecutionResponse, error)
	// Queries a list of listRecipesByCookbook items.
	ListRecipesByCookbook(context.Context, *QueryListRecipesByCookbookRequest) (*QueryListRecipesByCookbookResponse, error)
	// Queries a item by ID.
	Item(context.Context, *QueryGetItemRequest) (*QueryGetItemResponse, error)
	// Retrieves a recipe by ID.
	Recipe(context.Context, *QueryGetRecipeRequest) (*QueryGetRecipeResponse, error)
	// Retrieves the list of cookbooks owned by an address
	ListCookbooksByCreator(context.Context, *QueryListCookbooksByCreatorRequest) (*QueryListCookbooksByCreatorResponse, error)
	// Retrieves a cookbook by ID.
	Cookbook(context.Context, *QueryGetCookbookRequest) (*QueryGetCookbookResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Username(ctx context.Context, req *QueryGetAccountRequest) (*QueryGetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Username not implemented")
}
func (*UnimplementedQueryServer) Trade(ctx context.Context, req *QueryGetTradeRequest) (*QueryGetTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trade not implemented")
}
func (*UnimplementedQueryServer) ListItemByOwner(ctx context.Context, req *QueryListItemByOwnerRequest) (*QueryListItemByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItemByOwner not implemented")
}
func (*UnimplementedQueryServer) GoogleInAppPurchaseOrder(ctx context.Context, req *QueryGetGoogleInAppPurchaseOrderRequest) (*QueryGetGoogleInAppPurchaseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoogleInAppPurchaseOrder not implemented")
}
func (*UnimplementedQueryServer) ListExecutionsByItem(ctx context.Context, req *QueryListExecutionsByItemRequest) (*QueryListExecutionsByItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExecutionsByItem not implemented")
}
func (*UnimplementedQueryServer) ListExecutionsByRecipe(ctx context.Context, req *QueryListExecutionsByRecipeRequest) (*QueryListExecutionsByRecipeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExecutionsByRecipe not implemented")
}
func (*UnimplementedQueryServer) Execution(ctx context.Context, req *QueryGetExecutionRequest) (*QueryGetExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execution not implemented")
}
func (*UnimplementedQueryServer) ListRecipesByCookbook(ctx context.Context, req *QueryListRecipesByCookbookRequest) (*QueryListRecipesByCookbookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecipesByCookbook not implemented")
}
func (*UnimplementedQueryServer) Item(ctx context.Context, req *QueryGetItemRequest) (*QueryGetItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Item not implemented")
}
func (*UnimplementedQueryServer) Recipe(ctx context.Context, req *QueryGetRecipeRequest) (*QueryGetRecipeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recipe not implemented")
}
func (*UnimplementedQueryServer) ListCookbooksByCreator(ctx context.Context, req *QueryListCookbooksByCreatorRequest) (*QueryListCookbooksByCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCookbooksByCreator not implemented")
}
func (*UnimplementedQueryServer) Cookbook(ctx context.Context, req *QueryGetCookbookRequest) (*QueryGetCookbookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cookbook not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Username_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Username(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/Username",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Username(ctx, req.(*QueryGetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Trade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Trade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/Trade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Trade(ctx, req.(*QueryGetTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListItemByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListItemByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListItemByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/ListItemByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListItemByOwner(ctx, req.(*QueryListItemByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GoogleInAppPurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGoogleInAppPurchaseOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GoogleInAppPurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/GoogleInAppPurchaseOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GoogleInAppPurchaseOrder(ctx, req.(*QueryGetGoogleInAppPurchaseOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListExecutionsByItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListExecutionsByItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListExecutionsByItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/ListExecutionsByItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListExecutionsByItem(ctx, req.(*QueryListExecutionsByItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListExecutionsByRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListExecutionsByRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListExecutionsByRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/ListExecutionsByRecipe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListExecutionsByRecipe(ctx, req.(*QueryListExecutionsByRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Execution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Execution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/Execution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Execution(ctx, req.(*QueryGetExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListRecipesByCookbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListRecipesByCookbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListRecipesByCookbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/ListRecipesByCookbook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListRecipesByCookbook(ctx, req.(*QueryListRecipesByCookbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Item_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Item(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/Item",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Item(ctx, req.(*QueryGetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Recipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Recipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/Recipe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Recipe(ctx, req.(*QueryGetRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListCookbooksByCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListCookbooksByCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListCookbooksByCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/ListCookbooksByCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListCookbooksByCreator(ctx, req.(*QueryListCookbooksByCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Cookbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCookbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Cookbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/Cookbook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Cookbook(ctx, req.(*QueryGetCookbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Pylonstech.pylons.pylons.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Username",
			Handler:    _Query_Username_Handler,
		},
		{
			MethodName: "Trade",
			Handler:    _Query_Trade_Handler,
		},
		{
			MethodName: "ListItemByOwner",
			Handler:    _Query_ListItemByOwner_Handler,
		},
		{
			MethodName: "GoogleInAppPurchaseOrder",
			Handler:    _Query_GoogleInAppPurchaseOrder_Handler,
		},
		{
			MethodName: "ListExecutionsByItem",
			Handler:    _Query_ListExecutionsByItem_Handler,
		},
		{
			MethodName: "ListExecutionsByRecipe",
			Handler:    _Query_ListExecutionsByRecipe_Handler,
		},
		{
			MethodName: "Execution",
			Handler:    _Query_Execution_Handler,
		},
		{
			MethodName: "ListRecipesByCookbook",
			Handler:    _Query_ListRecipesByCookbook_Handler,
		},
		{
			MethodName: "Item",
			Handler:    _Query_Item_Handler,
		},
		{
			MethodName: "Recipe",
			Handler:    _Query_Recipe_Handler,
		},
		{
			MethodName: "ListCookbooksByCreator",
			Handler:    _Query_ListCookbooksByCreator_Handler,
		},
		{
			MethodName: "Cookbook",
			Handler:    _Query_Cookbook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pylons/query.proto",
}

func (m *QueryGetAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PylonsAccount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetTradeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTradeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTradeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTradeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTradeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTradeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Trade != nil {
		{
			size, err := m.Trade.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListItemByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListItemByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListItemByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListItemByOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListItemByOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListItemByOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGoogleInAppPurchaseOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGoogleInAppPurchaseOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGoogleInAppPurchaseOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PurchaseToken) > 0 {
		i -= len(m.PurchaseToken)
		copy(dAtA[i:], m.PurchaseToken)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PurchaseToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGoogleInAppPurchaseOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGoogleInAppPurchaseOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGoogleInAppPurchaseOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryListExecutionsByItemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListExecutionsByItemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListExecutionsByItemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ItemID) > 0 {
		i -= len(m.ItemID)
		copy(dAtA[i:], m.ItemID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ItemID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CookbookID) > 0 {
		i -= len(m.CookbookID)
		copy(dAtA[i:], m.CookbookID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CookbookID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListExecutionsByItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListExecutionsByItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListExecutionsByItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PendingExecutions) > 0 {
		for iNdEx := len(m.PendingExecutions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingExecutions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CompletedExecutions) > 0 {
		for iNdEx := len(m.CompletedExecutions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CompletedExecutions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryListExecutionsByRecipeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListExecutionsByRecipeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListExecutionsByRecipeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RecipeID) > 0 {
		i -= len(m.RecipeID)
		copy(dAtA[i:], m.RecipeID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RecipeID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CookbookID) > 0 {
		i -= len(m.CookbookID)
		copy(dAtA[i:], m.CookbookID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CookbookID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListExecutionsByRecipeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListExecutionsByRecipeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListExecutionsByRecipeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PendingExecutions) > 0 {
		for iNdEx := len(m.PendingExecutions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingExecutions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CompletedExecutions) > 0 {
		for iNdEx := len(m.CompletedExecutions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CompletedExecutions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExecutionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExecutionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExecutionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExecutionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExecutionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExecutionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Completed {
		i--
		if m.Completed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Execution.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryListRecipesByCookbookRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListRecipesByCookbookRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListRecipesByCookbookRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CookbookID) > 0 {
		i -= len(m.CookbookID)
		copy(dAtA[i:], m.CookbookID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CookbookID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListRecipesByCookbookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListRecipesByCookbookResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListRecipesByCookbookResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Recipes) > 0 {
		for iNdEx := len(m.Recipes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Recipes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetItemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetItemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetItemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CookbookID) > 0 {
		i -= len(m.CookbookID)
		copy(dAtA[i:], m.CookbookID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CookbookID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetRecipeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRecipeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRecipeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CookbookID) > 0 {
		i -= len(m.CookbookID)
		copy(dAtA[i:], m.CookbookID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CookbookID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRecipeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRecipeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRecipeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Recipe.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryListCookbooksByCreatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListCookbooksByCreatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListCookbooksByCreatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListCookbooksByCreatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListCookbooksByCreatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListCookbooksByCreatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cookbooks) > 0 {
		for iNdEx := len(m.Cookbooks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cookbooks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCookbookRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCookbookRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCookbookRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCookbookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCookbookResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCookbookResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Cookbook.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PylonsAccount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetTradeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovQuery(uint64(m.ID))
	}
	return n
}

func (m *QueryGetTradeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Trade != nil {
		l = m.Trade.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListItemByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListItemByOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGoogleInAppPurchaseOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PurchaseToken)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGoogleInAppPurchaseOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Order.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryListExecutionsByItemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CookbookID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ItemID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListExecutionsByItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CompletedExecutions) > 0 {
		for _, e := range m.CompletedExecutions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.PendingExecutions) > 0 {
		for _, e := range m.PendingExecutions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListExecutionsByRecipeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CookbookID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.RecipeID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListExecutionsByRecipeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CompletedExecutions) > 0 {
		for _, e := range m.CompletedExecutions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.PendingExecutions) > 0 {
		for _, e := range m.PendingExecutions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetExecutionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetExecutionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Execution.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.Completed {
		n += 2
	}
	return n
}

func (m *QueryListRecipesByCookbookRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CookbookID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListRecipesByCookbookResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Recipes) > 0 {
		for _, e := range m.Recipes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetItemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CookbookID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Item.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetRecipeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CookbookID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRecipeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Recipe.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryListCookbooksByCreatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListCookbooksByCreatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cookbooks) > 0 {
		for _, e := range m.Cookbooks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCookbookRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCookbookResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Cookbook.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PylonsAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PylonsAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTradeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTradeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTradeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTradeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTradeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTradeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trade", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trade == nil {
				m.Trade = &Trade{}
			}
			if err := m.Trade.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListItemByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListItemByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListItemByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListItemByOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListItemByOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListItemByOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGoogleInAppPurchaseOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGoogleInAppPurchaseOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGoogleInAppPurchaseOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PurchaseToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGoogleInAppPurchaseOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGoogleInAppPurchaseOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGoogleInAppPurchaseOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListExecutionsByItemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListExecutionsByItemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListExecutionsByItemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookbookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CookbookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListExecutionsByItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListExecutionsByItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListExecutionsByItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedExecutions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletedExecutions = append(m.CompletedExecutions, Execution{})
			if err := m.CompletedExecutions[len(m.CompletedExecutions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingExecutions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingExecutions = append(m.PendingExecutions, Execution{})
			if err := m.PendingExecutions[len(m.PendingExecutions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListExecutionsByRecipeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListExecutionsByRecipeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListExecutionsByRecipeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookbookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CookbookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListExecutionsByRecipeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListExecutionsByRecipeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListExecutionsByRecipeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedExecutions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletedExecutions = append(m.CompletedExecutions, Execution{})
			if err := m.CompletedExecutions[len(m.CompletedExecutions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingExecutions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingExecutions = append(m.PendingExecutions, Execution{})
			if err := m.PendingExecutions[len(m.PendingExecutions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExecutionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExecutionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExecutionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExecutionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExecutionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExecutionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Execution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Execution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Completed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListRecipesByCookbookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListRecipesByCookbookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListRecipesByCookbookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookbookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CookbookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListRecipesByCookbookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListRecipesByCookbookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListRecipesByCookbookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipes = append(m.Recipes, Recipe{})
			if err := m.Recipes[len(m.Recipes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetItemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetItemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetItemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookbookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CookbookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRecipeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRecipeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRecipeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookbookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CookbookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRecipeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRecipeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRecipeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Recipe.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListCookbooksByCreatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListCookbooksByCreatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListCookbooksByCreatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListCookbooksByCreatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListCookbooksByCreatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListCookbooksByCreatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookbooks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cookbooks = append(m.Cookbooks, Cookbook{})
			if err := m.Cookbooks[len(m.Cookbooks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCookbookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCookbookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCookbookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCookbookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCookbookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCookbookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookbook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cookbook.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
