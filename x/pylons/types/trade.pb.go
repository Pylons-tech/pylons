// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pylons/trade.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ItemRef struct {
	CookbookID string `protobuf:"bytes,1,opt,name=cookbookID,proto3" json:"cookbookID,omitempty"`
	ItemID     string `protobuf:"bytes,2,opt,name=itemID,proto3" json:"itemID,omitempty"`
}

func (m *ItemRef) Reset()         { *m = ItemRef{} }
func (m *ItemRef) String() string { return proto.CompactTextString(m) }
func (*ItemRef) ProtoMessage()    {}
func (*ItemRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_b14272a2f758ba6f, []int{0}
}
func (m *ItemRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemRef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemRef.Merge(m, src)
}
func (m *ItemRef) XXX_Size() int {
	return m.Size()
}
func (m *ItemRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemRef.DiscardUnknown(m)
}

var xxx_messageInfo_ItemRef proto.InternalMessageInfo

func (m *ItemRef) GetCookbookID() string {
	if m != nil {
		return m.CookbookID
	}
	return ""
}

func (m *ItemRef) GetItemID() string {
	if m != nil {
		return m.ItemID
	}
	return ""
}

type Trade struct {
	Creator          string      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ID               uint64      `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	CoinInput        types.Coin  `protobuf:"bytes,3,opt,name=coinInput,proto3" json:"coinInput"`
	ItemInputs       []ItemInput `protobuf:"bytes,4,rep,name=itemInputs,proto3" json:"itemInputs"`
	CoinOutput       types.Coin  `protobuf:"bytes,5,opt,name=coinOutput,proto3" json:"coinOutput"`
	ItemOutputs      []ItemRef   `protobuf:"bytes,6,rep,name=itemOutputs,proto3" json:"itemOutputs"`
	ExtraInfo        string      `protobuf:"bytes,7,opt,name=extraInfo,proto3" json:"extraInfo,omitempty"`
	Receiver         string      `protobuf:"bytes,8,opt,name=receiver,proto3" json:"receiver,omitempty"`
	TradedItemInputs []ItemRef   `protobuf:"bytes,9,rep,name=tradedItemInputs,proto3" json:"tradedItemInputs"`
}

func (m *Trade) Reset()         { *m = Trade{} }
func (m *Trade) String() string { return proto.CompactTextString(m) }
func (*Trade) ProtoMessage()    {}
func (*Trade) Descriptor() ([]byte, []int) {
	return fileDescriptor_b14272a2f758ba6f, []int{1}
}
func (m *Trade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Trade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Trade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Trade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trade.Merge(m, src)
}
func (m *Trade) XXX_Size() int {
	return m.Size()
}
func (m *Trade) XXX_DiscardUnknown() {
	xxx_messageInfo_Trade.DiscardUnknown(m)
}

var xxx_messageInfo_Trade proto.InternalMessageInfo

func (m *Trade) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Trade) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Trade) GetCoinInput() types.Coin {
	if m != nil {
		return m.CoinInput
	}
	return types.Coin{}
}

func (m *Trade) GetItemInputs() []ItemInput {
	if m != nil {
		return m.ItemInputs
	}
	return nil
}

func (m *Trade) GetCoinOutput() types.Coin {
	if m != nil {
		return m.CoinOutput
	}
	return types.Coin{}
}

func (m *Trade) GetItemOutputs() []ItemRef {
	if m != nil {
		return m.ItemOutputs
	}
	return nil
}

func (m *Trade) GetExtraInfo() string {
	if m != nil {
		return m.ExtraInfo
	}
	return ""
}

func (m *Trade) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *Trade) GetTradedItemInputs() []ItemRef {
	if m != nil {
		return m.TradedItemInputs
	}
	return nil
}

func init() {
	proto.RegisterType((*ItemRef)(nil), "Pylonstech.pylons.pylons.ItemRef")
	proto.RegisterType((*Trade)(nil), "Pylonstech.pylons.pylons.Trade")
}

func init() { proto.RegisterFile("pylons/trade.proto", fileDescriptor_b14272a2f758ba6f) }

var fileDescriptor_b14272a2f758ba6f = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x4d, 0x0b, 0x13, 0x31,
	0x10, 0xdd, 0xed, 0xf7, 0xa6, 0x20, 0x12, 0x45, 0x62, 0x91, 0x58, 0xeb, 0xa5, 0x07, 0xcd, 0xd2,
	0x7a, 0x16, 0xb1, 0x16, 0x21, 0x27, 0x65, 0xf5, 0xe4, 0x6d, 0x37, 0x4d, 0xdb, 0xa5, 0xee, 0xce,
	0x92, 0x4d, 0x4b, 0xfb, 0x2f, 0xfc, 0x59, 0x3d, 0xf6, 0x24, 0x9e, 0x44, 0xda, 0x3f, 0x22, 0xc9,
	0xa6, 0x76, 0x41, 0x14, 0x3d, 0x65, 0xde, 0x4c, 0xde, 0x9b, 0x37, 0xc3, 0x20, 0x5c, 0x1c, 0x3e,
	0x43, 0x5e, 0x86, 0x5a, 0xc5, 0x0b, 0xc9, 0x0a, 0x05, 0x1a, 0x30, 0x79, 0x6f, 0x73, 0x5a, 0x8a,
	0x35, 0xab, 0xca, 0xee, 0x19, 0x50, 0x01, 0x65, 0x06, 0x65, 0x98, 0xc4, 0xa5, 0x0c, 0x77, 0x93,
	0x44, 0xea, 0x78, 0x12, 0x0a, 0x48, 0xf3, 0x8a, 0x39, 0xb8, 0xbf, 0x82, 0x15, 0xd8, 0x30, 0x34,
	0x91, 0xcb, 0xde, 0x73, 0x3d, 0x94, 0x14, 0x69, 0xe1, 0x9a, 0x8c, 0x5e, 0xa3, 0x2e, 0xd7, 0x32,
	0x8b, 0xe4, 0x12, 0x53, 0x84, 0x04, 0xc0, 0x26, 0x01, 0xd8, 0xf0, 0x39, 0xf1, 0x87, 0xfe, 0x38,
	0x88, 0x6a, 0x19, 0xfc, 0x00, 0x75, 0x52, 0x2d, 0x33, 0x3e, 0x27, 0x0d, 0x5b, 0x73, 0x68, 0xf4,
	0xb5, 0x89, 0xda, 0x1f, 0x8d, 0x6f, 0x4c, 0x50, 0x57, 0x28, 0x19, 0x6b, 0x50, 0x8e, 0x7e, 0x85,
	0xf8, 0x0e, 0x6a, 0x38, 0x5e, 0x2b, 0x6a, 0xf0, 0x39, 0x7e, 0x89, 0x02, 0xe3, 0x97, 0xe7, 0xc5,
	0x56, 0x93, 0xe6, 0xd0, 0x1f, 0xf7, 0xa7, 0x0f, 0x59, 0x35, 0x15, 0x33, 0x53, 0x31, 0x37, 0x15,
	0x7b, 0x03, 0x69, 0x3e, 0x6b, 0x1d, 0xbf, 0x3f, 0xf6, 0xa2, 0x1b, 0x03, 0x73, 0x84, 0x6c, 0x73,
	0x03, 0x4a, 0xd2, 0x1a, 0x36, 0xc7, 0xfd, 0xe9, 0x53, 0xf6, 0xa7, 0x7d, 0x31, 0x7e, 0xfd, 0xeb,
	0x94, 0x6a, 0x64, 0xfc, 0xca, 0x4c, 0x9d, 0xe6, 0xef, 0xb6, 0xda, 0x58, 0x69, 0xff, 0x9b, 0x95,
	0x1a, 0x05, 0x73, 0xd4, 0x37, 0x72, 0x15, 0x2a, 0x49, 0xc7, 0x9a, 0x79, 0xf2, 0x77, 0x33, 0x91,
	0x5c, 0x3a, 0xa5, 0x3a, 0x17, 0x3f, 0x42, 0x81, 0xdc, 0x6b, 0x15, 0xf3, 0x7c, 0x09, 0xa4, 0x6b,
	0x37, 0x78, 0x4b, 0xe0, 0x01, 0xea, 0x29, 0x29, 0x64, 0xba, 0x93, 0x8a, 0xf4, 0x6c, 0xf1, 0x17,
	0xc6, 0x1f, 0xd0, 0x5d, 0x7b, 0x3a, 0x0b, 0x7e, 0x5b, 0x4b, 0xf0, 0x7f, 0x4e, 0x7e, 0x13, 0x98,
	0xbd, 0x3d, 0x9e, 0xa9, 0x7f, 0x3a, 0x53, 0xff, 0xc7, 0x99, 0xfa, 0x5f, 0x2e, 0xd4, 0x3b, 0x5d,
	0xa8, 0xf7, 0xed, 0x42, 0xbd, 0x4f, 0xcf, 0x56, 0xa9, 0x5e, 0x6f, 0x13, 0x26, 0x20, 0x0b, 0x2b,
	0xf9, 0xe7, 0x46, 0x3f, 0x74, 0x17, 0xb6, 0xbf, 0x06, 0xfa, 0x50, 0xc8, 0x32, 0xe9, 0xd8, 0x53,
	0x7b, 0xf1, 0x33, 0x00, 0x00, 0xff, 0xff, 0x13, 0x5e, 0x24, 0x84, 0xe5, 0x02, 0x00, 0x00,
}

func (m *ItemRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ItemID) > 0 {
		i -= len(m.ItemID)
		copy(dAtA[i:], m.ItemID)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.ItemID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CookbookID) > 0 {
		i -= len(m.CookbookID)
		copy(dAtA[i:], m.CookbookID)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.CookbookID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Trade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Trade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Trade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TradedItemInputs) > 0 {
		for iNdEx := len(m.TradedItemInputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TradedItemInputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrade(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ExtraInfo) > 0 {
		i -= len(m.ExtraInfo)
		copy(dAtA[i:], m.ExtraInfo)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.ExtraInfo)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ItemOutputs) > 0 {
		for iNdEx := len(m.ItemOutputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ItemOutputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrade(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size, err := m.CoinOutput.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.ItemInputs) > 0 {
		for iNdEx := len(m.ItemInputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ItemInputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrade(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.CoinInput.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ID != 0 {
		i = encodeVarintTrade(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTrade(dAtA []byte, offset int, v uint64) int {
	offset -= sovTrade(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ItemRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CookbookID)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	l = len(m.ItemID)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	return n
}

func (m *Trade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovTrade(uint64(m.ID))
	}
	l = m.CoinInput.Size()
	n += 1 + l + sovTrade(uint64(l))
	if len(m.ItemInputs) > 0 {
		for _, e := range m.ItemInputs {
			l = e.Size()
			n += 1 + l + sovTrade(uint64(l))
		}
	}
	l = m.CoinOutput.Size()
	n += 1 + l + sovTrade(uint64(l))
	if len(m.ItemOutputs) > 0 {
		for _, e := range m.ItemOutputs {
			l = e.Size()
			n += 1 + l + sovTrade(uint64(l))
		}
	}
	l = len(m.ExtraInfo)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	if len(m.TradedItemInputs) > 0 {
		for _, e := range m.TradedItemInputs {
			l = e.Size()
			n += 1 + l + sovTrade(uint64(l))
		}
	}
	return n
}

func sovTrade(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTrade(x uint64) (n int) {
	return sovTrade(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ItemRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookbookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CookbookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Trade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinInput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoinInput.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemInputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemInputs = append(m.ItemInputs, ItemInput{})
			if err := m.ItemInputs[len(m.ItemInputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinOutput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoinOutput.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemOutputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemOutputs = append(m.ItemOutputs, ItemRef{})
			if err := m.ItemOutputs[len(m.ItemOutputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradedItemInputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradedItemInputs = append(m.TradedItemInputs, ItemRef{})
			if err := m.TradedItemInputs[len(m.TradedItemInputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTrade(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTrade
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTrade
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTrade
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTrade
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTrade        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTrade          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTrade = fmt.Errorf("proto: unexpected end of group")
)
