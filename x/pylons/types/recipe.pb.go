// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pylons/pylons/recipe.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DoubleInputParam describes the bounds on an item input/output parameter of type float64
type DoubleInputParam struct {
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The minimum legal value of this parameter.
	MinValue github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=min_value,json=minValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"min_value"`
	// The maximum legal value of this parameter.
	MaxValue github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=max_value,json=maxValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_value"`
}

func (m *DoubleInputParam) Reset()         { *m = DoubleInputParam{} }
func (m *DoubleInputParam) String() string { return proto.CompactTextString(m) }
func (*DoubleInputParam) ProtoMessage()    {}
func (*DoubleInputParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7afbd12656b9308, []int{0}
}
func (m *DoubleInputParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoubleInputParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoubleInputParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoubleInputParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoubleInputParam.Merge(m, src)
}
func (m *DoubleInputParam) XXX_Size() int {
	return m.Size()
}
func (m *DoubleInputParam) XXX_DiscardUnknown() {
	xxx_messageInfo_DoubleInputParam.DiscardUnknown(m)
}

var xxx_messageInfo_DoubleInputParam proto.InternalMessageInfo

func (m *DoubleInputParam) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// LongInputParam describes the bounds on an item input/output parameter of type int64
type LongInputParam struct {
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The minimum legal value of this parameter.
	MinValue int64 `protobuf:"varint,2,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	// The maximum legal value of this parameter.
	MaxValue int64 `protobuf:"varint,3,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
}

func (m *LongInputParam) Reset()         { *m = LongInputParam{} }
func (m *LongInputParam) String() string { return proto.CompactTextString(m) }
func (*LongInputParam) ProtoMessage()    {}
func (*LongInputParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7afbd12656b9308, []int{1}
}
func (m *LongInputParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LongInputParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LongInputParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LongInputParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LongInputParam.Merge(m, src)
}
func (m *LongInputParam) XXX_Size() int {
	return m.Size()
}
func (m *LongInputParam) XXX_DiscardUnknown() {
	xxx_messageInfo_LongInputParam.DiscardUnknown(m)
}

var xxx_messageInfo_LongInputParam proto.InternalMessageInfo

func (m *LongInputParam) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *LongInputParam) GetMinValue() int64 {
	if m != nil {
		return m.MinValue
	}
	return 0
}

func (m *LongInputParam) GetMaxValue() int64 {
	if m != nil {
		return m.MaxValue
	}
	return 0
}

// StringInputParam describes the bounds on an item input/output parameter of type string
type StringInputParam struct {
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The value of the parameter
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *StringInputParam) Reset()         { *m = StringInputParam{} }
func (m *StringInputParam) String() string { return proto.CompactTextString(m) }
func (*StringInputParam) ProtoMessage()    {}
func (*StringInputParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7afbd12656b9308, []int{2}
}
func (m *StringInputParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringInputParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringInputParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StringInputParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringInputParam.Merge(m, src)
}
func (m *StringInputParam) XXX_Size() int {
	return m.Size()
}
func (m *StringInputParam) XXX_DiscardUnknown() {
	xxx_messageInfo_StringInputParam.DiscardUnknown(m)
}

var xxx_messageInfo_StringInputParam proto.InternalMessageInfo

func (m *StringInputParam) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *StringInputParam) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// ItemInput is a struct for describing an input item
type ItemInput struct {
	Id      string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Doubles []DoubleInputParam `protobuf:"bytes,2,rep,name=doubles,proto3" json:"doubles"`
	Longs   []LongInputParam   `protobuf:"bytes,3,rep,name=longs,proto3" json:"longs"`
	Strings []StringInputParam `protobuf:"bytes,4,rep,name=strings,proto3" json:"strings"`
}

func (m *ItemInput) Reset()         { *m = ItemInput{} }
func (m *ItemInput) String() string { return proto.CompactTextString(m) }
func (*ItemInput) ProtoMessage()    {}
func (*ItemInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7afbd12656b9308, []int{3}
}
func (m *ItemInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemInput.Merge(m, src)
}
func (m *ItemInput) XXX_Size() int {
	return m.Size()
}
func (m *ItemInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemInput.DiscardUnknown(m)
}

var xxx_messageInfo_ItemInput proto.InternalMessageInfo

func (m *ItemInput) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ItemInput) GetDoubles() []DoubleInputParam {
	if m != nil {
		return m.Doubles
	}
	return nil
}

func (m *ItemInput) GetLongs() []LongInputParam {
	if m != nil {
		return m.Longs
	}
	return nil
}

func (m *ItemInput) GetStrings() []StringInputParam {
	if m != nil {
		return m.Strings
	}
	return nil
}

// DoubleWeightRange describes weight range that produce double value
type DoubleWeightRange struct {
	Lower  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=lower,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"lower"`
	Upper  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=upper,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"upper"`
	Weight uint64                                 `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty,string"`
}

func (m *DoubleWeightRange) Reset()         { *m = DoubleWeightRange{} }
func (m *DoubleWeightRange) String() string { return proto.CompactTextString(m) }
func (*DoubleWeightRange) ProtoMessage()    {}
func (*DoubleWeightRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7afbd12656b9308, []int{4}
}
func (m *DoubleWeightRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoubleWeightRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoubleWeightRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoubleWeightRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoubleWeightRange.Merge(m, src)
}
func (m *DoubleWeightRange) XXX_Size() int {
	return m.Size()
}
func (m *DoubleWeightRange) XXX_DiscardUnknown() {
	xxx_messageInfo_DoubleWeightRange.DiscardUnknown(m)
}

var xxx_messageInfo_DoubleWeightRange proto.InternalMessageInfo

func (m *DoubleWeightRange) GetWeight() uint64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

// DoubleParam describes the bounds on an item input/output parameter of type float64
type DoubleParam struct {
	Key          string              `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	WeightRanges []DoubleWeightRange `protobuf:"bytes,2,rep,name=weightRanges,proto3" json:"weightRanges"`
	// When program is not empty, weightRanges is ignored
	Program string `protobuf:"bytes,3,opt,name=program,proto3" json:"program,omitempty"`
}

func (m *DoubleParam) Reset()         { *m = DoubleParam{} }
func (m *DoubleParam) String() string { return proto.CompactTextString(m) }
func (*DoubleParam) ProtoMessage()    {}
func (*DoubleParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7afbd12656b9308, []int{5}
}
func (m *DoubleParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoubleParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoubleParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoubleParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoubleParam.Merge(m, src)
}
func (m *DoubleParam) XXX_Size() int {
	return m.Size()
}
func (m *DoubleParam) XXX_DiscardUnknown() {
	xxx_messageInfo_DoubleParam.DiscardUnknown(m)
}

var xxx_messageInfo_DoubleParam proto.InternalMessageInfo

func (m *DoubleParam) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DoubleParam) GetWeightRanges() []DoubleWeightRange {
	if m != nil {
		return m.WeightRanges
	}
	return nil
}

func (m *DoubleParam) GetProgram() string {
	if m != nil {
		return m.Program
	}
	return ""
}

// IntWeightRange describes weight range that produce int value
type IntWeightRange struct {
	Lower  int64  `protobuf:"varint,1,opt,name=lower,proto3" json:"lower,omitempty,string"`
	Upper  int64  `protobuf:"varint,2,opt,name=upper,proto3" json:"upper,omitempty,string"`
	Weight uint64 `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty,string"`
}

func (m *IntWeightRange) Reset()         { *m = IntWeightRange{} }
func (m *IntWeightRange) String() string { return proto.CompactTextString(m) }
func (*IntWeightRange) ProtoMessage()    {}
func (*IntWeightRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7afbd12656b9308, []int{6}
}
func (m *IntWeightRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IntWeightRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IntWeightRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IntWeightRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntWeightRange.Merge(m, src)
}
func (m *IntWeightRange) XXX_Size() int {
	return m.Size()
}
func (m *IntWeightRange) XXX_DiscardUnknown() {
	xxx_messageInfo_IntWeightRange.DiscardUnknown(m)
}

var xxx_messageInfo_IntWeightRange proto.InternalMessageInfo

func (m *IntWeightRange) GetLower() int64 {
	if m != nil {
		return m.Lower
	}
	return 0
}

func (m *IntWeightRange) GetUpper() int64 {
	if m != nil {
		return m.Upper
	}
	return 0
}

func (m *IntWeightRange) GetWeight() uint64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

// LongParam describes the bounds on an item input/output parameter of type int64
type LongParam struct {
	Key          string           `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	WeightRanges []IntWeightRange `protobuf:"bytes,2,rep,name=weightRanges,proto3" json:"weightRanges"`
	// When program is not empty, weightRanges is ignored
	Program string `protobuf:"bytes,3,opt,name=program,proto3" json:"program,omitempty"`
}

func (m *LongParam) Reset()         { *m = LongParam{} }
func (m *LongParam) String() string { return proto.CompactTextString(m) }
func (*LongParam) ProtoMessage()    {}
func (*LongParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7afbd12656b9308, []int{7}
}
func (m *LongParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LongParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LongParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LongParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LongParam.Merge(m, src)
}
func (m *LongParam) XXX_Size() int {
	return m.Size()
}
func (m *LongParam) XXX_DiscardUnknown() {
	xxx_messageInfo_LongParam.DiscardUnknown(m)
}

var xxx_messageInfo_LongParam proto.InternalMessageInfo

func (m *LongParam) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *LongParam) GetWeightRanges() []IntWeightRange {
	if m != nil {
		return m.WeightRanges
	}
	return nil
}

func (m *LongParam) GetProgram() string {
	if m != nil {
		return m.Program
	}
	return ""
}

// StringParam describes an item input/output parameter of type string
type StringParam struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// When program is not empty, value is ignored
	Program string `protobuf:"bytes,3,opt,name=program,proto3" json:"program,omitempty"`
}

func (m *StringParam) Reset()         { *m = StringParam{} }
func (m *StringParam) String() string { return proto.CompactTextString(m) }
func (*StringParam) ProtoMessage()    {}
func (*StringParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7afbd12656b9308, []int{8}
}
func (m *StringParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StringParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringParam.Merge(m, src)
}
func (m *StringParam) XXX_Size() int {
	return m.Size()
}
func (m *StringParam) XXX_DiscardUnknown() {
	xxx_messageInfo_StringParam.DiscardUnknown(m)
}

var xxx_messageInfo_StringParam proto.InternalMessageInfo

func (m *StringParam) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *StringParam) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *StringParam) GetProgram() string {
	if m != nil {
		return m.Program
	}
	return ""
}

// CoinOutput models the continuum of valid outcomes for coin generation in recipes
type CoinOutput struct {
	Id      string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Coin    types.Coin `protobuf:"bytes,2,opt,name=coin,proto3" json:"coin"`
	Program string     `protobuf:"bytes,3,opt,name=program,proto3" json:"program,omitempty"`
}

func (m *CoinOutput) Reset()         { *m = CoinOutput{} }
func (m *CoinOutput) String() string { return proto.CompactTextString(m) }
func (*CoinOutput) ProtoMessage()    {}
func (*CoinOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7afbd12656b9308, []int{9}
}
func (m *CoinOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinOutput.Merge(m, src)
}
func (m *CoinOutput) XXX_Size() int {
	return m.Size()
}
func (m *CoinOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinOutput.DiscardUnknown(m)
}

var xxx_messageInfo_CoinOutput proto.InternalMessageInfo

func (m *CoinOutput) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CoinOutput) GetCoin() types.Coin {
	if m != nil {
		return m.Coin
	}
	return types.Coin{}
}

func (m *CoinOutput) GetProgram() string {
	if m != nil {
		return m.Program
	}
	return ""
}

// ItemOutput models the continuum of valid outcomes for item generation in recipes
type ItemOutput struct {
	Id      string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Doubles []DoubleParam `protobuf:"bytes,2,rep,name=doubles,proto3" json:"doubles"`
	Longs   []LongParam   `protobuf:"bytes,3,rep,name=longs,proto3" json:"longs"`
	Strings []StringParam `protobuf:"bytes,4,rep,name=strings,proto3" json:"strings"`
	// defines a list of mutable strings whose value can be customized by the user
	MutableStrings []StringKeyValue `protobuf:"bytes,5,rep,name=mutable_strings,json=mutableStrings,proto3" json:"mutable_strings"`
	TransferFee    []types.Coin     `protobuf:"bytes,6,rep,name=transfer_fee,json=transferFee,proto3" json:"transfer_fee"`
	// The percentage of a trade sale retained by the cookbook owner. In the range (0.0, 1.0).
	TradePercentage github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=trade_percentage,json=tradePercentage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"trade_percentage"`
	// quantity defines the maximum amount of these items that can be created. A 0 value indicates an infinite supply
	Quantity     uint64 `protobuf:"varint,8,opt,name=quantity,proto3" json:"quantity,omitempty,string"`
	AmountMinted uint64 `protobuf:"varint,9,opt,name=amount_minted,json=amountMinted,proto3" json:"amount_minted,omitempty,string"`
	Tradeable    bool   `protobuf:"varint,10,opt,name=tradeable,proto3" json:"tradeable,omitempty"`
}

func (m *ItemOutput) Reset()         { *m = ItemOutput{} }
func (m *ItemOutput) String() string { return proto.CompactTextString(m) }
func (*ItemOutput) ProtoMessage()    {}
func (*ItemOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7afbd12656b9308, []int{10}
}
func (m *ItemOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemOutput.Merge(m, src)
}
func (m *ItemOutput) XXX_Size() int {
	return m.Size()
}
func (m *ItemOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemOutput.DiscardUnknown(m)
}

var xxx_messageInfo_ItemOutput proto.InternalMessageInfo

func (m *ItemOutput) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ItemOutput) GetDoubles() []DoubleParam {
	if m != nil {
		return m.Doubles
	}
	return nil
}

func (m *ItemOutput) GetLongs() []LongParam {
	if m != nil {
		return m.Longs
	}
	return nil
}

func (m *ItemOutput) GetStrings() []StringParam {
	if m != nil {
		return m.Strings
	}
	return nil
}

func (m *ItemOutput) GetMutableStrings() []StringKeyValue {
	if m != nil {
		return m.MutableStrings
	}
	return nil
}

func (m *ItemOutput) GetTransferFee() []types.Coin {
	if m != nil {
		return m.TransferFee
	}
	return nil
}

func (m *ItemOutput) GetQuantity() uint64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *ItemOutput) GetAmountMinted() uint64 {
	if m != nil {
		return m.AmountMinted
	}
	return 0
}

func (m *ItemOutput) GetTradeable() bool {
	if m != nil {
		return m.Tradeable
	}
	return false
}

// ItemModifyOutput describes what is modified from item input
type ItemModifyOutput struct {
	Id           string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ItemInputRef string        `protobuf:"bytes,2,opt,name=item_input_ref,json=itemInputRef,proto3" json:"item_input_ref,omitempty"`
	Doubles      []DoubleParam `protobuf:"bytes,3,rep,name=doubles,proto3" json:"doubles"`
	Longs        []LongParam   `protobuf:"bytes,4,rep,name=longs,proto3" json:"longs"`
	Strings      []StringParam `protobuf:"bytes,5,rep,name=strings,proto3" json:"strings"`
	// defines a list of mutable strings whose value can be customized by the user
	MutableStrings []StringKeyValue `protobuf:"bytes,6,rep,name=mutable_strings,json=mutableStrings,proto3" json:"mutable_strings"`
	TransferFee    []types.Coin     `protobuf:"bytes,7,rep,name=transfer_fee,json=transferFee,proto3" json:"transfer_fee"`
	// The percentage of a trade sale retained by the cookbook owner. In the range (0.0, 1.0).
	TradePercentage github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=trade_percentage,json=tradePercentage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"trade_percentage"`
	// quantity defines the maximum amount of these items that can be created. A 0 value indicates an infinite supply
	Quantity     uint64 `protobuf:"varint,9,opt,name=quantity,proto3" json:"quantity,omitempty,string"`
	AmountMinted uint64 `protobuf:"varint,10,opt,name=amount_minted,json=amountMinted,proto3" json:"amount_minted,omitempty,string"`
	Tradeable    bool   `protobuf:"varint,11,opt,name=tradeable,proto3" json:"tradeable,omitempty"`
}

func (m *ItemModifyOutput) Reset()         { *m = ItemModifyOutput{} }
func (m *ItemModifyOutput) String() string { return proto.CompactTextString(m) }
func (*ItemModifyOutput) ProtoMessage()    {}
func (*ItemModifyOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7afbd12656b9308, []int{11}
}
func (m *ItemModifyOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemModifyOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemModifyOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemModifyOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemModifyOutput.Merge(m, src)
}
func (m *ItemModifyOutput) XXX_Size() int {
	return m.Size()
}
func (m *ItemModifyOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemModifyOutput.DiscardUnknown(m)
}

var xxx_messageInfo_ItemModifyOutput proto.InternalMessageInfo

func (m *ItemModifyOutput) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ItemModifyOutput) GetItemInputRef() string {
	if m != nil {
		return m.ItemInputRef
	}
	return ""
}

func (m *ItemModifyOutput) GetDoubles() []DoubleParam {
	if m != nil {
		return m.Doubles
	}
	return nil
}

func (m *ItemModifyOutput) GetLongs() []LongParam {
	if m != nil {
		return m.Longs
	}
	return nil
}

func (m *ItemModifyOutput) GetStrings() []StringParam {
	if m != nil {
		return m.Strings
	}
	return nil
}

func (m *ItemModifyOutput) GetMutableStrings() []StringKeyValue {
	if m != nil {
		return m.MutableStrings
	}
	return nil
}

func (m *ItemModifyOutput) GetTransferFee() []types.Coin {
	if m != nil {
		return m.TransferFee
	}
	return nil
}

func (m *ItemModifyOutput) GetQuantity() uint64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *ItemModifyOutput) GetAmountMinted() uint64 {
	if m != nil {
		return m.AmountMinted
	}
	return 0
}

func (m *ItemModifyOutput) GetTradeable() bool {
	if m != nil {
		return m.Tradeable
	}
	return false
}

// EntriesList is a struct to keep list of items and coins
type EntriesList struct {
	CoinOutputs       []CoinOutput       `protobuf:"bytes,1,rep,name=coin_outputs,json=coinOutputs,proto3" json:"coin_outputs"`
	ItemOutputs       []ItemOutput       `protobuf:"bytes,2,rep,name=item_outputs,json=itemOutputs,proto3" json:"item_outputs"`
	ItemModifyOutputs []ItemModifyOutput `protobuf:"bytes,3,rep,name=item_modify_outputs,json=itemModifyOutputs,proto3" json:"item_modify_outputs"`
}

func (m *EntriesList) Reset()         { *m = EntriesList{} }
func (m *EntriesList) String() string { return proto.CompactTextString(m) }
func (*EntriesList) ProtoMessage()    {}
func (*EntriesList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7afbd12656b9308, []int{12}
}
func (m *EntriesList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntriesList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntriesList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntriesList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntriesList.Merge(m, src)
}
func (m *EntriesList) XXX_Size() int {
	return m.Size()
}
func (m *EntriesList) XXX_DiscardUnknown() {
	xxx_messageInfo_EntriesList.DiscardUnknown(m)
}

var xxx_messageInfo_EntriesList proto.InternalMessageInfo

func (m *EntriesList) GetCoinOutputs() []CoinOutput {
	if m != nil {
		return m.CoinOutputs
	}
	return nil
}

func (m *EntriesList) GetItemOutputs() []ItemOutput {
	if m != nil {
		return m.ItemOutputs
	}
	return nil
}

func (m *EntriesList) GetItemModifyOutputs() []ItemModifyOutput {
	if m != nil {
		return m.ItemModifyOutputs
	}
	return nil
}

// WeightedOutputs is to make structs which is using weight to be based on
type WeightedOutputs struct {
	EntryIds []string `protobuf:"bytes,1,rep,name=entry_ids,json=entryIds,proto3" json:"entry_ids,omitempty"`
	Weight   uint64   `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty,string"`
}

func (m *WeightedOutputs) Reset()         { *m = WeightedOutputs{} }
func (m *WeightedOutputs) String() string { return proto.CompactTextString(m) }
func (*WeightedOutputs) ProtoMessage()    {}
func (*WeightedOutputs) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7afbd12656b9308, []int{13}
}
func (m *WeightedOutputs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeightedOutputs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeightedOutputs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeightedOutputs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeightedOutputs.Merge(m, src)
}
func (m *WeightedOutputs) XXX_Size() int {
	return m.Size()
}
func (m *WeightedOutputs) XXX_DiscardUnknown() {
	xxx_messageInfo_WeightedOutputs.DiscardUnknown(m)
}

var xxx_messageInfo_WeightedOutputs proto.InternalMessageInfo

func (m *WeightedOutputs) GetEntryIds() []string {
	if m != nil {
		return m.EntryIds
	}
	return nil
}

func (m *WeightedOutputs) GetWeight() uint64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type CoinInput struct {
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *CoinInput) Reset()         { *m = CoinInput{} }
func (m *CoinInput) String() string { return proto.CompactTextString(m) }
func (*CoinInput) ProtoMessage()    {}
func (*CoinInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7afbd12656b9308, []int{14}
}
func (m *CoinInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinInput.Merge(m, src)
}
func (m *CoinInput) XXX_Size() int {
	return m.Size()
}
func (m *CoinInput) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinInput.DiscardUnknown(m)
}

var xxx_messageInfo_CoinInput proto.InternalMessageInfo

func (m *CoinInput) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

type Recipe struct {
	CookbookId    string            `protobuf:"bytes,1,opt,name=cookbook_id,json=cookbookId,proto3" json:"cookbook_id,omitempty"`
	Id            string            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	NodeVersion   uint64            `protobuf:"varint,3,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	Name          string            `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description   string            `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Version       string            `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	CoinInputs    []CoinInput       `protobuf:"bytes,7,rep,name=coin_inputs,json=coinInputs,proto3" json:"coin_inputs"`
	ItemInputs    []ItemInput       `protobuf:"bytes,8,rep,name=item_inputs,json=itemInputs,proto3" json:"item_inputs"`
	Entries       EntriesList       `protobuf:"bytes,9,opt,name=entries,proto3" json:"entries"`
	Outputs       []WeightedOutputs `protobuf:"bytes,10,rep,name=outputs,proto3" json:"outputs"`
	BlockInterval int64             `protobuf:"varint,11,opt,name=block_interval,json=blockInterval,proto3" json:"block_interval,omitempty"`
	CostPerBlock  types.Coin        `protobuf:"bytes,12,opt,name=cost_per_block,json=costPerBlock,proto3" json:"cost_per_block"`
	Enabled       bool              `protobuf:"varint,13,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ExtraInfo     string            `protobuf:"bytes,14,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
	CreatedAt     int64             `protobuf:"varint,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     int64             `protobuf:"varint,16,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (m *Recipe) Reset()         { *m = Recipe{} }
func (m *Recipe) String() string { return proto.CompactTextString(m) }
func (*Recipe) ProtoMessage()    {}
func (*Recipe) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7afbd12656b9308, []int{15}
}
func (m *Recipe) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Recipe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Recipe.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Recipe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recipe.Merge(m, src)
}
func (m *Recipe) XXX_Size() int {
	return m.Size()
}
func (m *Recipe) XXX_DiscardUnknown() {
	xxx_messageInfo_Recipe.DiscardUnknown(m)
}

var xxx_messageInfo_Recipe proto.InternalMessageInfo

func (m *Recipe) GetCookbookId() string {
	if m != nil {
		return m.CookbookId
	}
	return ""
}

func (m *Recipe) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Recipe) GetNodeVersion() uint64 {
	if m != nil {
		return m.NodeVersion
	}
	return 0
}

func (m *Recipe) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Recipe) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Recipe) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Recipe) GetCoinInputs() []CoinInput {
	if m != nil {
		return m.CoinInputs
	}
	return nil
}

func (m *Recipe) GetItemInputs() []ItemInput {
	if m != nil {
		return m.ItemInputs
	}
	return nil
}

func (m *Recipe) GetEntries() EntriesList {
	if m != nil {
		return m.Entries
	}
	return EntriesList{}
}

func (m *Recipe) GetOutputs() []WeightedOutputs {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *Recipe) GetBlockInterval() int64 {
	if m != nil {
		return m.BlockInterval
	}
	return 0
}

func (m *Recipe) GetCostPerBlock() types.Coin {
	if m != nil {
		return m.CostPerBlock
	}
	return types.Coin{}
}

func (m *Recipe) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Recipe) GetExtraInfo() string {
	if m != nil {
		return m.ExtraInfo
	}
	return ""
}

func (m *Recipe) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Recipe) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func init() {
	proto.RegisterType((*DoubleInputParam)(nil), "pylons.pylons.DoubleInputParam")
	proto.RegisterType((*LongInputParam)(nil), "pylons.pylons.LongInputParam")
	proto.RegisterType((*StringInputParam)(nil), "pylons.pylons.StringInputParam")
	proto.RegisterType((*ItemInput)(nil), "pylons.pylons.ItemInput")
	proto.RegisterType((*DoubleWeightRange)(nil), "pylons.pylons.DoubleWeightRange")
	proto.RegisterType((*DoubleParam)(nil), "pylons.pylons.DoubleParam")
	proto.RegisterType((*IntWeightRange)(nil), "pylons.pylons.IntWeightRange")
	proto.RegisterType((*LongParam)(nil), "pylons.pylons.LongParam")
	proto.RegisterType((*StringParam)(nil), "pylons.pylons.StringParam")
	proto.RegisterType((*CoinOutput)(nil), "pylons.pylons.CoinOutput")
	proto.RegisterType((*ItemOutput)(nil), "pylons.pylons.ItemOutput")
	proto.RegisterType((*ItemModifyOutput)(nil), "pylons.pylons.ItemModifyOutput")
	proto.RegisterType((*EntriesList)(nil), "pylons.pylons.EntriesList")
	proto.RegisterType((*WeightedOutputs)(nil), "pylons.pylons.WeightedOutputs")
	proto.RegisterType((*CoinInput)(nil), "pylons.pylons.CoinInput")
	proto.RegisterType((*Recipe)(nil), "pylons.pylons.Recipe")
}

func init() { proto.RegisterFile("pylons/pylons/recipe.proto", fileDescriptor_b7afbd12656b9308) }

var fileDescriptor_b7afbd12656b9308 = []byte{
	// 1279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcb, 0x6e, 0xdb, 0x46,
	0x14, 0x35, 0xf5, 0xb0, 0xc5, 0x2b, 0x59, 0x76, 0xa6, 0x41, 0xcb, 0x38, 0x8d, 0xe4, 0x08, 0x6d,
	0xe1, 0x45, 0x22, 0xe5, 0xd1, 0x4d, 0xb2, 0x68, 0x10, 0x35, 0x0f, 0xa8, 0x49, 0x10, 0x83, 0x41,
	0x53, 0xb4, 0x28, 0x40, 0x50, 0xe4, 0x48, 0x19, 0x48, 0x9c, 0x61, 0xc9, 0x91, 0x63, 0xed, 0xba,
	0xc9, 0xba, 0xfd, 0x8d, 0xf6, 0x23, 0xba, 0xce, 0x32, 0x8b, 0x2e, 0xd2, 0x2e, 0xd4, 0x22, 0xd9,
	0x19, 0xfd, 0x88, 0x62, 0x1e, 0x94, 0x28, 0x9a, 0xce, 0xc3, 0xf1, 0x4a, 0xe4, 0xbd, 0x3c, 0x67,
	0x66, 0xee, 0x3d, 0xf7, 0x90, 0x82, 0xad, 0x70, 0x3a, 0x66, 0x34, 0xee, 0xe8, 0x9f, 0x08, 0x7b,
	0x24, 0xc4, 0xed, 0x30, 0x62, 0x9c, 0xa1, 0x75, 0x15, 0x6c, 0xab, 0x9f, 0xad, 0xd3, 0x43, 0x36,
	0x64, 0x32, 0xd3, 0x11, 0x57, 0xea, 0xa1, 0xad, 0x86, 0xc7, 0xe2, 0x80, 0xc5, 0x9d, 0xbe, 0x1b,
	0xe3, 0xce, 0xde, 0xe5, 0x3e, 0xe6, 0xee, 0xe5, 0x8e, 0xc7, 0x08, 0xd5, 0x79, 0x6b, 0x79, 0x01,
	0xc2, 0x71, 0xa0, 0x32, 0xad, 0x3f, 0x0c, 0xd8, 0xbc, 0xc5, 0x26, 0xfd, 0x31, 0xee, 0xd1, 0x70,
	0xc2, 0x77, 0xdd, 0xc8, 0x0d, 0xd0, 0x26, 0x14, 0x47, 0x78, 0x6a, 0x19, 0xdb, 0xc6, 0x8e, 0x69,
	0x8b, 0x4b, 0x74, 0x0f, 0xcc, 0x80, 0x50, 0x67, 0xcf, 0x1d, 0x4f, 0xb0, 0x55, 0x10, 0xf1, 0x6e,
	0xfb, 0xf9, 0xac, 0xb9, 0xf2, 0xf7, 0xac, 0xf9, 0xc5, 0x90, 0xf0, 0x27, 0x93, 0x7e, 0xdb, 0x63,
	0x41, 0x47, 0x6f, 0x43, 0xfd, 0x5c, 0x8c, 0xfd, 0x51, 0x87, 0x4f, 0x43, 0x1c, 0xb7, 0x6f, 0x61,
	0xcf, 0xae, 0x04, 0x84, 0x3e, 0x16, 0x78, 0x49, 0xe6, 0xee, 0x6b, 0xb2, 0xe2, 0x31, 0xc9, 0xdc,
	0x7d, 0x49, 0xd6, 0xfa, 0x11, 0xea, 0xf7, 0x19, 0x1d, 0xbe, 0x71, 0xf7, 0x67, 0xb3, 0xbb, 0x2f,
	0xa6, 0x76, 0x73, 0x36, 0xbb, 0x9b, 0x62, 0x8a, 0xfd, 0x3a, 0x6c, 0x3e, 0xe2, 0x11, 0x79, 0x0b,
	0xff, 0x69, 0x28, 0xa7, 0x2a, 0x63, 0xab, 0x9b, 0xd6, 0x4b, 0x03, 0xcc, 0x1e, 0xc7, 0x81, 0x84,
	0xa2, 0x3a, 0x14, 0x88, 0xaf, 0x41, 0x05, 0xe2, 0xa3, 0x1b, 0xb0, 0xe6, 0xcb, 0xba, 0xc7, 0x56,
	0x61, 0xbb, 0xb8, 0x53, 0xbd, 0xd2, 0x6c, 0x2f, 0x75, 0xba, 0x9d, 0xed, 0x4a, 0xb7, 0x24, 0x6a,
	0x64, 0x27, 0x28, 0x74, 0x0d, 0xca, 0x63, 0x46, 0x87, 0xb1, 0x55, 0x94, 0xf0, 0x73, 0x19, 0xf8,
	0x72, 0x51, 0x34, 0x58, 0x21, 0xc4, 0xda, 0xb1, 0x3c, 0x55, 0x6c, 0x95, 0x72, 0xd7, 0xce, 0x9e,
	0x39, 0x59, 0x5b, 0xa3, 0x5a, 0x7f, 0x1a, 0x70, 0x4a, 0xed, 0xef, 0x3b, 0x4c, 0x86, 0x4f, 0xb8,
	0xed, 0xd2, 0x21, 0x46, 0xb7, 0xc4, 0x8e, 0x9e, 0xe2, 0x48, 0x9d, 0xf2, 0xbd, 0x7b, 0xaa, 0xc0,
	0x82, 0x65, 0x12, 0x86, 0x38, 0x3a, 0xa6, 0xcc, 0x14, 0x18, 0x5d, 0x85, 0xd5, 0xa7, 0x72, 0x6b,
	0xb2, 0xa5, 0xa5, 0xee, 0xd9, 0x83, 0x59, 0xf3, 0x13, 0x15, 0xb9, 0xc0, 0x02, 0x31, 0x00, 0x21,
	0x9f, 0x5e, 0x50, 0xe7, 0xb1, 0xf5, 0xa3, 0xad, 0x67, 0x06, 0x54, 0xd5, 0xb1, 0x8e, 0xea, 0xf4,
	0x37, 0x50, 0x7b, 0xba, 0x38, 0x71, 0xd2, 0xba, 0xed, 0xdc, 0xd6, 0xa5, 0x4a, 0xa3, 0xeb, 0xb7,
	0x84, 0x45, 0x16, 0xac, 0x85, 0x11, 0x1b, 0x46, 0x6e, 0xa0, 0x86, 0xc0, 0x4e, 0x6e, 0x5b, 0xbf,
	0x19, 0x50, 0xef, 0x51, 0x9e, 0xae, 0xed, 0xa5, 0x74, 0x6d, 0x8b, 0xdd, 0xad, 0x83, 0x59, 0xf3,
	0x63, 0x19, 0x38, 0x7c, 0x1a, 0x5d, 0xc7, 0x4b, 0xe9, 0x3a, 0x6a, 0x84, 0x0c, 0xe4, 0x20, 0x3e,
	0xa0, 0x66, 0x3f, 0x1b, 0x60, 0x0a, 0xad, 0x1d, 0x55, 0xb1, 0xbb, 0xb9, 0x15, 0xcb, 0xaa, 0x75,
	0xf9, 0xb4, 0xef, 0x59, 0xae, 0x87, 0x50, 0x55, 0x82, 0x7d, 0xaf, 0xf9, 0x7c, 0x03, 0xe1, 0x08,
	0xe0, 0x6b, 0x46, 0xe8, 0xc3, 0x09, 0xcf, 0x9b, 0xdc, 0xab, 0x50, 0x12, 0xd6, 0x2a, 0xc9, 0xaa,
	0x57, 0xce, 0xb4, 0x95, 0x0c, 0xdb, 0xc2, 0x7b, 0xdb, 0xda, 0x7b, 0xdb, 0x02, 0xae, 0x4f, 0x21,
	0x1f, 0x7e, 0xc3, 0x62, 0x7f, 0x95, 0x00, 0x84, 0x4d, 0x1c, 0xb1, 0xda, 0xf5, 0xac, 0x4f, 0x6c,
	0xe5, 0x8a, 0x2d, 0xd7, 0x22, 0xbe, 0x5c, 0xb6, 0x08, 0x2b, 0xc7, 0x22, 0x72, 0xdc, 0xe1, 0x7a,
	0xd6, 0x1d, 0xb6, 0x72, 0xdd, 0x21, 0xcf, 0x18, 0xd0, 0x7d, 0xd8, 0x08, 0x26, 0xdc, 0xed, 0x8f,
	0xb1, 0x93, 0x70, 0x94, 0x73, 0x1b, 0xae, 0x38, 0xee, 0xe1, 0xa9, 0xf4, 0x59, 0x4d, 0x53, 0xd7,
	0xd8, 0x47, 0x9a, 0xad, 0x0b, 0x35, 0x1e, 0xb9, 0x34, 0x1e, 0xe0, 0xc8, 0x19, 0x60, 0x6c, 0xad,
	0x4a, 0xaa, 0xb7, 0x56, 0xbc, 0x9a, 0x80, 0xee, 0x60, 0x8c, 0xbe, 0x87, 0x4d, 0x1e, 0xb9, 0x3e,
	0x76, 0x42, 0x1c, 0x79, 0x98, 0x72, 0x77, 0x88, 0xad, 0xb5, 0x63, 0x39, 0xcb, 0x86, 0xe4, 0xd9,
	0x9d, 0xd3, 0xa0, 0x6b, 0x50, 0xf9, 0x69, 0xe2, 0x52, 0x4e, 0xf8, 0xd4, 0xaa, 0xc8, 0x89, 0x39,
	0x77, 0x30, 0x6b, 0x9e, 0x49, 0x62, 0x87, 0x67, 0x66, 0xfe, 0x38, 0xba, 0x0b, 0xeb, 0x6e, 0xc0,
	0x26, 0x94, 0x3b, 0x01, 0xa1, 0x1c, 0xfb, 0x96, 0x29, 0xf1, 0xad, 0x83, 0x59, 0xb3, 0xb1, 0x94,
	0x38, 0x4c, 0x52, 0x53, 0xf9, 0x07, 0x32, 0x8d, 0x3e, 0x05, 0x53, 0x6e, 0x4b, 0x94, 0xcd, 0x82,
	0x6d, 0x63, 0xa7, 0x62, 0x2f, 0x02, 0xad, 0x67, 0x65, 0xd8, 0x14, 0xda, 0x7a, 0xc0, 0x7c, 0x32,
	0x98, 0x1e, 0xa1, 0xb0, 0xcf, 0xa0, 0x2e, 0x96, 0x70, 0x88, 0xb0, 0x7b, 0x27, 0xc2, 0x03, 0x3d,
	0x26, 0x35, 0x92, 0xbc, 0xbc, 0x6c, 0x3c, 0x48, 0xeb, 0xb0, 0x78, 0x6c, 0x1d, 0x96, 0x8e, 0xa9,
	0xc3, 0xf2, 0x09, 0xe8, 0x70, 0xf5, 0xe4, 0x74, 0xb8, 0x76, 0x42, 0x3a, 0xac, 0x9c, 0xbc, 0x0e,
	0xcd, 0x0f, 0xd4, 0x21, 0x9c, 0x84, 0x0e, 0xab, 0x59, 0x1d, 0xfe, 0x67, 0x40, 0xf5, 0x36, 0xe5,
	0x11, 0xc1, 0xf1, 0x7d, 0x12, 0x73, 0x51, 0x50, 0xe1, 0x8a, 0x0e, 0x93, 0x8a, 0x8c, 0x2d, 0x43,
	0x17, 0x74, 0xb9, 0x37, 0x0b, 0x0f, 0x4e, 0x0a, 0xea, 0xcd, 0x23, 0xb2, 0x29, 0x52, 0xb6, 0x09,
	0x47, 0x21, 0x97, 0x63, 0xe1, 0xac, 0x09, 0x07, 0x99, 0x47, 0x62, 0xf4, 0x2d, 0x7c, 0x24, 0x39,
	0x02, 0x39, 0x1f, 0x73, 0xaa, 0x62, 0xee, 0x47, 0x51, 0x76, 0x90, 0x34, 0xe1, 0x29, 0x92, 0x89,
	0xc7, 0x2d, 0x02, 0x1b, 0xea, 0x6d, 0x86, 0xfd, 0x64, 0xa5, 0xf3, 0x60, 0x62, 0xca, 0xa3, 0xa9,
	0x43, 0x7c, 0x75, 0x5c, 0x53, 0xc3, 0x2b, 0x32, 0xdc, 0xf3, 0xe3, 0xd4, 0xeb, 0xb7, 0xf0, 0xee,
	0xaf, 0x5f, 0x0a, 0xa6, 0x28, 0x93, 0xfa, 0xc6, 0x74, 0xa1, 0x2c, 0x2a, 0xb4, 0xa8, 0xe7, 0x91,
	0x02, 0xbd, 0x24, 0xd6, 0xfe, 0xfd, 0x9f, 0xe6, 0xce, 0x3b, 0x68, 0x4e, 0x00, 0x62, 0x5b, 0x31,
	0xb7, 0x7e, 0x29, 0xc3, 0xaa, 0x2d, 0xff, 0x9f, 0xa0, 0x26, 0x54, 0x3d, 0xc6, 0x46, 0x7d, 0xc6,
	0x46, 0xce, 0xdc, 0x50, 0x20, 0x09, 0xf5, 0x7c, 0x6d, 0x34, 0x85, 0xb9, 0xd1, 0x9c, 0x87, 0x1a,
	0x65, 0x3e, 0x76, 0xf6, 0x70, 0x14, 0x13, 0x46, 0xd5, 0x57, 0x86, 0x5d, 0x15, 0xb1, 0xc7, 0x2a,
	0x84, 0x10, 0x94, 0xa8, 0x1b, 0x60, 0xab, 0x24, 0x41, 0xf2, 0x1a, 0x6d, 0x43, 0xd5, 0xc7, 0xb1,
	0x17, 0x91, 0x90, 0x0b, 0x54, 0x59, 0xa6, 0xd2, 0x21, 0xf1, 0x72, 0x4d, 0x38, 0x57, 0xd5, 0xcb,
	0x55, 0xdf, 0xa2, 0x1b, 0x20, 0x35, 0xa3, 0xbc, 0x2d, 0xd6, 0x83, 0x6b, 0xe5, 0xe8, 0x4c, 0x16,
	0x50, 0xb7, 0x04, 0xbc, 0x24, 0x20, 0x3e, 0x95, 0xab, 0x0b, 0x73, 0x8c, 0xad, 0x4a, 0x2e, 0xc1,
	0xfc, 0x2b, 0x3f, 0x21, 0x98, 0x3b, 0xa7, 0x74, 0x31, 0xac, 0x94, 0x2f, 0x67, 0xf3, 0xb0, 0x8b,
	0xa5, 0xe6, 0x22, 0x71, 0x31, 0x0d, 0x40, 0x5f, 0xc1, 0x5a, 0x22, 0x49, 0x90, 0x0b, 0x37, 0x32,
	0xd8, 0x8c, 0xca, 0x12, 0xbc, 0x06, 0xa1, 0xcf, 0xa1, 0xde, 0x1f, 0x33, 0x6f, 0xe4, 0x88, 0x19,
	0x8d, 0xf6, 0xdc, 0xb1, 0x9c, 0xcc, 0xa2, 0xbd, 0x2e, 0xa3, 0x3d, 0x1d, 0x44, 0xb7, 0xa1, 0xee,
	0xb1, 0x98, 0x0b, 0x67, 0x72, 0x64, 0xc6, 0xaa, 0xbd, 0xdb, 0xa7, 0x4d, 0x4d, 0xc0, 0x76, 0x71,
	0xd4, 0x15, 0x20, 0xd1, 0x05, 0x4c, 0xc5, 0xb8, 0xfb, 0xd6, 0xba, 0x34, 0x80, 0xe4, 0x16, 0x9d,
	0x03, 0xc0, 0xfb, 0x3c, 0x72, 0x1d, 0x42, 0x07, 0xcc, 0xaa, 0xcb, 0x16, 0x99, 0x32, 0xd2, 0xa3,
	0x03, 0x26, 0xd2, 0x5e, 0x84, 0x5d, 0x8e, 0x7d, 0xc7, 0xe5, 0xd6, 0x86, 0xdc, 0xa2, 0xa9, 0x23,
	0x37, 0xb9, 0x48, 0x4f, 0x42, 0x3f, 0x49, 0x6f, 0xaa, 0xb4, 0x8e, 0xdc, 0xe4, 0xdd, 0x3b, 0xcf,
	0x5f, 0x35, 0x8c, 0x17, 0xaf, 0x1a, 0xc6, 0xbf, 0xaf, 0x1a, 0xc6, 0xaf, 0xaf, 0x1b, 0x2b, 0x2f,
	0x5e, 0x37, 0x56, 0x5e, 0xbe, 0x6e, 0xac, 0xfc, 0x70, 0x21, 0x25, 0xee, 0x5d, 0x59, 0xb0, 0x8b,
	0x1c, 0x7b, 0x4f, 0x92, 0x7f, 0xc1, 0xfb, 0xc9, 0x85, 0x94, 0x79, 0x7f, 0x55, 0xfe, 0x21, 0xbe,
	0xfa, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x23, 0x3e, 0xf4, 0x8d, 0x0f, 0x00, 0x00,
}

func (m *DoubleInputParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoubleInputParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoubleInputParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaxValue.Size()
		i -= size
		if _, err := m.MaxValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRecipe(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.MinValue.Size()
		i -= size
		if _, err := m.MinValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRecipe(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintRecipe(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LongInputParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LongInputParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LongInputParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxValue != 0 {
		i = encodeVarintRecipe(dAtA, i, uint64(m.MaxValue))
		i--
		dAtA[i] = 0x18
	}
	if m.MinValue != 0 {
		i = encodeVarintRecipe(dAtA, i, uint64(m.MinValue))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintRecipe(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StringInputParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringInputParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringInputParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintRecipe(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintRecipe(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ItemInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Strings) > 0 {
		for iNdEx := len(m.Strings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Strings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecipe(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Longs) > 0 {
		for iNdEx := len(m.Longs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Longs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecipe(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Doubles) > 0 {
		for iNdEx := len(m.Doubles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Doubles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecipe(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRecipe(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DoubleWeightRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoubleWeightRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoubleWeightRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Weight != 0 {
		i = encodeVarintRecipe(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Upper.Size()
		i -= size
		if _, err := m.Upper.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRecipe(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Lower.Size()
		i -= size
		if _, err := m.Lower.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRecipe(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DoubleParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoubleParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoubleParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Program) > 0 {
		i -= len(m.Program)
		copy(dAtA[i:], m.Program)
		i = encodeVarintRecipe(dAtA, i, uint64(len(m.Program)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WeightRanges) > 0 {
		for iNdEx := len(m.WeightRanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WeightRanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecipe(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintRecipe(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IntWeightRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntWeightRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IntWeightRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Weight != 0 {
		i = encodeVarintRecipe(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x18
	}
	if m.Upper != 0 {
		i = encodeVarintRecipe(dAtA, i, uint64(m.Upper))
		i--
		dAtA[i] = 0x10
	}
	if m.Lower != 0 {
		i = encodeVarintRecipe(dAtA, i, uint64(m.Lower))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LongParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LongParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LongParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Program) > 0 {
		i -= len(m.Program)
		copy(dAtA[i:], m.Program)
		i = encodeVarintRecipe(dAtA, i, uint64(len(m.Program)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WeightRanges) > 0 {
		for iNdEx := len(m.WeightRanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WeightRanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecipe(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintRecipe(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StringParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Program) > 0 {
		i -= len(m.Program)
		copy(dAtA[i:], m.Program)
		i = encodeVarintRecipe(dAtA, i, uint64(len(m.Program)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintRecipe(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintRecipe(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CoinOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Program) > 0 {
		i -= len(m.Program)
		copy(dAtA[i:], m.Program)
		i = encodeVarintRecipe(dAtA, i, uint64(len(m.Program)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRecipe(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRecipe(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ItemOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tradeable {
		i--
		if m.Tradeable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.AmountMinted != 0 {
		i = encodeVarintRecipe(dAtA, i, uint64(m.AmountMinted))
		i--
		dAtA[i] = 0x48
	}
	if m.Quantity != 0 {
		i = encodeVarintRecipe(dAtA, i, uint64(m.Quantity))
		i--
		dAtA[i] = 0x40
	}
	{
		size := m.TradePercentage.Size()
		i -= size
		if _, err := m.TradePercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRecipe(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.TransferFee) > 0 {
		for iNdEx := len(m.TransferFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TransferFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecipe(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.MutableStrings) > 0 {
		for iNdEx := len(m.MutableStrings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MutableStrings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecipe(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Strings) > 0 {
		for iNdEx := len(m.Strings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Strings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecipe(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Longs) > 0 {
		for iNdEx := len(m.Longs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Longs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecipe(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Doubles) > 0 {
		for iNdEx := len(m.Doubles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Doubles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecipe(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRecipe(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ItemModifyOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemModifyOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemModifyOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tradeable {
		i--
		if m.Tradeable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.AmountMinted != 0 {
		i = encodeVarintRecipe(dAtA, i, uint64(m.AmountMinted))
		i--
		dAtA[i] = 0x50
	}
	if m.Quantity != 0 {
		i = encodeVarintRecipe(dAtA, i, uint64(m.Quantity))
		i--
		dAtA[i] = 0x48
	}
	{
		size := m.TradePercentage.Size()
		i -= size
		if _, err := m.TradePercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRecipe(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.TransferFee) > 0 {
		for iNdEx := len(m.TransferFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TransferFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecipe(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.MutableStrings) > 0 {
		for iNdEx := len(m.MutableStrings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MutableStrings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecipe(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Strings) > 0 {
		for iNdEx := len(m.Strings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Strings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecipe(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Longs) > 0 {
		for iNdEx := len(m.Longs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Longs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecipe(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Doubles) > 0 {
		for iNdEx := len(m.Doubles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Doubles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecipe(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ItemInputRef) > 0 {
		i -= len(m.ItemInputRef)
		copy(dAtA[i:], m.ItemInputRef)
		i = encodeVarintRecipe(dAtA, i, uint64(len(m.ItemInputRef)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRecipe(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EntriesList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntriesList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EntriesList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ItemModifyOutputs) > 0 {
		for iNdEx := len(m.ItemModifyOutputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ItemModifyOutputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecipe(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ItemOutputs) > 0 {
		for iNdEx := len(m.ItemOutputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ItemOutputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecipe(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CoinOutputs) > 0 {
		for iNdEx := len(m.CoinOutputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CoinOutputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecipe(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WeightedOutputs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeightedOutputs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeightedOutputs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Weight != 0 {
		i = encodeVarintRecipe(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.EntryIds) > 0 {
		for iNdEx := len(m.EntryIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EntryIds[iNdEx])
			copy(dAtA[i:], m.EntryIds[iNdEx])
			i = encodeVarintRecipe(dAtA, i, uint64(len(m.EntryIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CoinInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecipe(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Recipe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Recipe) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Recipe) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != 0 {
		i = encodeVarintRecipe(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.CreatedAt != 0 {
		i = encodeVarintRecipe(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x78
	}
	if len(m.ExtraInfo) > 0 {
		i -= len(m.ExtraInfo)
		copy(dAtA[i:], m.ExtraInfo)
		i = encodeVarintRecipe(dAtA, i, uint64(len(m.ExtraInfo)))
		i--
		dAtA[i] = 0x72
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	{
		size, err := m.CostPerBlock.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRecipe(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if m.BlockInterval != 0 {
		i = encodeVarintRecipe(dAtA, i, uint64(m.BlockInterval))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Outputs) > 0 {
		for iNdEx := len(m.Outputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Outputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecipe(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	{
		size, err := m.Entries.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRecipe(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.ItemInputs) > 0 {
		for iNdEx := len(m.ItemInputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ItemInputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecipe(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.CoinInputs) > 0 {
		for iNdEx := len(m.CoinInputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CoinInputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecipe(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintRecipe(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintRecipe(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRecipe(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.NodeVersion != 0 {
		i = encodeVarintRecipe(dAtA, i, uint64(m.NodeVersion))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRecipe(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CookbookId) > 0 {
		i -= len(m.CookbookId)
		copy(dAtA[i:], m.CookbookId)
		i = encodeVarintRecipe(dAtA, i, uint64(len(m.CookbookId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRecipe(dAtA []byte, offset int, v uint64) int {
	offset -= sovRecipe(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DoubleInputParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRecipe(uint64(l))
	}
	l = m.MinValue.Size()
	n += 1 + l + sovRecipe(uint64(l))
	l = m.MaxValue.Size()
	n += 1 + l + sovRecipe(uint64(l))
	return n
}

func (m *LongInputParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRecipe(uint64(l))
	}
	if m.MinValue != 0 {
		n += 1 + sovRecipe(uint64(m.MinValue))
	}
	if m.MaxValue != 0 {
		n += 1 + sovRecipe(uint64(m.MaxValue))
	}
	return n
}

func (m *StringInputParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRecipe(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRecipe(uint64(l))
	}
	return n
}

func (m *ItemInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRecipe(uint64(l))
	}
	if len(m.Doubles) > 0 {
		for _, e := range m.Doubles {
			l = e.Size()
			n += 1 + l + sovRecipe(uint64(l))
		}
	}
	if len(m.Longs) > 0 {
		for _, e := range m.Longs {
			l = e.Size()
			n += 1 + l + sovRecipe(uint64(l))
		}
	}
	if len(m.Strings) > 0 {
		for _, e := range m.Strings {
			l = e.Size()
			n += 1 + l + sovRecipe(uint64(l))
		}
	}
	return n
}

func (m *DoubleWeightRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Lower.Size()
	n += 1 + l + sovRecipe(uint64(l))
	l = m.Upper.Size()
	n += 1 + l + sovRecipe(uint64(l))
	if m.Weight != 0 {
		n += 1 + sovRecipe(uint64(m.Weight))
	}
	return n
}

func (m *DoubleParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRecipe(uint64(l))
	}
	if len(m.WeightRanges) > 0 {
		for _, e := range m.WeightRanges {
			l = e.Size()
			n += 1 + l + sovRecipe(uint64(l))
		}
	}
	l = len(m.Program)
	if l > 0 {
		n += 1 + l + sovRecipe(uint64(l))
	}
	return n
}

func (m *IntWeightRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lower != 0 {
		n += 1 + sovRecipe(uint64(m.Lower))
	}
	if m.Upper != 0 {
		n += 1 + sovRecipe(uint64(m.Upper))
	}
	if m.Weight != 0 {
		n += 1 + sovRecipe(uint64(m.Weight))
	}
	return n
}

func (m *LongParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRecipe(uint64(l))
	}
	if len(m.WeightRanges) > 0 {
		for _, e := range m.WeightRanges {
			l = e.Size()
			n += 1 + l + sovRecipe(uint64(l))
		}
	}
	l = len(m.Program)
	if l > 0 {
		n += 1 + l + sovRecipe(uint64(l))
	}
	return n
}

func (m *StringParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRecipe(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRecipe(uint64(l))
	}
	l = len(m.Program)
	if l > 0 {
		n += 1 + l + sovRecipe(uint64(l))
	}
	return n
}

func (m *CoinOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRecipe(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovRecipe(uint64(l))
	l = len(m.Program)
	if l > 0 {
		n += 1 + l + sovRecipe(uint64(l))
	}
	return n
}

func (m *ItemOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRecipe(uint64(l))
	}
	if len(m.Doubles) > 0 {
		for _, e := range m.Doubles {
			l = e.Size()
			n += 1 + l + sovRecipe(uint64(l))
		}
	}
	if len(m.Longs) > 0 {
		for _, e := range m.Longs {
			l = e.Size()
			n += 1 + l + sovRecipe(uint64(l))
		}
	}
	if len(m.Strings) > 0 {
		for _, e := range m.Strings {
			l = e.Size()
			n += 1 + l + sovRecipe(uint64(l))
		}
	}
	if len(m.MutableStrings) > 0 {
		for _, e := range m.MutableStrings {
			l = e.Size()
			n += 1 + l + sovRecipe(uint64(l))
		}
	}
	if len(m.TransferFee) > 0 {
		for _, e := range m.TransferFee {
			l = e.Size()
			n += 1 + l + sovRecipe(uint64(l))
		}
	}
	l = m.TradePercentage.Size()
	n += 1 + l + sovRecipe(uint64(l))
	if m.Quantity != 0 {
		n += 1 + sovRecipe(uint64(m.Quantity))
	}
	if m.AmountMinted != 0 {
		n += 1 + sovRecipe(uint64(m.AmountMinted))
	}
	if m.Tradeable {
		n += 2
	}
	return n
}

func (m *ItemModifyOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRecipe(uint64(l))
	}
	l = len(m.ItemInputRef)
	if l > 0 {
		n += 1 + l + sovRecipe(uint64(l))
	}
	if len(m.Doubles) > 0 {
		for _, e := range m.Doubles {
			l = e.Size()
			n += 1 + l + sovRecipe(uint64(l))
		}
	}
	if len(m.Longs) > 0 {
		for _, e := range m.Longs {
			l = e.Size()
			n += 1 + l + sovRecipe(uint64(l))
		}
	}
	if len(m.Strings) > 0 {
		for _, e := range m.Strings {
			l = e.Size()
			n += 1 + l + sovRecipe(uint64(l))
		}
	}
	if len(m.MutableStrings) > 0 {
		for _, e := range m.MutableStrings {
			l = e.Size()
			n += 1 + l + sovRecipe(uint64(l))
		}
	}
	if len(m.TransferFee) > 0 {
		for _, e := range m.TransferFee {
			l = e.Size()
			n += 1 + l + sovRecipe(uint64(l))
		}
	}
	l = m.TradePercentage.Size()
	n += 1 + l + sovRecipe(uint64(l))
	if m.Quantity != 0 {
		n += 1 + sovRecipe(uint64(m.Quantity))
	}
	if m.AmountMinted != 0 {
		n += 1 + sovRecipe(uint64(m.AmountMinted))
	}
	if m.Tradeable {
		n += 2
	}
	return n
}

func (m *EntriesList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CoinOutputs) > 0 {
		for _, e := range m.CoinOutputs {
			l = e.Size()
			n += 1 + l + sovRecipe(uint64(l))
		}
	}
	if len(m.ItemOutputs) > 0 {
		for _, e := range m.ItemOutputs {
			l = e.Size()
			n += 1 + l + sovRecipe(uint64(l))
		}
	}
	if len(m.ItemModifyOutputs) > 0 {
		for _, e := range m.ItemModifyOutputs {
			l = e.Size()
			n += 1 + l + sovRecipe(uint64(l))
		}
	}
	return n
}

func (m *WeightedOutputs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EntryIds) > 0 {
		for _, s := range m.EntryIds {
			l = len(s)
			n += 1 + l + sovRecipe(uint64(l))
		}
	}
	if m.Weight != 0 {
		n += 1 + sovRecipe(uint64(m.Weight))
	}
	return n
}

func (m *CoinInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovRecipe(uint64(l))
		}
	}
	return n
}

func (m *Recipe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CookbookId)
	if l > 0 {
		n += 1 + l + sovRecipe(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRecipe(uint64(l))
	}
	if m.NodeVersion != 0 {
		n += 1 + sovRecipe(uint64(m.NodeVersion))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRecipe(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovRecipe(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovRecipe(uint64(l))
	}
	if len(m.CoinInputs) > 0 {
		for _, e := range m.CoinInputs {
			l = e.Size()
			n += 1 + l + sovRecipe(uint64(l))
		}
	}
	if len(m.ItemInputs) > 0 {
		for _, e := range m.ItemInputs {
			l = e.Size()
			n += 1 + l + sovRecipe(uint64(l))
		}
	}
	l = m.Entries.Size()
	n += 1 + l + sovRecipe(uint64(l))
	if len(m.Outputs) > 0 {
		for _, e := range m.Outputs {
			l = e.Size()
			n += 1 + l + sovRecipe(uint64(l))
		}
	}
	if m.BlockInterval != 0 {
		n += 1 + sovRecipe(uint64(m.BlockInterval))
	}
	l = m.CostPerBlock.Size()
	n += 1 + l + sovRecipe(uint64(l))
	if m.Enabled {
		n += 2
	}
	l = len(m.ExtraInfo)
	if l > 0 {
		n += 1 + l + sovRecipe(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovRecipe(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 2 + sovRecipe(uint64(m.UpdatedAt))
	}
	return n
}

func sovRecipe(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRecipe(x uint64) (n int) {
	return sovRecipe(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DoubleInputParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecipe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoubleInputParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoubleInputParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecipe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecipe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LongInputParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecipe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LongInputParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LongInputParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValue", wireType)
			}
			m.MinValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValue", wireType)
			}
			m.MaxValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecipe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecipe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringInputParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecipe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringInputParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringInputParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecipe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecipe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecipe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doubles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doubles = append(m.Doubles, DoubleInputParam{})
			if err := m.Doubles[len(m.Doubles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Longs = append(m.Longs, LongInputParam{})
			if err := m.Longs[len(m.Longs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strings = append(m.Strings, StringInputParam{})
			if err := m.Strings[len(m.Strings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecipe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecipe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoubleWeightRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecipe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoubleWeightRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoubleWeightRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lower", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Lower.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Upper.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecipe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecipe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoubleParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecipe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoubleParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoubleParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightRanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeightRanges = append(m.WeightRanges, DoubleWeightRange{})
			if err := m.WeightRanges[len(m.WeightRanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Program = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecipe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecipe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IntWeightRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecipe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntWeightRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntWeightRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lower", wireType)
			}
			m.Lower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lower |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upper", wireType)
			}
			m.Upper = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Upper |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecipe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecipe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LongParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecipe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LongParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LongParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightRanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeightRanges = append(m.WeightRanges, IntWeightRange{})
			if err := m.WeightRanges[len(m.WeightRanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Program = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecipe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecipe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecipe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Program = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecipe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecipe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecipe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Program = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecipe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecipe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecipe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doubles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doubles = append(m.Doubles, DoubleParam{})
			if err := m.Doubles[len(m.Doubles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Longs = append(m.Longs, LongParam{})
			if err := m.Longs[len(m.Longs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strings = append(m.Strings, StringParam{})
			if err := m.Strings[len(m.Strings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MutableStrings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MutableStrings = append(m.MutableStrings, StringKeyValue{})
			if err := m.MutableStrings[len(m.MutableStrings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferFee = append(m.TransferFee, types.Coin{})
			if err := m.TransferFee[len(m.TransferFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradePercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TradePercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountMinted", wireType)
			}
			m.AmountMinted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmountMinted |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tradeable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tradeable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRecipe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecipe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemModifyOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecipe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemModifyOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemModifyOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemInputRef", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemInputRef = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doubles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doubles = append(m.Doubles, DoubleParam{})
			if err := m.Doubles[len(m.Doubles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Longs = append(m.Longs, LongParam{})
			if err := m.Longs[len(m.Longs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strings = append(m.Strings, StringParam{})
			if err := m.Strings[len(m.Strings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MutableStrings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MutableStrings = append(m.MutableStrings, StringKeyValue{})
			if err := m.MutableStrings[len(m.MutableStrings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferFee = append(m.TransferFee, types.Coin{})
			if err := m.TransferFee[len(m.TransferFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradePercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TradePercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountMinted", wireType)
			}
			m.AmountMinted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmountMinted |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tradeable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tradeable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRecipe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecipe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntriesList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecipe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntriesList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntriesList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinOutputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinOutputs = append(m.CoinOutputs, CoinOutput{})
			if err := m.CoinOutputs[len(m.CoinOutputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemOutputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemOutputs = append(m.ItemOutputs, ItemOutput{})
			if err := m.ItemOutputs[len(m.ItemOutputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemModifyOutputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemModifyOutputs = append(m.ItemModifyOutputs, ItemModifyOutput{})
			if err := m.ItemModifyOutputs[len(m.ItemModifyOutputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecipe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecipe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeightedOutputs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecipe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeightedOutputs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeightedOutputs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryIds = append(m.EntryIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecipe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecipe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecipe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecipe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecipe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Recipe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecipe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Recipe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Recipe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookbookId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CookbookId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeVersion", wireType)
			}
			m.NodeVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinInputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinInputs = append(m.CoinInputs, CoinInput{})
			if err := m.CoinInputs[len(m.CoinInputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemInputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemInputs = append(m.ItemInputs, ItemInput{})
			if err := m.ItemInputs[len(m.ItemInputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Entries.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outputs = append(m.Outputs, WeightedOutputs{})
			if err := m.Outputs[len(m.Outputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockInterval", wireType)
			}
			m.BlockInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CostPerBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CostPerBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecipe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecipe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRecipe(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRecipe
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecipe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRecipe
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRecipe
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRecipe
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRecipe        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRecipe          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRecipe = fmt.Errorf("proto: unexpected end of group")
)
