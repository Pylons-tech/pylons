// Mocks generated by Mockito 5.0.14 from annotations
// in pylons_wallet/test/unit_testing/stores/wallet_store_imp_test.dart.
// Do not manually edit this file.

import 'dart:async' as i4;

import 'package:alan/wallet/network_info.dart' as i11;
import 'package:cosmos_utils/credentials_storage_failure.dart' as i5;
import 'package:dartz/dartz.dart' as i2;
import 'package:mockito/mockito.dart' as i1;
import 'package:pylons_wallet/stores/models/transaction_response.dart' as i13;
import 'package:pylons_wallet/utils/custom_transaction_signing_gateaway/custom_transaction_signing_gateway.dart'
    as i3;
import 'package:transaction_signing_gateway/model/account_derivation_failure.dart'
    as i14;
import 'package:transaction_signing_gateway/model/account_derivation_info.dart'
    as i15;
import 'package:transaction_signing_gateway/model/account_lookup_key.dart'
    as i10;
import 'package:transaction_signing_gateway/model/account_public_info.dart'
    as i16;
import 'package:transaction_signing_gateway/model/signed_transaction.dart'
    as i8;
import 'package:transaction_signing_gateway/model/transaction_broadcasting_failure.dart'
    as i12;
import 'package:transaction_signing_gateway/model/transaction_signing_failure.dart'
    as i7;
import 'package:transaction_signing_gateway/model/unsigned_transaction.dart'
    as i9;
import 'package:transaction_signing_gateway/transaction_signing_gateway.dart'
    as i6;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither_0<L, R> extends i1.Fake implements i2.Either<L, R> {}

/// A class which mocks [CustomTransactionSigningGateway].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomTransactionSigningGateway extends i1.Mock
    implements i3.CustomTransactionSigningGateway {
  MockCustomTransactionSigningGateway() {
    i1.throwOnMissingStub(this);
  }

  @override
  i4.Future<i2.Either<i5.CredentialsStorageFailure, i2.Unit>>
      storeWalletCredentials(
              {i6.PrivateAccountCredentials? credentials, String? password}) =>
          (super.noSuchMethod(
              Invocation.method(#storeWalletCredentials, [],
                  {#credentials: credentials, #password: password}),
              returnValue:
                  Future<i2.Either<i5.CredentialsStorageFailure, i2.Unit>>.value(
                      _FakeEither_0<i5.CredentialsStorageFailure, i2.Unit>())) as i4
              .Future<i2.Either<i5.CredentialsStorageFailure, i2.Unit>>);
  @override
  i4.Future<i2.Either<i7.TransactionSigningFailure, i8.SignedTransaction>> signTransaction(
          {i9.UnsignedTransaction? transaction,
          i10.AccountLookupKey? walletLookupKey}) =>
      (super.noSuchMethod(
          Invocation.method(#signTransaction, [],
              {#transaction: transaction, #walletLookupKey: walletLookupKey}),
          returnValue:
              Future<i2.Either<i7.TransactionSigningFailure, i8.SignedTransaction>>.value(
                  _FakeEither_0<i7.TransactionSigningFailure, i8.SignedTransaction>())) as i4
          .Future<i2.Either<i7.TransactionSigningFailure, i8.SignedTransaction>>);
  @override
  i4.Future<String> signPureMessage(
          {i11.NetworkInfo? networkInfo,
          i10.AccountLookupKey? walletLookupKey,
          String? msg}) =>
      (super.noSuchMethod(
          Invocation.method(#signPureMessage, [], {
            #networkInfo: networkInfo,
            #walletLookupKey: walletLookupKey,
            #msg: msg
          }),
          returnValue: Future<String>.value('')) as i4.Future<String>);
  @override
  i4.Future<i2.Either<i12.TransactionBroadcastingFailure, i13.TransactionResponse>> broadcastTransaction(
          {i10.AccountLookupKey? walletLookupKey,
          i8.SignedTransaction? transaction}) =>
      (super.noSuchMethod(
          Invocation.method(#broadcastTransaction, [],
              {#walletLookupKey: walletLookupKey, #transaction: transaction}),
          returnValue: Future<i2.Either<i12.TransactionBroadcastingFailure, i13.TransactionResponse>>.value(
              _FakeEither_0<i12.TransactionBroadcastingFailure, i13.TransactionResponse>())) as i4
          .Future<i2.Either<i12.TransactionBroadcastingFailure, i13.TransactionResponse>>);
  @override
  i4.Future<i2.Either<i14.AccountDerivationFailure, i6.PrivateAccountCredentials>> deriveWallet(
          {i15.AccountDerivationInfo? walletDerivationInfo}) =>
      (super.noSuchMethod(
          Invocation.method(
              #deriveWallet, [], {#walletDerivationInfo: walletDerivationInfo}),
          returnValue:
              Future<i2.Either<i14.AccountDerivationFailure, i6.PrivateAccountCredentials>>.value(
                  _FakeEither_0<i14.AccountDerivationFailure, i6.PrivateAccountCredentials>())) as i4
          .Future<i2.Either<i14.AccountDerivationFailure, i6.PrivateAccountCredentials>>);
  @override
  i4.Future<i2.Either<i5.CredentialsStorageFailure, List<i16.AccountPublicInfo>>>
      getWalletsList() => (super.noSuchMethod(Invocation.method(#getWalletsList, []),
          returnValue:
              Future<i2.Either<i5.CredentialsStorageFailure, List<i16.AccountPublicInfo>>>.value(
                  _FakeEither_0<i5.CredentialsStorageFailure,
                      List<i16.AccountPublicInfo>>())) as i4
          .Future<i2.Either<i5.CredentialsStorageFailure, List<i16.AccountPublicInfo>>>);
  @override
  i4.Future<i2.Either<i7.TransactionSigningFailure, bool>> verifyLookupKey(
          i10.AccountLookupKey? walletLookupKey) =>
      (super.noSuchMethod(
              Invocation.method(#verifyLookupKey, [walletLookupKey]),
              returnValue:
                  Future<i2.Either<i7.TransactionSigningFailure, bool>>.value(
                      _FakeEither_0<i7.TransactionSigningFailure, bool>()))
          as i4.Future<i2.Either<i7.TransactionSigningFailure, bool>>);
}
