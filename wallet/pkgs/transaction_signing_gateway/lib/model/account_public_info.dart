import 'package:equatable/equatable.dart';

class AccountPublicInfo extends Equatable {
  const AccountPublicInfo({
    required this.name,
    required this.publicAddress,
    required this.accountId,
    required this.chainId,
    this.additionalData,
  });

  /// a user-specified name to distinguish different accounts
  final String name;

  /// public hex address, for example "cosmos1ec4v57s7weuwatd36dgpjh8hj4gnj2cuut9sav" for cosmos-based chain
  /// or "0x9BCf3021B356F9352D3811fFCd4F778D63FdF208" for ethereum-based chain
  final String publicAddress;

  /// a uuid of the account credentials, must be generated by client apps when importing account info,
  /// for example using uuid package:
  /// Uuid().v4()
  final String accountId;

  /// Unique identifier for the blockchain that this account belongs to.
  /// This string can be whatever the developer finds suitable, for example:
  /// "ethereum", "atom", "akash", "foo" or "bar" :)
  final String chainId;

  /// optional additional data stored in an insecure way
  final String? additionalData;

  @override
  List<Object?> get props => [
        name,
        publicAddress,
        accountId,
        chainId,
        additionalData,
      ];

  AccountPublicInfo copyWith({
    String? name,
    String? publicAddress,
    String? accountId,
    String? chainId,
    String? additionalData,
  }) {
    return AccountPublicInfo(
      name: name ?? this.name,
      publicAddress: publicAddress ?? this.publicAddress,
      accountId: accountId ?? this.accountId,
      chainId: chainId ?? this.chainId,
      additionalData: additionalData ?? this.additionalData,
    );
  }
}
